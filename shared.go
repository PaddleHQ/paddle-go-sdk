// Code generated by the Paddle SDK Generator; DO NOT EDIT.

package paddle

import paddleerr "github.com/PaddleHQ/paddle-go-sdk/pkg/paddleerr"

// ErrNotFound represents a `not_found` error.
// See https://developer.paddle.com/errors/shared/not_found for more information.
var ErrNotFound = &paddleerr.Error{
	Code: "not_found",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrInvalidURL represents a `invalid_url` error.
// See https://developer.paddle.com/errors/shared/invalid_url for more information.
var ErrInvalidURL = &paddleerr.Error{
	Code: "invalid_url",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrAuthenticationMissing represents a `authentication_missing` error.
// See https://developer.paddle.com/errors/shared/authentication_missing for more information.
var ErrAuthenticationMissing = &paddleerr.Error{
	Code: "authentication_missing",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrAuthenticationMalformed represents a `authentication_malformed` error.
// See https://developer.paddle.com/errors/shared/authentication_malformed for more information.
var ErrAuthenticationMalformed = &paddleerr.Error{
	Code: "authentication_malformed",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrInvalidToken represents a `invalid_token` error.
// See https://developer.paddle.com/errors/shared/invalid_token for more information.
var ErrInvalidToken = &paddleerr.Error{
	Code: "invalid_token",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrPaddleBillingNotEnabled represents a `paddle_billing_not_enabled` error.
// See https://developer.paddle.com/errors/shared/paddle_billing_not_enabled for more information.
var ErrPaddleBillingNotEnabled = &paddleerr.Error{
	Code: "paddle_billing_not_enabled",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrForbidden represents a `forbidden` error.
// See https://developer.paddle.com/errors/shared/forbidden for more information.
var ErrForbidden = &paddleerr.Error{
	Code: "forbidden",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrBadRequest represents a `bad_request` error.
// See https://developer.paddle.com/errors/shared/bad_request for more information.
var ErrBadRequest = &paddleerr.Error{
	Code: "bad_request",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrInternalError represents a `internal_error` error.
// See https://developer.paddle.com/errors/shared/internal_error for more information.
var ErrInternalError = &paddleerr.Error{
	Code: "internal_error",
	Type: paddleerr.ErrorTypeAPIError,
}

// ErrServiceUnavailable represents a `service_unavailable` error.
// See https://developer.paddle.com/errors/shared/service_unavailable for more information.
var ErrServiceUnavailable = &paddleerr.Error{
	Code: "service_unavailable",
	Type: paddleerr.ErrorTypeAPIError,
}

// ErrMethodNotAllowed represents a `method_not_allowed` error.
// See https://developer.paddle.com/errors/shared/method_not_allowed for more information.
var ErrMethodNotAllowed = &paddleerr.Error{
	Code: "method_not_allowed",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrNotImplemented represents a `not_implemented` error.
// See https://developer.paddle.com/errors/shared/not_implemented for more information.
var ErrNotImplemented = &paddleerr.Error{
	Code: "not_implemented",
	Type: paddleerr.ErrorTypeAPIError,
}

// ErrBadGateway represents a `bad_gateway` error.
// See https://developer.paddle.com/errors/shared/bad_gateway for more information.
var ErrBadGateway = &paddleerr.Error{
	Code: "bad_gateway",
	Type: paddleerr.ErrorTypeAPIError,
}

// ErrTooManyRequests represents a `too_many_requests` error.
// See https://developer.paddle.com/errors/shared/too_many_requests for more information.
var ErrTooManyRequests = &paddleerr.Error{
	Code: "too_many_requests",
	Type: paddleerr.ErrorTypeAPIError,
}

// ErrEntityArchived represents a `entity_archived` error.
// See https://developer.paddle.com/errors/shared/entity_archived for more information.
var ErrEntityArchived = &paddleerr.Error{
	Code: "entity_archived",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrInvalidField represents a `invalid_field` error.
// See https://developer.paddle.com/errors/shared/invalid_field for more information.
var ErrInvalidField = &paddleerr.Error{
	Code: "invalid_field",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrConcurrentModification represents a `concurrent_modification` error.
// See https://developer.paddle.com/errors/shared/concurrent_modification for more information.
var ErrConcurrentModification = &paddleerr.Error{
	Code: "concurrent_modification",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrConflict represents a `conflict` error.
// See https://developer.paddle.com/errors/shared/conflict for more information.
var ErrConflict = &paddleerr.Error{
	Code: "conflict",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrInvalidJson represents a `invalid_json` error.
// See https://developer.paddle.com/errors/shared/invalid_json for more information.
var ErrInvalidJson = &paddleerr.Error{
	Code: "invalid_json",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrInvalidTimeQueryParameter represents a `invalid_time_query_parameter` error.
// See https://developer.paddle.com/errors/shared/invalid_time_query_parameter for more information.
var ErrInvalidTimeQueryParameter = &paddleerr.Error{
	Code: "invalid_time_query_parameter",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrUnsupportedMediaType represents a `unsupported_media_type` error.
// See https://developer.paddle.com/errors/shared/unsupported_media_type for more information.
var ErrUnsupportedMediaType = &paddleerr.Error{
	Code: "unsupported_media_type",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrReceiptDataNotEnabled represents a `receipt_data_not_enabled` error.
// See https://developer.paddle.com/errors/shared/receipt_data_not_enabled for more information.
var ErrReceiptDataNotEnabled = &paddleerr.Error{
	Code: "receipt_data_not_enabled",
	Type: paddleerr.ErrorTypeRequestError,
}

// CatalogType: Return items that match the specified type..
type CatalogType string

const (
	CatalogTypeCustom   = "custom"
	CatalogTypeStandard = "standard"
)

// TaxCategory: Tax category for this product. Used for charging the correct rate of tax. Selected tax category must be enabled on your Paddle account..
type TaxCategory string

const (
	TaxCategoryDigitalGoods                = "digital-goods"
	TaxCategoryEbooks                      = "ebooks"
	TaxCategoryImplementationServices      = "implementation-services"
	TaxCategoryProfessionalServices        = "professional-services"
	TaxCategorySaas                        = "saas"
	TaxCategorySoftwareProgrammingServices = "software-programming-services"
	TaxCategoryStandard                    = "standard"
	TaxCategoryTrainingServices            = "training-services"
	TaxCategoryWebsiteHosting              = "website-hosting"
)

// Status: Whether this entity can be used in Paddle..
type Status string

const (
	StatusActive   = "active"
	StatusArchived = "archived"
)

// ImportMeta: Import information for this entity. `null` if this entity is not imported.
type ImportMeta struct {
	// ExternalID: Reference or identifier for this entity from the solution where it was imported from.
	ExternalID *string `json:"external_id,omitempty"`
	// ImportedFrom: Name of the platform where this entity was imported from.
	ImportedFrom string `json:"imported_from,omitempty"`
}

// Interval: Unit of time..
type Interval string

const (
	IntervalDay   = "day"
	IntervalWeek  = "week"
	IntervalMonth = "month"
	IntervalYear  = "year"
)

// Duration: How often this price should be charged. `null` if price is non-recurring (one-time).
type Duration struct {
	// Interval: Unit of time.
	Interval string `json:"interval,omitempty"`
	// Frequency: Amount of time.
	Frequency int `json:"frequency,omitempty"`
}

// TaxMode: How tax is calculated for this price..
type TaxMode string

const (
	TaxModeAccountSetting = "account_setting"
	TaxModeExternal       = "external"
	TaxModeInternal       = "internal"
)

// CurrencyCode: Supported three-letter ISO 4217 currency code..
type CurrencyCode string

const (
	CurrencyCodeUSD = "USD"
	CurrencyCodeEUR = "EUR"
	CurrencyCodeGBP = "GBP"
	CurrencyCodeJPY = "JPY"
	CurrencyCodeAUD = "AUD"
	CurrencyCodeCAD = "CAD"
	CurrencyCodeCHF = "CHF"
	CurrencyCodeHKD = "HKD"
	CurrencyCodeSGD = "SGD"
	CurrencyCodeSEK = "SEK"
	CurrencyCodeARS = "ARS"
	CurrencyCodeBRL = "BRL"
	CurrencyCodeCNY = "CNY"
	CurrencyCodeCOP = "COP"
	CurrencyCodeCZK = "CZK"
	CurrencyCodeDKK = "DKK"
	CurrencyCodeHUF = "HUF"
	CurrencyCodeILS = "ILS"
	CurrencyCodeINR = "INR"
	CurrencyCodeKRW = "KRW"
	CurrencyCodeMXN = "MXN"
	CurrencyCodeNOK = "NOK"
	CurrencyCodeNZD = "NZD"
	CurrencyCodePLN = "PLN"
	CurrencyCodeRUB = "RUB"
	CurrencyCodeTHB = "THB"
	CurrencyCodeTRY = "TRY"
	CurrencyCodeTWD = "TWD"
	CurrencyCodeUAH = "UAH"
	CurrencyCodeZAR = "ZAR"
)

// Money: Base price. This price applies to all customers, except for customers located in countries where you have `unit_price_overrides`.
type Money struct {
	// Amount: Amount in the lowest denomination for the currency, e.g. 10 USD = 1000 (cents).
	Amount string `json:"amount,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code.
	CurrencyCode string `json:"currency_code,omitempty"`
}

// CountryCode: Supported two-letter ISO 3166-1 alpha-2 country code..
type CountryCode string

const (
	CountryCodeAD = "AD"
	CountryCodeAE = "AE"
	CountryCodeAG = "AG"
	CountryCodeAI = "AI"
	CountryCodeAL = "AL"
	CountryCodeAM = "AM"
	CountryCodeAO = "AO"
	CountryCodeAR = "AR"
	CountryCodeAS = "AS"
	CountryCodeAT = "AT"
	CountryCodeAU = "AU"
	CountryCodeAW = "AW"
	CountryCodeAX = "AX"
	CountryCodeAZ = "AZ"
	CountryCodeBA = "BA"
	CountryCodeBB = "BB"
	CountryCodeBD = "BD"
	CountryCodeBE = "BE"
	CountryCodeBF = "BF"
	CountryCodeBG = "BG"
	CountryCodeBH = "BH"
	CountryCodeBI = "BI"
	CountryCodeBJ = "BJ"
	CountryCodeBL = "BL"
	CountryCodeBM = "BM"
	CountryCodeBN = "BN"
	CountryCodeBO = "BO"
	CountryCodeBQ = "BQ"
	CountryCodeBR = "BR"
	CountryCodeBS = "BS"
	CountryCodeBT = "BT"
	CountryCodeBV = "BV"
	CountryCodeBW = "BW"
	CountryCodeBZ = "BZ"
	CountryCodeCA = "CA"
	CountryCodeCC = "CC"
	CountryCodeCG = "CG"
	CountryCodeCH = "CH"
	CountryCodeCI = "CI"
	CountryCodeCK = "CK"
	CountryCodeCL = "CL"
	CountryCodeCM = "CM"
	CountryCodeCN = "CN"
	CountryCodeCO = "CO"
	CountryCodeCR = "CR"
	CountryCodeCV = "CV"
	CountryCodeCW = "CW"
	CountryCodeCX = "CX"
	CountryCodeCY = "CY"
	CountryCodeCZ = "CZ"
	CountryCodeDE = "DE"
	CountryCodeDJ = "DJ"
	CountryCodeDK = "DK"
	CountryCodeDM = "DM"
	CountryCodeDO = "DO"
	CountryCodeDZ = "DZ"
	CountryCodeEC = "EC"
	CountryCodeEE = "EE"
	CountryCodeEG = "EG"
	CountryCodeEH = "EH"
	CountryCodeER = "ER"
	CountryCodeES = "ES"
	CountryCodeET = "ET"
	CountryCodeFI = "FI"
	CountryCodeFJ = "FJ"
	CountryCodeFK = "FK"
	CountryCodeFM = "FM"
	CountryCodeFO = "FO"
	CountryCodeFR = "FR"
	CountryCodeGA = "GA"
	CountryCodeGB = "GB"
	CountryCodeGD = "GD"
	CountryCodeGE = "GE"
	CountryCodeGF = "GF"
	CountryCodeGG = "GG"
	CountryCodeGH = "GH"
	CountryCodeGI = "GI"
	CountryCodeGL = "GL"
	CountryCodeGM = "GM"
	CountryCodeGN = "GN"
	CountryCodeGP = "GP"
	CountryCodeGQ = "GQ"
	CountryCodeGR = "GR"
	CountryCodeGS = "GS"
	CountryCodeGT = "GT"
	CountryCodeGU = "GU"
	CountryCodeGW = "GW"
	CountryCodeGY = "GY"
	CountryCodeHK = "HK"
	CountryCodeHM = "HM"
	CountryCodeHN = "HN"
	CountryCodeHR = "HR"
	CountryCodeHU = "HU"
	CountryCodeID = "ID"
	CountryCodeIE = "IE"
	CountryCodeIL = "IL"
	CountryCodeIM = "IM"
	CountryCodeIN = "IN"
	CountryCodeIO = "IO"
	CountryCodeIQ = "IQ"
	CountryCodeIS = "IS"
	CountryCodeIT = "IT"
	CountryCodeJE = "JE"
	CountryCodeJM = "JM"
	CountryCodeJO = "JO"
	CountryCodeJP = "JP"
	CountryCodeKE = "KE"
	CountryCodeKG = "KG"
	CountryCodeKH = "KH"
	CountryCodeKI = "KI"
	CountryCodeKM = "KM"
	CountryCodeKN = "KN"
	CountryCodeKR = "KR"
	CountryCodeKW = "KW"
	CountryCodeKY = "KY"
	CountryCodeKZ = "KZ"
	CountryCodeLA = "LA"
	CountryCodeLB = "LB"
	CountryCodeLC = "LC"
	CountryCodeLI = "LI"
	CountryCodeLK = "LK"
	CountryCodeLR = "LR"
	CountryCodeLS = "LS"
	CountryCodeLT = "LT"
	CountryCodeLU = "LU"
	CountryCodeLV = "LV"
	CountryCodeMA = "MA"
	CountryCodeMC = "MC"
	CountryCodeMD = "MD"
	CountryCodeME = "ME"
	CountryCodeMF = "MF"
	CountryCodeMG = "MG"
	CountryCodeMH = "MH"
	CountryCodeMK = "MK"
	CountryCodeMN = "MN"
	CountryCodeMO = "MO"
	CountryCodeMP = "MP"
	CountryCodeMQ = "MQ"
	CountryCodeMR = "MR"
	CountryCodeMS = "MS"
	CountryCodeMT = "MT"
	CountryCodeMU = "MU"
	CountryCodeMV = "MV"
	CountryCodeMW = "MW"
	CountryCodeMX = "MX"
	CountryCodeMY = "MY"
	CountryCodeMZ = "MZ"
	CountryCodeNA = "NA"
	CountryCodeNC = "NC"
	CountryCodeNE = "NE"
	CountryCodeNF = "NF"
	CountryCodeNG = "NG"
	CountryCodeNL = "NL"
	CountryCodeNO = "NO"
	CountryCodeNP = "NP"
	CountryCodeNR = "NR"
	CountryCodeNU = "NU"
	CountryCodeNZ = "NZ"
	CountryCodeOM = "OM"
	CountryCodePA = "PA"
	CountryCodePE = "PE"
	CountryCodePF = "PF"
	CountryCodePG = "PG"
	CountryCodePH = "PH"
	CountryCodePK = "PK"
	CountryCodePL = "PL"
	CountryCodePM = "PM"
	CountryCodePN = "PN"
	CountryCodePR = "PR"
	CountryCodePS = "PS"
	CountryCodePT = "PT"
	CountryCodePW = "PW"
	CountryCodePY = "PY"
	CountryCodeQA = "QA"
	CountryCodeRE = "RE"
	CountryCodeRO = "RO"
	CountryCodeRS = "RS"
	CountryCodeRW = "RW"
	CountryCodeSA = "SA"
	CountryCodeSB = "SB"
	CountryCodeSC = "SC"
	CountryCodeSE = "SE"
	CountryCodeSG = "SG"
	CountryCodeSH = "SH"
	CountryCodeSI = "SI"
	CountryCodeSJ = "SJ"
	CountryCodeSK = "SK"
	CountryCodeSL = "SL"
	CountryCodeSM = "SM"
	CountryCodeSN = "SN"
	CountryCodeSR = "SR"
	CountryCodeST = "ST"
	CountryCodeSV = "SV"
	CountryCodeSX = "SX"
	CountryCodeSZ = "SZ"
	CountryCodeTC = "TC"
	CountryCodeTD = "TD"
	CountryCodeTF = "TF"
	CountryCodeTG = "TG"
	CountryCodeTH = "TH"
	CountryCodeTJ = "TJ"
	CountryCodeTK = "TK"
	CountryCodeTL = "TL"
	CountryCodeTM = "TM"
	CountryCodeTN = "TN"
	CountryCodeTO = "TO"
	CountryCodeTR = "TR"
	CountryCodeTT = "TT"
	CountryCodeTV = "TV"
	CountryCodeTW = "TW"
	CountryCodeTZ = "TZ"
	CountryCodeUA = "UA"
	CountryCodeUG = "UG"
	CountryCodeUM = "UM"
	CountryCodeUS = "US"
	CountryCodeUY = "UY"
	CountryCodeUZ = "UZ"
	CountryCodeVA = "VA"
	CountryCodeVC = "VC"
	CountryCodeVG = "VG"
	CountryCodeVI = "VI"
	CountryCodeVN = "VN"
	CountryCodeVU = "VU"
	CountryCodeWF = "WF"
	CountryCodeWS = "WS"
	CountryCodeXK = "XK"
	CountryCodeYT = "YT"
	CountryCodeZA = "ZA"
	CountryCodeZM = "ZM"
)

// UnitPriceOverride: List of unit price overrides. Use to override the base price with a custom price and currency for a country or group of countries.
type UnitPriceOverride struct {
	// CountryCodes: Supported two-letter ISO 3166-1 alpha-2 country code.
	CountryCodes []CountryCode `json:"country_codes,omitempty"`
	// UnitPrice: Override price. This price applies to customers located in the countries for this unit price override.
	UnitPrice Money `json:"unit_price,omitempty"`
}

// PriceQuantity: Limits on how many times the related product can be purchased at this price. Useful for discount campaigns.
type PriceQuantity struct {
	// Minimum: Minimum quantity of the product related to this price that can be bought. Required if `maximum` set.
	Minimum int `json:"minimum,omitempty"`
	// Maximum: Maximum quantity of the product related to this price that can be bought. Required if `minimum` set. Must be greater than or equal to the `minimum` value.
	Maximum int `json:"maximum,omitempty"`
}

// Price: Represents a price entity.
type Price struct {
	// ID: Unique Paddle ID for this price, prefixed with `pri_`.
	ID string `json:"id,omitempty"`
	// ProductID: Paddle ID for the product that this price is for, prefixed with `pro_`.
	ProductID string `json:"product_id,omitempty"`
	// Description: Internal description for this price, not shown to customers. Typically notes for your team.
	Description string `json:"description,omitempty"`
	// Type: Type of item. Standard items are considered part of your catalog and are shown on the Paddle web app.
	Type string `json:"type,omitempty"`
	// Name: Name of this price, shown to customers at checkout and on invoices. Typically describes how often the related product bills.
	Name *string `json:"name,omitempty"`
	// BillingCycle: How often this price should be charged. `null` if price is non-recurring (one-time).
	BillingCycle *Duration `json:"billing_cycle,omitempty"`
	// TrialPeriod: Trial period for the product related to this price. The billing cycle begins once the trial period is over. `null` for no trial period. Requires `billing_cycle`.
	TrialPeriod *Duration `json:"trial_period,omitempty"`
	// TaxMode: How tax is calculated for this price.
	TaxMode string `json:"tax_mode,omitempty"`
	// UnitPrice: Base price. This price applies to all customers, except for customers located in countries where you have `unit_price_overrides`.
	UnitPrice Money `json:"unit_price,omitempty"`
	// UnitPriceOverrides: List of unit price overrides. Use to override the base price with a custom price and currency for a country or group of countries.
	UnitPriceOverrides []UnitPriceOverride `json:"unit_price_overrides,omitempty"`
	// Quantity: Limits on how many times the related product can be purchased at this price. Useful for discount campaigns.
	Quantity PriceQuantity `json:"quantity,omitempty"`
	// Status: Whether this entity can be used in Paddle.
	Status string `json:"status,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	// ImportMeta: Import information for this entity. `null` if this entity is not imported.
	ImportMeta *ImportMeta `json:"import_meta,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Pagination: Keys used for working with paginated results.
type Pagination struct {
	// PerPage: Number of entities per page for this response. May differ from the number requested if the requested number is greater than the maximum.
	PerPage int `json:"per_page,omitempty"`
	// Next: URL containing the query parameters of the original request, along with the `after` parameter that marks the starting point of the next page. Always returned, even if `has_more` is `false`.
	Next string `json:"next,omitempty"`
	// HasMore: Whether this response has another page.
	HasMore bool `json:"has_more,omitempty"`
	// EstimatedTotal: Estimated number of entities for this response.
	EstimatedTotal int `json:"estimated_total,omitempty"`
}

// MetaPaginated: Information about this response.
type MetaPaginated struct {
	// RequestID: Unique ID for the request relating to this response. Provide this when contacting Paddle support about a specific request.
	RequestID string `json:"request_id,omitempty"`
	// Pagination: Keys used for working with paginated results.
	Pagination Pagination `json:"pagination,omitempty"`
}

// Product: Represents a product entity.
type Product struct {
	// ID: Unique Paddle ID for this product, prefixed with `pro_`.
	ID string `json:"id,omitempty"`
	// Name: Name of this product.
	Name string `json:"name,omitempty"`
	// Description: Short description for this product.
	Description *string `json:"description,omitempty"`
	// Type: Type of item. Standard items are considered part of your catalog and are shown on the Paddle web app.
	Type string `json:"type,omitempty"`
	// TaxCategory: Tax category for this product. Used for charging the correct rate of tax. Selected tax category must be enabled on your Paddle account.
	TaxCategory string `json:"tax_category,omitempty"`
	// ImageURL: Image for this product. Included in the checkout and on some customer documents.
	ImageURL *string `json:"image_url,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	// Status: Whether this entity can be used in Paddle.
	Status string `json:"status,omitempty"`
	// ImportMeta: Import information for this entity. `null` if this entity is not imported.
	ImportMeta *ImportMeta `json:"import_meta,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Meta: Information about this response.
type Meta struct {
	// RequestID: Unique ID for the request relating to this response. Provide this when contacting Paddle support about a specific request.
	RequestID string `json:"request_id,omitempty"`
}

// CollectionMode: Return entities that match the specified collection mode..
type CollectionMode string

const (
	CollectionModeAutomatic = "automatic"
	CollectionModeManual    = "manual"
)

// TransactionStatus: Status of this transaction. You may set a transaction to `billed` or `canceled`, other statuses are set automatically by Paddle. Automatically-collected transactions may return `completed` if payment is captured successfully, or `past_due` if payment failed..
type TransactionStatus string

const (
	TransactionStatusDraft     = "draft"
	TransactionStatusReady     = "ready"
	TransactionStatusBilled    = "billed"
	TransactionStatusPaid      = "paid"
	TransactionStatusCompleted = "completed"
	TransactionStatusCanceled  = "canceled"
	TransactionStatusPastDue   = "past_due"
)

// TransactionOrigin: Describes how this transaction was created..
type TransactionOrigin string

const (
	TransactionOriginAPI                             = "api"
	TransactionOriginSubscriptionCharge              = "subscription_charge"
	TransactionOriginSubscriptionPaymentMethodChange = "subscription_payment_method_change"
	TransactionOriginSubscriptionRecurring           = "subscription_recurring"
	TransactionOriginSubscriptionUpdate              = "subscription_update"
	TransactionOriginWeb                             = "web"
)

// BillingDetails: Details for invoicing. Required if `collection_mode` is `manual`.
type BillingDetails struct {
	// EnableCheckout: Whether the related transaction may be paid using a Paddle Checkout.
	EnableCheckout bool `json:"enable_checkout,omitempty"`
	// PurchaseOrderNumber: Customer purchase order number. Appears on invoice documents.
	PurchaseOrderNumber string `json:"purchase_order_number,omitempty"`
	// AdditionalInformation: Notes or other information to include on this invoice. Appears on invoice documents.
	AdditionalInformation *string `json:"additional_information,omitempty"`
	// PaymentTerms: How long a customer has to pay this invoice once issued.
	PaymentTerms Duration `json:"payment_terms,omitempty"`
}

// TimePeriod: Time period that this transaction is for. Set automatically by Paddle for subscription renewals to describe the period that charges are for.
type TimePeriod struct {
	// StartsAt: RFC 3339 datetime string of when this period starts.
	StartsAt string `json:"starts_at,omitempty"`
	// EndsAt: RFC 3339 datetime string of when this period ends.
	EndsAt string `json:"ends_at,omitempty"`
}

// Proration: How proration was calculated for this item. Populated when a transaction is created from a subscription change, where `proration_billing_mode` was `prorated_immediately` or `prorated_next_billing_period`. Set automatically by Paddle.
type Proration struct {
	// Rate: Rate used to calculate proration.
	Rate string `json:"rate,omitempty"`
	// BillingPeriod: Billing period that proration is based on.
	BillingPeriod TimePeriod `json:"billing_period,omitempty"`
}

// TransactionItem: List of items on this transaction. For calculated totals, use `details.line_items`.
type TransactionItem struct {
	// PriceID: Paddle ID for the price to add to this transaction, prefixed with `pri_`.
	PriceID string `json:"price_id,omitempty"`
	// Price: Represents a price entity.
	Price Price `json:"price,omitempty"`
	// Quantity: Quantity of this item on the transaction.
	Quantity int `json:"quantity,omitempty"`
	// Proration: How proration was calculated for this item. Populated when a transaction is created from a subscription change, where `proration_billing_mode` was `prorated_immediately` or `prorated_next_billing_period`. Set automatically by Paddle.
	Proration *Proration `json:"proration,omitempty"`
}

// Totals: Calculated totals for the tax applied to this transaction.
type Totals struct {
	// Subtotal: Subtotal before discount, tax, and deductions. If an item, unit price multiplied by quantity.
	Subtotal string `json:"subtotal,omitempty"`
	/*
	   Discount: Total discount as a result of any discounts applied.

	   Except for percentage discounts, Paddle applies tax to discounts based on the line item `price.tax_mode`. If `price.tax_mode` for a line item is `internal`, Paddle removes tax from the discount applied.
	*/
	Discount string `json:"discount,omitempty"`
	// Tax: Total tax on the subtotal.
	Tax string `json:"tax,omitempty"`
	// Total: Total after discount and tax.
	Total string `json:"total,omitempty"`
}

// TaxRatesUsed: List of tax rates applied for this transaction.
type TaxRatesUsed struct {
	// TaxRate: Rate used to calculate tax for this transaction.
	TaxRate string `json:"tax_rate,omitempty"`
	// Totals: Calculated totals for the tax applied to this transaction.
	Totals Totals `json:"totals,omitempty"`
}

// TransactionTotals: Breakdown of the total for a transaction. These numbers can become negative when dealing with subscription updates that result in credit.
type TransactionTotals struct {
	// Subtotal: Subtotal before discount, tax, and deductions. If an item, unit price multiplied by quantity.
	Subtotal string `json:"subtotal,omitempty"`
	/*
	   Discount: Total discount as a result of any discounts applied.

	   Except for percentage discounts, Paddle applies tax to discounts based on the line item `price.tax_mode`. If `price.tax_mode` for a line item is `internal`, Paddle removes tax from the discount applied.
	*/
	Discount string `json:"discount,omitempty"`
	// Tax: Total tax on the subtotal.
	Tax string `json:"tax,omitempty"`
	// Total: Total after discount and tax.
	Total string `json:"total,omitempty"`
	// Credit: Total credit applied to this transaction. This includes credits applied using a customer's credit balance and adjustments to a `billed` transaction.
	Credit string `json:"credit,omitempty"`
	// CreditToBalance: Additional credit generated from negative `details.line_items`. This credit is added to the customer balance.
	CreditToBalance string `json:"credit_to_balance,omitempty"`
	// Balance: Total due on a transaction after credits and any payments.
	Balance string `json:"balance,omitempty"`
	// GrandTotal: Total due on a transaction after credits but before any payments.
	GrandTotal string `json:"grand_total,omitempty"`
	// Fee: Total fee taken by Paddle for this transaction. `null` until the transaction is `completed` and the fee is processed.
	Fee *string `json:"fee,omitempty"`
	// Earnings: Total earnings for this transaction. This is the total minus the Paddle fee. `null` until the transaction is `completed` and the fee is processed.
	Earnings *string `json:"earnings,omitempty"`
	// CurrencyCode: Three-letter ISO 4217 currency code of the currency used for this transaction.
	CurrencyCode string `json:"currency_code,omitempty"`
}

// TransactionTotalsAdjusted: Breakdown of the payout totals for a transaction after adjustments. `null` until the transaction is `completed`.
type TransactionTotalsAdjusted struct {
	// Subtotal: Subtotal before discount, tax, and deductions. If an item, unit price multiplied by quantity.
	Subtotal string `json:"subtotal,omitempty"`
	// Tax: Total tax on the subtotal.
	Tax string `json:"tax,omitempty"`
	// Total: Total after tax.
	Total string `json:"total,omitempty"`
	// GrandTotal: Total due after credits but before any payments.
	GrandTotal string `json:"grand_total,omitempty"`
	// Fee: Total fee taken by Paddle for this transaction. `null` until the transaction is `completed` and the fee is processed.
	Fee *string `json:"fee,omitempty"`
	/*
	   Earnings: Total earnings for this transaction. This is the total minus the Paddle fee.
	   `null` until the transaction is `completed` and the fee is processed.
	*/
	Earnings *string `json:"earnings,omitempty"`
	// CurrencyCode: Three-letter ISO 4217 currency code of the currency used for this transaction.
	CurrencyCode string `json:"currency_code,omitempty"`
}

// CurrencyCodePayouts: Three-letter ISO 4217 currency code used for the payout for this transaction. If your primary currency has changed, this reflects the primary currency at the time the transaction was billed..
type CurrencyCodePayouts string

const (
	CurrencyCodePayoutsAUD = "AUD"
	CurrencyCodePayoutsCAD = "CAD"
	CurrencyCodePayoutsCHF = "CHF"
	CurrencyCodePayoutsCNY = "CNY"
	CurrencyCodePayoutsCZK = "CZK"
	CurrencyCodePayoutsDKK = "DKK"
	CurrencyCodePayoutsEUR = "EUR"
	CurrencyCodePayoutsGBP = "GBP"
	CurrencyCodePayoutsHUF = "HUF"
	CurrencyCodePayoutsPLN = "PLN"
	CurrencyCodePayoutsSEK = "SEK"
	CurrencyCodePayoutsUSD = "USD"
	CurrencyCodePayoutsZAR = "ZAR"
)

// TransactionPayoutTotals: Breakdown of the payout total for a transaction. `null` until the transaction is `completed`. Returned in your payout currency.
type TransactionPayoutTotals struct {
	// Subtotal: Total before tax and fees.
	Subtotal string `json:"subtotal,omitempty"`
	/*
	   Discount: Total discount as a result of any discounts applied.
	   Except for percentage discounts, Paddle applies tax to discounts based on the line item `price.tax_mode`. If `price.tax_mode` for a line item is `internal`, Paddle removes tax from the discount applied.
	*/
	Discount string `json:"discount,omitempty"`
	// Tax: Total tax on the subtotal.
	Tax string `json:"tax,omitempty"`
	// Total: Total after tax.
	Total string `json:"total,omitempty"`
	// Credit: Total credit applied to this transaction. This includes credits applied using a customer's credit balance and adjustments to a `billed` transaction.
	Credit string `json:"credit,omitempty"`
	// CreditToBalance: Additional credit generated from negative `details.line_items`. This credit is added to the customer balance.
	CreditToBalance string `json:"credit_to_balance,omitempty"`
	// Balance: Total due on a transaction after credits and any payments.
	Balance string `json:"balance,omitempty"`
	// GrandTotal: Total due on a transaction after credits but before any payments.
	GrandTotal string `json:"grand_total,omitempty"`
	// Fee: Total fee taken by Paddle for this payout.
	Fee string `json:"fee,omitempty"`
	// Earnings: Total earnings for this payout. This is the subtotal minus the Paddle fee.
	Earnings string `json:"earnings,omitempty"`
	// CurrencyCode: Three-letter ISO 4217 currency code used for the payout for this transaction. If your primary currency has changed, this reflects the primary currency at the time the transaction was billed.
	CurrencyCode string `json:"currency_code,omitempty"`
}

// CurrencyCodeChargebacks: Three-letter ISO 4217 currency code for the original chargeback fee..
type CurrencyCodeChargebacks string

const (
	CurrencyCodeChargebacksEUR = "EUR"
	CurrencyCodeChargebacksGBP = "GBP"
	CurrencyCodeChargebacksUSD = "USD"
)

// Original: Chargeback fee before conversion to the payout currency. `null` when the chargeback fee is the same as the payout currency.
type Original struct {
	// Amount: Fee amount for this chargeback in the original currency.
	Amount string `json:"amount,omitempty"`
	// CurrencyCode: Three-letter ISO 4217 currency code for the original chargeback fee.
	CurrencyCode string `json:"currency_code,omitempty"`
}

// ChargebackFee: Details of any chargeback fees incurred for this transaction.
type ChargebackFee struct {
	// Amount: Chargeback fee converted into the payout currency.
	Amount string `json:"amount,omitempty"`
	// Original: Chargeback fee before conversion to the payout currency. `null` when the chargeback fee is the same as the payout currency.
	Original *Original `json:"original,omitempty"`
}

// TransactionPayoutTotalsAdjusted: Breakdown of the payout total for a transaction after adjustments. `null` until the transaction is `completed`.
type TransactionPayoutTotalsAdjusted struct {
	// Subtotal: Total before tax and fees.
	Subtotal string `json:"subtotal,omitempty"`
	// Tax: Total tax on the subtotal.
	Tax string `json:"tax,omitempty"`
	// Total: Total after tax.
	Total string `json:"total,omitempty"`
	// Fee: Total fee taken by Paddle for this payout.
	Fee string `json:"fee,omitempty"`
	// ChargebackFee: Details of any chargeback fees incurred for this transaction.
	ChargebackFee ChargebackFee `json:"chargeback_fee,omitempty"`
	// Earnings: Total earnings for this payout. This is the subtotal minus the Paddle fee, excluding chargeback fees.
	Earnings string `json:"earnings,omitempty"`
	// CurrencyCode: Three-letter ISO 4217 currency code used for the payout for this transaction. If your primary currency has changed, this reflects the primary currency at the time the transaction was billed.
	CurrencyCode string `json:"currency_code,omitempty"`
}

// UnitTotals: Breakdown of the charge for one unit in the lowest denomination of a currency (e.g. cents for USD).
type UnitTotals struct {
	// Subtotal: Unit price.
	Subtotal string `json:"subtotal,omitempty"`
	/*
	   Discount: Total discount as a result of any discounts applied.
	   Except for percentage discounts, Paddle applies tax to discounts based on the line item `price.tax_mode`. If `price.tax_mode` for a line item is `internal`, Paddle removes tax from the discount applied.
	*/
	Discount string `json:"discount,omitempty"`
	// Tax: Total tax on the subtotal.
	Tax string `json:"tax,omitempty"`
	// Total: Total after discount and tax.
	Total string `json:"total,omitempty"`
}

// TransactionLineItem: Information about line items for this transaction. Different from transaction `items` as they include totals calculated by Paddle. Considered the source of truth for line item totals.
type TransactionLineItem struct {
	// ID: Unique Paddle ID for this transaction item, prefixed with `txnitm_`.
	ID string `json:"id,omitempty"`
	// PriceID: Paddle ID for the price related to this transaction line item, prefixed with `pri_`.
	PriceID string `json:"price_id,omitempty"`
	// Quantity: Quantity of this transaction line item.
	Quantity int `json:"quantity,omitempty"`
	// Proration: How proration was calculated for this item. Populated when a transaction is created from a subscription change, where `proration_billing_mode` was `prorated_immediately` or `prorated_next_billing_period`. Set automatically by Paddle.
	Proration *Proration `json:"proration,omitempty"`
	// TaxRate: Rate used to calculate tax for this transaction line item.
	TaxRate string `json:"tax_rate,omitempty"`
	// UnitTotals: Breakdown of the charge for one unit in the lowest denomination of a currency (e.g. cents for USD).
	UnitTotals UnitTotals `json:"unit_totals,omitempty"`
	// Totals: Breakdown of a charge in the lowest denomination of a currency (e.g. cents for USD).
	Totals Totals `json:"totals,omitempty"`
	// Product: Related product entity for this transaction line item price.
	Product Product `json:"product,omitempty"`
}

// TransactionDetails: Calculated totals for a transaction, including proration, discounts, tax, and currency conversion. Considered the source of truth for totals on a transaction.
type TransactionDetails struct {
	// TaxRatesUsed: List of tax rates applied for this transaction.
	TaxRatesUsed []TaxRatesUsed `json:"tax_rates_used,omitempty"`
	// Totals: Breakdown of the total for a transaction. These numbers can become negative when dealing with subscription updates that result in credit.
	Totals TransactionTotals `json:"totals,omitempty"`
	// AdjustedTotals: Breakdown of the payout totals for a transaction after adjustments. `null` until the transaction is `completed`.
	AdjustedTotals TransactionTotalsAdjusted `json:"adjusted_totals,omitempty"`
	// PayoutTotals: Breakdown of the payout total for a transaction. `null` until the transaction is `completed`. Returned in your payout currency.
	PayoutTotals *TransactionPayoutTotals `json:"payout_totals,omitempty"`
	// AdjustedPayoutTotals: Breakdown of the payout total for a transaction after adjustments. `null` until the transaction is `completed`.
	AdjustedPayoutTotals *TransactionPayoutTotalsAdjusted `json:"adjusted_payout_totals,omitempty"`
	// LineItems: Information about line items for this transaction. Different from transaction `items` as they include totals calculated by Paddle. Considered the source of truth for line item totals.
	LineItems []TransactionLineItem `json:"line_items,omitempty"`
}

// PaymentAttemptStatus: Status of this payment attempt..
type PaymentAttemptStatus string

const (
	PaymentAttemptStatusAuthorized              = "authorized"
	PaymentAttemptStatusAuthorizedFlagged       = "authorized_flagged"
	PaymentAttemptStatusCanceled                = "canceled"
	PaymentAttemptStatusCaptured                = "captured"
	PaymentAttemptStatusError                   = "error"
	PaymentAttemptStatusActionRequired          = "action_required"
	PaymentAttemptStatusPendingNoActionRequired = "pending_no_action_required"
	PaymentAttemptStatusCreated                 = "created"
	PaymentAttemptStatusUnknown                 = "unknown"
	PaymentAttemptStatusDropped                 = "dropped"
)

// ErrorCode: Reason why a payment attempt failed. Returns `null` if payment captured successfully..
type ErrorCode *string

const (
	ErrorCodeAlreadyCanceled         = "already_canceled"
	ErrorCodeAlreadyRefunded         = "already_refunded"
	ErrorCodeAuthenticationFailed    = "authentication_failed"
	ErrorCodeBlockedCard             = "blocked_card"
	ErrorCodeCanceled                = "canceled"
	ErrorCodeDeclined                = "declined"
	ErrorCodeDeclinedNotRetryable    = "declined_not_retryable"
	ErrorCodeExpiredCard             = "expired_card"
	ErrorCodeFraud                   = "fraud"
	ErrorCodeInvalidAmount           = "invalid_amount"
	ErrorCodeInvalidPaymentDetails   = "invalid_payment_details"
	ErrorCodeIssuerUnavailable       = "issuer_unavailable"
	ErrorCodeNotEnoughBalance        = "not_enough_balance"
	ErrorCodePspError                = "psp_error"
	ErrorCodeRedactedPaymentMethod   = "redacted_payment_method"
	ErrorCodeSystemError             = "system_error"
	ErrorCodeTransactionNotPermitted = "transaction_not_permitted"
	ErrorCodeUnknown                 = "unknown"
)

// PaymentMethodType: Type of payment method used for this payment attempt..
type PaymentMethodType string

const (
	PaymentMethodTypeAlipay       = "alipay"
	PaymentMethodTypeApplePay     = "apple_pay"
	PaymentMethodTypeBancontact   = "bancontact"
	PaymentMethodTypeCard         = "card"
	PaymentMethodTypeGooglePay    = "google_pay"
	PaymentMethodTypeIdeal        = "ideal"
	PaymentMethodTypeOffline      = "offline"
	PaymentMethodTypePaypal       = "paypal"
	PaymentMethodTypeUnknown      = "unknown"
	PaymentMethodTypeWireTransfer = "wire_transfer"
)

// CardType: Type of credit or debit card used to pay..
type CardType string

const (
	CardTypeAmericanExpress = "american_express"
	CardTypeDinersClub      = "diners_club"
	CardTypeDiscover        = "discover"
	CardTypeJcb             = "jcb"
	CardTypeMada            = "mada"
	CardTypeMaestro         = "maestro"
	CardTypeMastercard      = "mastercard"
	CardTypeUnionPay        = "union_pay"
	CardTypeUnknown         = "unknown"
	CardTypeVisa            = "visa"
)

// Card: Information about the credit or debit card used to pay. `null` unless `type` is `card`.
type Card struct {
	// Type: Type of credit or debit card used to pay.
	Type string `json:"type,omitempty"`
	// Last4: Last four digits of the card used to pay.
	Last4 string `json:"last4,omitempty"`
	// ExpiryMonth: Month of the expiry date of the card used to pay.
	ExpiryMonth int `json:"expiry_month,omitempty"`
	// ExpiryYear: Year of the expiry year of the card used to pay.
	ExpiryYear int `json:"expiry_year,omitempty"`
	// CardholderName: The name on the card used to pay.
	CardholderName string `json:"cardholder_name,omitempty"`
}

// MethodDetails: Information about the payment method used for a payment attempt.
type MethodDetails struct {
	// Type: Type of payment method used for this payment attempt.
	Type string `json:"type,omitempty"`
	// Card: Information about the credit or debit card used to pay. `null` unless `type` is `card`.
	Card *Card `json:"card,omitempty"`
}

// TransactionPaymentAttempt: List of payment attempts for this transaction, including successful payments. Sorted by `created_at` in descending order, so most recent attempts are returned first.
type TransactionPaymentAttempt struct {
	// PaymentAttemptID: UUID for this payment attempt.
	PaymentAttemptID string `json:"payment_attempt_id,omitempty"`
	// StoredPaymentMethodID: UUID for the stored payment method used for this payment attempt. Deprecated - use `payment_method_id` instead.
	StoredPaymentMethodID string `json:"stored_payment_method_id,omitempty"`
	// PaymentMethodID: Paddle ID of the payment method used for this payment attempt, prefixed with `paymtd_`.
	PaymentMethodID string `json:"payment_method_id,omitempty"`
	// Amount: Amount for collection in the lowest denomination of a currency (e.g. cents for USD).
	Amount string `json:"amount,omitempty"`
	// Status: Status of this payment attempt.
	Status string `json:"status,omitempty"`
	// ErrorCode: Reason why a payment attempt failed. Returns `null` if payment captured successfully.
	ErrorCode *string `json:"error_code,omitempty"`
	// MethodDetails: Information about the payment method used for a payment attempt.
	MethodDetails MethodDetails `json:"method_details,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
	CreatedAt string `json:"created_at,omitempty"`
	// CapturedAt: RFC 3339 datetime string of when this payment was captured. `null` if `status` is not `captured`.
	CapturedAt *string `json:"captured_at,omitempty"`
}

// Checkout: Paddle Checkout details for this transaction. Returned for automatically-collected transactions and where `billing_details.enable_checkout` is `true` for manually-collected transactions; `null` otherwise.
type Checkout struct {
	// URL: Paddle Checkout URL for this transaction, composed of the URL passed in the request or your default payment URL + `_?txn=` and the Paddle ID for this transaction.
	URL *string `json:"url,omitempty"`
}

// Address: Address for this transaction. Returned when the `include` parameter is used with the `address` value and the transaction has an `address_id`.
type Address struct {
	// ID: Unique Paddle ID for this address entity, prefixed with `add_`.
	ID string `json:"id,omitempty"`
	// CustomerID: Paddle ID for the customer related to this address, prefixed with `cus_`.
	CustomerID string `json:"customer_id,omitempty"`
	// Description: Memorable description for this address.
	Description *string `json:"description,omitempty"`
	// FirstLine: First line of this address.
	FirstLine *string `json:"first_line,omitempty"`
	// SecondLine: Second line of this address.
	SecondLine *string `json:"second_line,omitempty"`
	// City: City of this address.
	City *string `json:"city,omitempty"`
	// PostalCode: ZIP or postal code of this address. Required for some countries.
	PostalCode *string `json:"postal_code,omitempty"`
	// Region: State, county, or region of this address.
	Region *string `json:"region,omitempty"`
	// CountryCode: Supported two-letter ISO 3166-1 alpha-2 country code for this address.
	CountryCode string `json:"country_code,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	// Status: Whether this entity can be used in Paddle.
	Status string `json:"status,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
	UpdatedAt string `json:"updated_at,omitempty"`
	// ImportMeta: Import information for this entity. `null` if this entity is not imported.
	ImportMeta *ImportMeta `json:"import_meta,omitempty"`
}

// Action: How this adjustment impacts the related transaction. `refund` adjustments must be approved by Paddle, and are created with the status `pending_approval`..
type Action string

const (
	ActionCredit            = "credit"
	ActionRefund            = "refund"
	ActionChargeback        = "chargeback"
	ActionChargebackReverse = "chargeback_reverse"
	ActionChargebackWarning = "chargeback_warning"
	ActionCreditReverse     = "credit_reverse"
)

/*
AdjustmentStatus: Status of this adjustment. Set automatically by Paddle.

`refund` adjustments must be approved by Paddle, and are created with the status `pending_approval`
until they move to `approved` or `rejected` on review. Other kinds of adjustment do not need approval,
so are created with the status `approved`..
*/
type AdjustmentStatus string

const (
	AdjustmentStatusPendingApproval = "pending_approval"
	AdjustmentStatusApproved        = "approved"
	AdjustmentStatusRejected        = "rejected"
	AdjustmentStatusReversed        = "reversed"
)

/*
AdjustmentType: Type of adjustment for this transaction item. `tax` and `proration` are automatically created by Paddle.
Include `amount` when creating a `partial` adjustment..
*/
type AdjustmentType string

const (
	AdjustmentTypeFull      = "full"
	AdjustmentTypePartial   = "partial"
	AdjustmentTypeTax       = "tax"
	AdjustmentTypeProration = "proration"
)

// AdjustmentItemTotals: Breakdown of the total for an adjustment item.
type AdjustmentItemTotals struct {
	// Subtotal: Amount multiplied by quantity.
	Subtotal string `json:"subtotal,omitempty"`
	// Tax: Total tax on the subtotal.
	Tax string `json:"tax,omitempty"`
	// Total: Total after tax.
	Total string `json:"total,omitempty"`
}

// AdjustmentItem: List of items on this adjustment.
type AdjustmentItem struct {
	// ID: Unique Paddle ID for this adjustment item, prefixed with `adjitm_`.
	ID string `json:"id,omitempty"`
	// ItemID: Paddle ID for the transaction item that this adjustment item relates to, prefixed with `txnitm_`.
	ItemID string `json:"item_id,omitempty"`
	/*
	   Type: Type of adjustment for this transaction item. `tax` and `proration` are automatically created by Paddle.
	   Include `amount` when creating a `partial` adjustment.
	*/
	Type string `json:"type,omitempty"`
	// Amount: Amount adjusted for this transaction item. Required when adjustment type is `partial`.
	Amount *string `json:"amount,omitempty"`
	/*
	   Proration: How proration was calculated for this adjustment item. Populated when an adjustment type is `proration`.
	   Set automatically by Paddle.
	*/
	Proration *Proration `json:"proration,omitempty"`
	// Totals: Breakdown of the total for an adjustment item.
	Totals AdjustmentItemTotals `json:"totals,omitempty"`
}

// AdjustmentTotals: Breakdown of the total for an adjustment.
type AdjustmentTotals struct {
	// Subtotal: Total before tax. For tax adjustments, the value is 0.
	Subtotal string `json:"subtotal,omitempty"`
	// Tax: Total tax on the subtotal.
	Tax string `json:"tax,omitempty"`
	// Total: Total after tax.
	Total string `json:"total,omitempty"`
	// Fee: Total fee taken by Paddle for this adjustment.
	Fee string `json:"fee,omitempty"`
	/*
	   Earnings: Total earnings. This is the subtotal minus the Paddle fee.
	   For tax adjustments, this value is negative, which means a positive effect in the transaction earnings.
	   This is because the fee is originally calculated from the transaction total, so if a tax adjustment is made,
	   then the fee portion of it is returned.
	*/
	Earnings string `json:"earnings,omitempty"`
	// CurrencyCode: Three-letter ISO 4217 currency code used for this adjustment.
	CurrencyCode string `json:"currency_code,omitempty"`
}

// PayoutTotalsAdjustment: Breakdown of how this adjustment affects your payout balance.
type PayoutTotalsAdjustment struct {
	// Subtotal: Adjustment total before tax and fees.
	Subtotal string `json:"subtotal,omitempty"`
	// Tax: Total tax on the adjustment subtotal.
	Tax string `json:"tax,omitempty"`
	// Total: Adjustment total after tax.
	Total string `json:"total,omitempty"`
	// Fee: Adjusted Paddle fee.
	Fee string `json:"fee,omitempty"`
	// ChargebackFee: Chargeback fees incurred for this adjustment. Only returned when the adjustment `action` is `chargeback` or `chargeback_warning`.
	ChargebackFee ChargebackFee `json:"chargeback_fee,omitempty"`
	// Earnings: Adjusted payout earnings. This is the adjustment total plus adjusted Paddle fees, excluding chargeback fees.
	Earnings string `json:"earnings,omitempty"`
	// CurrencyCode: Three-letter ISO 4217 currency code used for the payout for this transaction. If your primary currency has changed, this reflects the primary currency at the time the transaction was billed.
	CurrencyCode string `json:"currency_code,omitempty"`
}

// Adjustment: Represents an adjustment entity.
type Adjustment struct {
	// ID: Unique Paddle ID for this adjustment entity, prefixed with `adj_`.
	ID string `json:"id,omitempty"`
	// Action: How this adjustment impacts the related transaction. `refund` adjustments must be approved by Paddle, and are created with the status `pending_approval`.
	Action string `json:"action,omitempty"`
	// TransactionID: Paddle ID for the transaction related to this adjustment, prefixed with `txn_`.
	TransactionID string `json:"transaction_id,omitempty"`
	/*
	   SubscriptionID: Paddle ID for the subscription related to this adjustment, prefixed with `sub_`.
	   Set automatically by Paddle based on the `subscription_id` of the related transaction.
	*/
	SubscriptionID *string `json:"subscription_id,omitempty"`
	/*
	   CustomerID: Paddle ID for the customer related to this adjustment, prefixed with `ctm_`.
	   Set automatically by Paddle based on the `customer_id` of the related transaction.
	*/
	CustomerID string `json:"customer_id,omitempty"`
	// Reason: Why this adjustment was created. Appears in the Paddle Dashboard. Retained for record-keeping purposes.
	Reason string `json:"reason,omitempty"`
	/*
	   CreditAppliedToBalance: Whether this adjustment was applied to the related customer's credit balance. Only returned for `credit` adjustments.

	   `false` when the related transaction `collection_mode` is `manual` and its `status` is `billed`. The adjustment is used
	   to reduce the `balance` due on the transaction.

	   `true` for automatically-collected transactions and `completed` manually-collected transactions.
	*/
	CreditAppliedToBalance *bool `json:"credit_applied_to_balance,omitempty"`
	// CurrencyCode: Three-letter ISO 4217 currency code for this adjustment. Set automatically by Paddle based on the `currency_code` of the related transaction.
	CurrencyCode string `json:"currency_code,omitempty"`
	/*
	   Status: Status of this adjustment. Set automatically by Paddle.

	   `refund` adjustments must be approved by Paddle, and are created with the status `pending_approval`
	   until they move to `approved` or `rejected` on review. Other kinds of adjustment do not need approval,
	   so are created with the status `approved`.
	*/
	Status string `json:"status,omitempty"`
	// Items: List of items on this adjustment.
	Items []AdjustmentItem `json:"items,omitempty"`
	// Totals: Breakdown of the total for an adjustment.
	Totals AdjustmentTotals `json:"totals,omitempty"`
	// PayoutTotals: Breakdown of how this adjustment affects your payout balance.
	PayoutTotals *PayoutTotalsAdjustment `json:"payout_totals,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Contacts: List of contacts related to this business, typically used for sending invoices.
type Contacts struct {
	// Name: Full name of this contact.
	Name string `json:"name,omitempty"`
	// Email: Email address for this contact.
	Email string `json:"email,omitempty"`
}

// Business: Business for this transaction. Returned when the `include` parameter is used with the `business` value and the transaction has a `business_id`.
type Business struct {
	// ID: Unique Paddle ID for this business entity, prefixed with `biz_`.
	ID string `json:"id,omitempty"`
	// CustomerID: Paddle ID for the customer related to this business, prefixed with `cus_`.
	CustomerID string `json:"customer_id,omitempty"`
	// Name: Name of this business.
	Name string `json:"name,omitempty"`
	// CompanyNumber: Company number for this business.
	CompanyNumber *string `json:"company_number,omitempty"`
	// TaxIdentifier: Tax or VAT Number for this business.
	TaxIdentifier *string `json:"tax_identifier,omitempty"`
	// Status: Whether this entity can be used in Paddle.
	Status string `json:"status,omitempty"`
	// Contacts: List of contacts related to this business, typically used for sending invoices.
	Contacts []Contacts `json:"contacts,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
	UpdatedAt string `json:"updated_at,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	// ImportMeta: Import information for this entity. `null` if this entity is not imported.
	ImportMeta *ImportMeta `json:"import_meta,omitempty"`
}

// Customer: Customer for this transaction. Returned when the `include` parameter is used with the `customer` value and the transaction has a `customer_id`.
type Customer struct {
	// ID: Unique Paddle ID for this customer entity, prefixed with `ctm_`.
	ID string `json:"id,omitempty"`
	// Name: Full name of this customer. Required when creating transactions where `collection_mode` is `manual` (invoices).
	Name *string `json:"name,omitempty"`
	// Email: Email address for this customer.
	Email string `json:"email,omitempty"`
	/*
	   MarketingConsent: Whether this customer opted into marketing from you.
	   Set to `true` by Paddle where a customer checks the marketing consent box when using Paddle Checkout; `false` otherwise.
	*/
	MarketingConsent bool `json:"marketing_consent,omitempty"`
	// Status: Whether this entity can be used in Paddle.
	Status string `json:"status,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	// Locale: Valid IETF BCP 47 short form locale tag. If omitted, defaults to `en`.
	Locale string `json:"locale,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
	UpdatedAt string `json:"updated_at,omitempty"`
	// ImportMeta: Import information for this entity. `null` if this entity is not imported.
	ImportMeta *ImportMeta `json:"import_meta,omitempty"`
}

// DiscountStatus: Whether this entity can be used in Paddle. `expired` and `used` are set automatically by Paddle..
type DiscountStatus string

const (
	DiscountStatusActive   = "active"
	DiscountStatusArchived = "archived"
	DiscountStatusExpired  = "expired"
	DiscountStatusUsed     = "used"
)

// DiscountType: Type of discount..
type DiscountType string

const (
	DiscountTypeFlat        = "flat"
	DiscountTypeFlatPerSeat = "flat_per_seat"
	DiscountTypePercentage  = "percentage"
)

// Discount: Discount for this transaction. Returned when the `include` parameter is used with the `discount` value and the transaction has a `discount_id`.
type Discount struct {
	// ID: Unique Paddle ID for this discount, prefixed with `dsc_`.
	ID string `json:"id,omitempty"`
	// Status: Whether this entity can be used in Paddle. `expired` and `used` are set automatically by Paddle.
	Status string `json:"status,omitempty"`
	// Description: Short description for this discount for your reference. Not shown to customers.
	Description string `json:"description,omitempty"`
	// EnabledForCheckout: Whether this discount can be applied by a customer at checkout.
	EnabledForCheckout bool `json:"enabled_for_checkout,omitempty"`
	// Code: Unique code that customers can use to apply this discount at checkout. Use letters and numbers only, up to 16 characters. Paddle generates a random 10-character code if a code is not provided and `enabled_for_checkout` is `true`.
	Code *string `json:"code,omitempty"`
	// Type: Type of discount.
	Type string `json:"type,omitempty"`
	// Amount: Amount to discount by. For `percentage` discounts, must be an amount between `0.01` and `100`. For `flat` and `flat_per_seat` discounts, amount in the lowest denomination for a currency.
	Amount string `json:"amount,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code. Required where discount type is `flat` or `flat_per_seat`.
	CurrencyCode *string `json:"currency_code,omitempty"`
	// Recur: Whether this discount applies for multiple billing periods.
	Recur bool `json:"recur,omitempty"`
	// MaximumRecurringIntervals: Amount of subscription billing periods that this discount recurs for. Requires `recur`. `null` if this discount recurs forever.
	MaximumRecurringIntervals *int `json:"maximum_recurring_intervals,omitempty"`
	// UsageLimit: Maximum amount of times this discount can be used. This is an overall limit, rather than a per-customer limit. `null` if this discount can be used an unlimited amount of times.
	UsageLimit *int `json:"usage_limit,omitempty"`
	// RestrictTo: Product or price IDs that this discount is for. When including a product ID, all prices for that product can be discounted. `null` if this discount applies to all products and prices.
	RestrictTo []string `json:"restrict_to,omitempty"`
	// ExpiresAt: RFC 3339 datetime string of when this discount expires. Discount can no longer be applied after this date has elapsed. `null` if this discount can be applied forever.
	ExpiresAt *string `json:"expires_at,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	// TimesUsed: How many times this discount has been redeemed. Automatically incremented by Paddle when an order completes.
	TimesUsed int `json:"times_used,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
	UpdatedAt string `json:"updated_at,omitempty"`
	// ImportMeta: Import information for this entity. `null` if this entity is not imported.
	ImportMeta *ImportMeta `json:"import_meta,omitempty"`
}

// TransactionSubscriptionPriceCreateWithProductID: Price object for a non-catalog item to charge for. Include a `product_id` to relate this non-catalog price to an existing catalog price.
type TransactionSubscriptionPriceCreateWithProductID struct {
	// Description: Internal description for this price, not shown to customers. Typically notes for your team.
	Description string `json:"description,omitempty"`
	// Name: Name of this price, shown to customers at checkout and on invoices. Typically describes how often the related product bills.
	Name *string `json:"name,omitempty"`
	// BillingCycle: How often this price should be charged. `null` if price is non-recurring (one-time).
	BillingCycle *Duration `json:"billing_cycle,omitempty"`
	// TrialPeriod: Trial period for the product related to this price. The billing cycle begins once the trial period is over. `null` for no trial period. Requires `billing_cycle`.
	TrialPeriod *Duration `json:"trial_period,omitempty"`
	// TaxMode: How tax is calculated for this price.
	TaxMode string `json:"tax_mode,omitempty"`
	// UnitPrice: Base price. This price applies to all customers, except for customers located in countries where you have `unit_price_overrides`.
	UnitPrice Money `json:"unit_price,omitempty"`
	// UnitPriceOverrides: List of unit price overrides. Use to override the base price with a custom price and currency for a country or group of countries.
	UnitPriceOverrides []UnitPriceOverride `json:"unit_price_overrides,omitempty"`
	// Quantity: Limits on how many times the related product can be purchased at this price. Useful for discount campaigns. If omitted, defaults to 1-100.
	Quantity PriceQuantity `json:"quantity,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	// ProductID: Paddle ID for the product that this price is for, prefixed with `pro_`.
	ProductID string `json:"product_id,omitempty"`
}

// TransactionSubscriptionProductCreate: Product object for a non-catalog item to charge for.
type TransactionSubscriptionProductCreate struct {
	// Name: Name of this product.
	Name string `json:"name,omitempty"`
	// Description: Short description for this product.
	Description *string `json:"description,omitempty"`
	// TaxCategory: Tax category for this product. Used for charging the correct rate of tax. Selected tax category must be enabled on your Paddle account.
	TaxCategory string `json:"tax_category,omitempty"`
	// ImageURL: Image for this product. Included in the checkout and on some customer documents.
	ImageURL *string `json:"image_url,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
}

// TransactionSubscriptionPriceCreateWithProduct: Price object for a non-catalog item to charge for. Include a `product` object to create a non-catalog product for this non-catalog price.
type TransactionSubscriptionPriceCreateWithProduct struct {
	// Description: Internal description for this price, not shown to customers. Typically notes for your team.
	Description string `json:"description,omitempty"`
	// Name: Name of this price, shown to customers at checkout and on invoices. Typically describes how often the related product bills.
	Name *string `json:"name,omitempty"`
	// BillingCycle: How often this price should be charged. `null` if price is non-recurring (one-time).
	BillingCycle *Duration `json:"billing_cycle,omitempty"`
	// TrialPeriod: Trial period for the product related to this price. The billing cycle begins once the trial period is over. `null` for no trial period. Requires `billing_cycle`.
	TrialPeriod *Duration `json:"trial_period,omitempty"`
	// TaxMode: How tax is calculated for this price.
	TaxMode string `json:"tax_mode,omitempty"`
	// UnitPrice: Base price. This price applies to all customers, except for customers located in countries where you have `unit_price_overrides`.
	UnitPrice Money `json:"unit_price,omitempty"`
	// UnitPriceOverrides: List of unit price overrides. Use to override the base price with a custom price and currency for a country or group of countries.
	UnitPriceOverrides []UnitPriceOverride `json:"unit_price_overrides,omitempty"`
	// Quantity: Limits on how many times the related product can be purchased at this price. Useful for discount campaigns. If omitted, defaults to 1-100.
	Quantity PriceQuantity `json:"quantity,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	// Product: Product object for a non-catalog item to charge for.
	Product TransactionSubscriptionProductCreate `json:"product,omitempty"`
}

// AddressPreview: Address for this preview. Send one of `address_id`, `customer_ip_address`, or the `address` object when previewing.
type AddressPreview struct {
	// PostalCode: ZIP or postal code of this address. Include for more accurate tax calculations.
	PostalCode *string `json:"postal_code,omitempty"`
	// CountryCode: Supported two-letter ISO 3166-1 alpha-2 country code for this address.
	CountryCode string `json:"country_code,omitempty"`
}

// BillingDetailsUpdate: Details for invoicing. Required if `collection_mode` is `manual`.
type BillingDetailsUpdate struct {
	// EnableCheckout: Whether the related transaction may be paid using a Paddle Checkout.
	EnableCheckout bool `json:"enable_checkout,omitempty"`
	// PurchaseOrderNumber: Customer purchase order number. Appears on invoice documents.
	PurchaseOrderNumber string `json:"purchase_order_number,omitempty"`
	// AdditionalInformation: Notes or other information to include on this invoice. Appears on invoice documents.
	AdditionalInformation *string `json:"additional_information,omitempty"`
	// PaymentTerms: How long a customer has to pay this invoice once issued.
	PaymentTerms Duration `json:"payment_terms,omitempty"`
}

// EventType: Represents an event type.
type EventType struct {
	// Name: Type of event sent by Paddle, in the format `entity.event_type`.
	Name string `json:"name,omitempty"`
	// Description: Short description of this event type.
	Description string `json:"description,omitempty"`
	// Group: Group for this event type. Typically the entity that this event relates to.
	Group string `json:"group,omitempty"`
	// AvailableVersions: List of API versions that this event type supports.
	AvailableVersions []int `json:"available_versions,omitempty"`
}

// SubscriptionStatus: Status of this subscription. Set automatically by Paddle. Use the pause subscription or cancel subscription operations to change..
type SubscriptionStatus string

const (
	SubscriptionStatusActive   = "active"
	SubscriptionStatusCanceled = "canceled"
	SubscriptionStatusPastDue  = "past_due"
	SubscriptionStatusPaused   = "paused"
	SubscriptionStatusTrialing = "trialing"
)

// SubscriptionDiscount: Details of the discount applied to this subscription.
type SubscriptionDiscount struct {
	// ID: Unique Paddle ID for this discount, prefixed with `dsc_`.
	ID string `json:"id,omitempty"`
	// StartsAt: RFC 3339 datetime string of when this discount was first applied.
	StartsAt string `json:"starts_at,omitempty"`
	// EndsAt: RFC 3339 datetime string of when this discount no longer applies. Where a discount has `maximum_recurring_intervals`, this is the date of the last billing period where this discount applies. `null` where a discount recurs forever.
	EndsAt *string `json:"ends_at,omitempty"`
}

// ScheduledChangeAction: Kind of change that's scheduled to be applied to this subscription..
type ScheduledChangeAction string

const (
	ScheduledChangeActionCancel = "cancel"
	ScheduledChangeActionPause  = "pause"
	ScheduledChangeActionResume = "resume"
)

// SubscriptionScheduledChange: Change that's scheduled to be applied to a subscription. Use the pause subscription, cancel subscription, and resume subscription operations to create scheduled changes. `null` if no scheduled changes.
type SubscriptionScheduledChange struct {
	// Action: Kind of change that's scheduled to be applied to this subscription.
	Action string `json:"action,omitempty"`
	// EffectiveAt: RFC 3339 datetime string of when this scheduled change takes effect.
	EffectiveAt string `json:"effective_at,omitempty"`
	// ResumeAt: RFC 3339 datetime string of when a paused subscription should resume. Only used for `pause` scheduled changes.
	ResumeAt *string `json:"resume_at,omitempty"`
}

// SubscriptionItemStatus: Status of this subscription item. Set automatically by Paddle..
type SubscriptionItemStatus string

const (
	SubscriptionItemStatusActive   = "active"
	SubscriptionItemStatusInactive = "inactive"
	SubscriptionItemStatusTrialing = "trialing"
)

// SubscriptionItem: Represents a subscription item.
type SubscriptionItem struct {
	// Status: Status of this subscription item. Set automatically by Paddle.
	Status string `json:"status,omitempty"`
	// Quantity: Quantity of this item on the subscription.
	Quantity int `json:"quantity,omitempty"`
	// Recurring: Whether this is a recurring item. `false` if one-time.
	Recurring bool `json:"recurring,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this item was added to this subscription.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this item was last updated on this subscription.
	UpdatedAt string `json:"updated_at,omitempty"`
	// PreviouslyBilledAt: RFC 3339 datetime string of when this item was last billed.
	PreviouslyBilledAt *string `json:"previously_billed_at,omitempty"`
	// NextBilledAt: RFC 3339 datetime string of when this item is next scheduled to be billed.
	NextBilledAt *string `json:"next_billed_at,omitempty"`
	// TrialDates: Trial dates for this item.
	TrialDates *TimePeriod `json:"trial_dates,omitempty"`
	// Price: Related price entity for this item. This reflects the price entity at the time it was added to the subscription.
	Price Price `json:"price,omitempty"`
}

/*
ReportStatus: Status of this report. Set automatically by Paddle.

Reports are created as `pending` initially, then move to `ready` when they're available to download..
*/
type ReportStatus string

const (
	ReportStatusPending = "pending"
	ReportStatusReady   = "ready"
	ReportStatusFailed  = "failed"
	ReportStatusExpired = "expired"
)

// ReportTypeTransactions: Type of report..
type ReportTypeTransactions string

const (
	ReportTypeTransactionsAdjustments          = "adjustments"
	ReportTypeTransactionsAdjustmentLineItems  = "adjustment_line_items"
	ReportTypeTransactionsTransactions         = "transactions"
	ReportTypeTransactionsTransactionLineItems = "transaction_line_items"
	ReportTypeTransactionsProductsPrices       = "products_prices"
	ReportTypeTransactionsDiscounts            = "discounts"
)

// Name: Field name to filter by..
type SharedName string

const (
	SharedNameAction           = "action"
	SharedNameCurrencyCode     = "currency_code"
	SharedNameStatus           = "status"
	SharedNameUpdatedAt        = "updated_at"
	SharedNameCollectionMode   = "collection_mode"
	SharedNameOrigin           = "origin"
	SharedNameProductStatus    = "product_status"
	SharedNamePriceStatus      = "price_status"
	SharedNameProductType      = "product_type"
	SharedNamePriceType        = "price_type"
	SharedNameProductUpdatedAt = "product_updated_at"
	SharedNamePriceUpdatedAt   = "price_updated_at"
	SharedNameType             = "type"
)

// Operator: Operator to use when filtering. Valid when filtering by `updated_at`, `null` otherwise..
type SharedOperator *string

const (
	SharedOperatorLt  = "lt"
	SharedOperatorGte = "gte"
)

// ReportFilters: List of filters applied to this report.
type ReportFilters struct {
	// Name: Field name to filter by.
	Name string `json:"name,omitempty"`
	// Operator: Operator to use when filtering. Valid when filtering by `updated_at`, `null` otherwise.
	Operator *string `json:"operator,omitempty"`
	// Value: Value to filter by. Check the allowed values descriptions for the `name` field to see valid values for a field.
	Value string `json:"value,omitempty"`
}

// Type: Type of report to create..
type Type string

const TypeProductsPrices = "products_prices"

type CustomData map[string]any
