// Code generated by the Paddle SDK Generator; DO NOT EDIT.

package paddle

import "context"

// ClientTokenStatus: Status of this client-side token..
type ClientTokenStatus string

const (
	ClientTokenStatusActive  ClientTokenStatus = "active"
	ClientTokenStatusRevoked ClientTokenStatus = "revoked"
)

// ClientSideToken: Represents a client-side token entity.
type ClientSideToken struct {
	// ID: Unique Paddle ID for this client-side token entity, prefixed with `ctkn_`. Not used for Paddle.js authentication; use `token` for authentication.
	ID string `json:"id,omitempty"`
	// Token: A client-side token, prefixed with `test` or `live` depending on the environment of your account.  Pass as the `token` parameter when initializing Paddle.js to authenticate.
	Token string `json:"token,omitempty"`
	// Name: Short name of this client-side token. Typically unique and human-identifiable.
	Name string `json:"name,omitempty"`
	// Description: Short description of this client-side token. Typically gives details about what the token is used for and where it's used.
	Description *string `json:"description,omitempty"`
	// Status: Status of this client-side token.
	Status ClientTokenStatus `json:"status,omitempty"`
	// RevokedAt: RFC 3339 datetime string of when this client-side token was revoked. `null` if not revoked.
	RevokedAt *string `json:"revoked_at,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
	UpdatedAt string `json:"updated_at,omitempty"`
}

// ClientTokensClient is a client for the Client tokens resource.
type ClientTokensClient struct {
	doer Doer
}

// ListClientTokensRequest is given as an input to ListClientTokens.
type ListClientTokensRequest struct {
	// After is a query parameter.
	// Return entities after the specified Paddle ID when working with paginated endpoints. Used in the `meta.pagination.next` URL in responses for list operations.
	After *string `in:"query=after;omitempty" json:"-"`
	// OrderBy is a query parameter.
	/*
	   Order returned entities by the specified field and direction (`[ASC]` or `[DESC]`). For example, `?order_by=id[ASC]`.

	   Valid fields for ordering: `id`.
	*/
	OrderBy *string `in:"query=order_by;omitempty" json:"-"`
	// PerPage is a query parameter.
	/*
	   Set how many entities are returned per page. Paddle returns the maximum number of results if a number greater than the maximum is requested. Check `meta.pagination.per_page` in the response to see how many were returned.

	   Default: `50`; Maximum: `200`.
	*/
	PerPage *int `in:"query=per_page;omitempty" json:"-"`
	// Status is a query parameter.
	// Return entities that match the specified status. Use a comma-separated list to specify multiple status values.
	Status []string `in:"query=status;omitempty" json:"-"`
}

// ListClientTokens performs the GET operation on a Client tokens resource.
func (c *ClientTokensClient) ListClientTokens(ctx context.Context, req *ListClientTokensRequest) (res *Collection[*ClientSideToken], err error) {
	if err := c.doer.Do(ctx, "GET", "/client-tokens", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// CreateClientTokenRequest is given as an input to CreateClientToken.
type CreateClientTokenRequest struct {
	// Name: Short name of this client-side token. Typically unique and human-identifiable.
	Name string `json:"name,omitempty"`
	// Description: Short description of this client-side token. Typically gives details about what the token is used for and where it's used.
	Description *string `json:"description,omitempty"`
}

// CreateClientToken performs the POST operation on a Client tokens resource.
func (c *ClientTokensClient) CreateClientToken(ctx context.Context, req *CreateClientTokenRequest) (res *ClientSideToken, err error) {
	if err := c.doer.Do(ctx, "POST", "/client-tokens", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// GetClientTokenRequest is given as an input to GetClientToken.
type GetClientTokenRequest struct {
	// URL path parameters.
	ClientTokenID string `in:"path=client_token_id" json:"-"`
}

// GetClientToken performs the GET operation on a Client tokens resource.
func (c *ClientTokensClient) GetClientToken(ctx context.Context, req *GetClientTokenRequest) (res *ClientSideToken, err error) {
	if err := c.doer.Do(ctx, "GET", "/client-tokens/{client_token_id}", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// UpdateClientTokenRequest is given as an input to UpdateClientToken.
type UpdateClientTokenRequest struct {
	// URL path parameters.
	ClientTokenID string `in:"path=client_token_id" json:"-"`

	// Status: Status of this client-side token.
	Status *PatchField[ClientTokenStatus] `json:"status,omitempty"`
}

// UpdateClientToken performs the PATCH operation on a Client tokens resource.
func (c *ClientTokensClient) UpdateClientToken(ctx context.Context, req *UpdateClientTokenRequest) (res *ClientSideToken, err error) {
	if err := c.doer.Do(ctx, "PATCH", "/client-tokens/{client_token_id}", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}
