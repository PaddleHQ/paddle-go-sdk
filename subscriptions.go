// Code generated by the Paddle SDK Generator; DO NOT EDIT.

package paddle

import (
	"context"
	"encoding/json"

	paddleerr "github.com/PaddleHQ/paddle-go-sdk/pkg/paddleerr"
)

// ErrSubscriptionLockedRenewal represents a `subscription_locked_renewal` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_locked_renewal for more information.
var ErrSubscriptionLockedRenewal = &paddleerr.Error{
	Code: "subscription_locked_renewal",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionLockedProcessing represents a `subscription_locked_processing` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_locked_processing for more information.
var ErrSubscriptionLockedProcessing = &paddleerr.Error{
	Code: "subscription_locked_processing",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionLockedPendingChanges represents a `subscription_locked_pending_changes` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_locked_pending_changes for more information.
var ErrSubscriptionLockedPendingChanges = &paddleerr.Error{
	Code: "subscription_locked_pending_changes",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionUpdateWhenCanceled represents a `subscription_update_when_canceled` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_update_when_canceled for more information.
var ErrSubscriptionUpdateWhenCanceled = &paddleerr.Error{
	Code: "subscription_update_when_canceled",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionUpdateWhenTrialing represents a `subscription_update_when_trialing` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_update_when_trialing for more information.
var ErrSubscriptionUpdateWhenTrialing = &paddleerr.Error{
	Code: "subscription_update_when_trialing",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionCannotBePaused represents a `subscription_cannot_be_paused` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_cannot_be_paused for more information.
var ErrSubscriptionCannotBePaused = &paddleerr.Error{
	Code: "subscription_cannot_be_paused",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionIsCanceledActionInvalid represents a `subscription_is_canceled_action_invalid` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_is_canceled_action_invalid for more information.
var ErrSubscriptionIsCanceledActionInvalid = &paddleerr.Error{
	Code: "subscription_is_canceled_action_invalid",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionIsInactiveActionInvalid represents a `subscription_is_inactive_action_invalid` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_is_inactive_action_invalid for more information.
var ErrSubscriptionIsInactiveActionInvalid = &paddleerr.Error{
	Code: "subscription_is_inactive_action_invalid",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionUpdateWhenPastDue represents a `subscription_update_when_past_due` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_update_when_past_due for more information.
var ErrSubscriptionUpdateWhenPastDue = &paddleerr.Error{
	Code: "subscription_update_when_past_due",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionNotAutomaticCollection represents a `subscription_not_automatic_collection` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_not_automatic_collection for more information.
var ErrSubscriptionNotAutomaticCollection = &paddleerr.Error{
	Code: "subscription_not_automatic_collection",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionNotActive represents a `subscription_not_active` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_not_active for more information.
var ErrSubscriptionNotActive = &paddleerr.Error{
	Code: "subscription_not_active",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionNextBilledAtTooSoon represents a `subscription_next_billed_at_too_soon` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_next_billed_at_too_soon for more information.
var ErrSubscriptionNextBilledAtTooSoon = &paddleerr.Error{
	Code: "subscription_next_billed_at_too_soon",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionOutstandingTransaction represents a `subscription_outstanding_transaction` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_outstanding_transaction for more information.
var ErrSubscriptionOutstandingTransaction = &paddleerr.Error{
	Code: "subscription_outstanding_transaction",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionMustBePaused represents a `subscription_must_be_paused` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_must_be_paused for more information.
var ErrSubscriptionMustBePaused = &paddleerr.Error{
	Code: "subscription_must_be_paused",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionAllItemsRemoved represents a `subscription_all_items_removed` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_all_items_removed for more information.
var ErrSubscriptionAllItemsRemoved = &paddleerr.Error{
	Code: "subscription_all_items_removed",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionItemsUpdateMissingProrationBillingMode represents a `subscription_items_update_missing_proration_billing_mode` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_items_update_missing_proration_billing_mode for more information.
var ErrSubscriptionItemsUpdateMissingProrationBillingMode = &paddleerr.Error{
	Code: "subscription_items_update_missing_proration_billing_mode",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionDiscountNotValidForItems represents a `subscription_discount_not_valid_for_items` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_discount_not_valid_for_items for more information.
var ErrSubscriptionDiscountNotValidForItems = &paddleerr.Error{
	Code: "subscription_discount_not_valid_for_items",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionOneOffDiscountNotValid represents a `subscription_one_off_discount_not_valid` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_one_off_discount_not_valid for more information.
var ErrSubscriptionOneOffDiscountNotValid = &paddleerr.Error{
	Code: "subscription_one_off_discount_not_valid",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionDuplicatePriceIDs represents a `subscription_duplicate_price_ids` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_duplicate_price_ids for more information.
var ErrSubscriptionDuplicatePriceIDs = &paddleerr.Error{
	Code: "subscription_duplicate_price_ids",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionScheduledChangeInvalidUpdate represents a `subscription_scheduled_change_invalid_update` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_scheduled_change_invalid_update for more information.
var ErrSubscriptionScheduledChangeInvalidUpdate = &paddleerr.Error{
	Code: "subscription_scheduled_change_invalid_update",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionOnlyUpdateItemsOnPausedSubscription represents a `subscription_only_update_items_on_paused_subscription` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_only_update_items_on_paused_subscription for more information.
var ErrSubscriptionOnlyUpdateItemsOnPausedSubscription = &paddleerr.Error{
	Code: "subscription_only_update_items_on_paused_subscription",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionIncorrectProrationOnPausedSubscription represents a `subscription_incorrect_proration_on_paused_subscription` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_incorrect_proration_on_paused_subscription for more information.
var ErrSubscriptionIncorrectProrationOnPausedSubscription = &paddleerr.Error{
	Code: "subscription_incorrect_proration_on_paused_subscription",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionPaymentDeclined represents a `subscription_payment_declined` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_payment_declined for more information.
var ErrSubscriptionPaymentDeclined = &paddleerr.Error{
	Code: "subscription_payment_declined",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionBillingDetailsRequired represents a `subscription_billing_details_required` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_billing_details_required for more information.
var ErrSubscriptionBillingDetailsRequired = &paddleerr.Error{
	Code: "subscription_billing_details_required",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionNewItemsNotValid represents a `subscription_new_items_not_valid` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_new_items_not_valid for more information.
var ErrSubscriptionNewItemsNotValid = &paddleerr.Error{
	Code: "subscription_new_items_not_valid",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionQuantityMissingForNewItems represents a `subscription_quantity_missing_for_new_items` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_quantity_missing_for_new_items for more information.
var ErrSubscriptionQuantityMissingForNewItems = &paddleerr.Error{
	Code: "subscription_quantity_missing_for_new_items",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionChargeDuplicatePriceIDs represents a `subscription_charge_duplicate_price_ids` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_charge_duplicate_price_ids for more information.
var ErrSubscriptionChargeDuplicatePriceIDs = &paddleerr.Error{
	Code: "subscription_charge_duplicate_price_ids",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionNoRecurringItemsRemain represents a `subscription_no_recurring_items_remain` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_no_recurring_items_remain for more information.
var ErrSubscriptionNoRecurringItemsRemain = &paddleerr.Error{
	Code: "subscription_no_recurring_items_remain",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionQuantityNotValid represents a `subscription_quantity_not_valid` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_quantity_not_valid for more information.
var ErrSubscriptionQuantityNotValid = &paddleerr.Error{
	Code: "subscription_quantity_not_valid",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionCurrencyCodeNotValidForManual represents a `subscription_currency_code_not_valid_for_manual` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_currency_code_not_valid_for_manual for more information.
var ErrSubscriptionCurrencyCodeNotValidForManual = &paddleerr.Error{
	Code: "subscription_currency_code_not_valid_for_manual",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionCurrencyCodeIncompatibleWithPaymentMethodProvider represents a `subscription_currency_code_incompatible_with_payment_method_provider` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_currency_code_incompatible_with_payment_method_provider for more information.
var ErrSubscriptionCurrencyCodeIncompatibleWithPaymentMethodProvider = &paddleerr.Error{
	Code: "subscription_currency_code_incompatible_with_payment_method_provider",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionCustomerNotSuitableForCollectionMode represents a `subscription_customer_not_suitable_for_collection_mode` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_customer_not_suitable_for_collection_mode for more information.
var ErrSubscriptionCustomerNotSuitableForCollectionMode = &paddleerr.Error{
	Code: "subscription_customer_not_suitable_for_collection_mode",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionAddressNotSuitableForCollectionMode represents a `subscription_address_not_suitable_for_collection_mode` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_address_not_suitable_for_collection_mode for more information.
var ErrSubscriptionAddressNotSuitableForCollectionMode = &paddleerr.Error{
	Code: "subscription_address_not_suitable_for_collection_mode",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionInvalidDiscountCurrency represents a `subscription_invalid_discount_currency` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_invalid_discount_currency for more information.
var ErrSubscriptionInvalidDiscountCurrency = &paddleerr.Error{
	Code: "subscription_invalid_discount_currency",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionTrialingItemsUpdateInvalidOptions represents a `subscription_trialing_items_update_invalid_options` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_trialing_items_update_invalid_options for more information.
var ErrSubscriptionTrialingItemsUpdateInvalidOptions = &paddleerr.Error{
	Code: "subscription_trialing_items_update_invalid_options",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionCannotActivate represents a `subscription_cannot_activate` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_cannot_activate for more information.
var ErrSubscriptionCannotActivate = &paddleerr.Error{
	Code: "subscription_cannot_activate",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionOutstandingPendingRefund represents a `subscription_outstanding_pending_refund` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_outstanding_pending_refund for more information.
var ErrSubscriptionOutstandingPendingRefund = &paddleerr.Error{
	Code: "subscription_outstanding_pending_refund",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionTrialingDiscountUpdateInvalidOptions represents a `subscription_trialing_discount_update_invalid_options` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_trialing_discount_update_invalid_options for more information.
var ErrSubscriptionTrialingDiscountUpdateInvalidOptions = &paddleerr.Error{
	Code: "subscription_trialing_discount_update_invalid_options",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionUpdateTransactionBalanceLessThanChargeLimit represents a `subscription_update_transaction_balance_less_than_charge_limit` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_update_transaction_balance_less_than_charge_limit for more information.
var ErrSubscriptionUpdateTransactionBalanceLessThanChargeLimit = &paddleerr.Error{
	Code: "subscription_update_transaction_balance_less_than_charge_limit",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionCustomerEmailDomainNotAllowed represents a `subscription_customer_email_domain_not_allowed` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_customer_email_domain_not_allowed for more information.
var ErrSubscriptionCustomerEmailDomainNotAllowed = &paddleerr.Error{
	Code: "subscription_customer_email_domain_not_allowed",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionPaymentRetryAttemptsExceeded represents a `subscription_payment_retry_attempts_exceeded` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_payment_retry_attempts_exceeded for more information.
var ErrSubscriptionPaymentRetryAttemptsExceeded = &paddleerr.Error{
	Code: "subscription_payment_retry_attempts_exceeded",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionManualRetryPaymentNotAllowed represents a `subscription_manual_retry_payment_not_allowed` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_manual_retry_payment_not_allowed for more information.
var ErrSubscriptionManualRetryPaymentNotAllowed = &paddleerr.Error{
	Code: "subscription_manual_retry_payment_not_allowed",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionCurrencyUpdateNotAllowed represents a `subscription_currency_update_not_allowed` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_currency_update_not_allowed for more information.
var ErrSubscriptionCurrencyUpdateNotAllowed = &paddleerr.Error{
	Code: "subscription_currency_update_not_allowed",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionUpdateDifferentCurrencyCredits represents a `subscription_update_different_currency_credits` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_update_different_currency_credits for more information.
var ErrSubscriptionUpdateDifferentCurrencyCredits = &paddleerr.Error{
	Code: "subscription_update_different_currency_credits",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionCurrencyUpdateAndActionsCreatingCreditsNotAllowed represents a `subscription_currency_update_and_actions_creating_credits_not_allowed` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_currency_update_and_actions_creating_credits_not_allowed for more information.
var ErrSubscriptionCurrencyUpdateAndActionsCreatingCreditsNotAllowed = &paddleerr.Error{
	Code: "subscription_currency_update_and_actions_creating_credits_not_allowed",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionCreditCreationAgainstUncompletedTransactionNotAllowed represents a `subscription_credit_creation_against_uncompleted_transaction_not_allowed` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_credit_creation_against_uncompleted_transaction_not_allowed for more information.
var ErrSubscriptionCreditCreationAgainstUncompletedTransactionNotAllowed = &paddleerr.Error{
	Code: "subscription_credit_creation_against_uncompleted_transaction_not_allowed",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionUpdateCausingCustomerMismatchNotAllowed represents a `subscription_update_causing_customer_mismatch_not_allowed` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_update_causing_customer_mismatch_not_allowed for more information.
var ErrSubscriptionUpdateCausingCustomerMismatchNotAllowed = &paddleerr.Error{
	Code: "subscription_update_causing_customer_mismatch_not_allowed",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionCreditCreationAgainstProcessingTransaction represents a `subscription_credit_creation_against_processing_transaction` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_credit_creation_against_processing_transaction for more information.
var ErrSubscriptionCreditCreationAgainstProcessingTransaction = &paddleerr.Error{
	Code: "subscription_credit_creation_against_processing_transaction",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionProductTaxCategoryNotApproved represents a `subscription_product_tax_category_not_approved` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_product_tax_category_not_approved for more information.
var ErrSubscriptionProductTaxCategoryNotApproved = &paddleerr.Error{
	Code: "subscription_product_tax_category_not_approved",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrSubscriptionManualCollectionModeActivationNotAllowed represents a `subscription_manual_collection_mode_activation_not_allowed` error.
// See https://developer.paddle.com/errors/subscriptions/subscription_manual_collection_mode_activation_not_allowed for more information.
var ErrSubscriptionManualCollectionModeActivationNotAllowed = &paddleerr.Error{
	Code: "subscription_manual_collection_mode_activation_not_allowed",
	Type: paddleerr.ErrorTypeRequestError,
}

// SubscriptionStatus: Status of this subscription. Set automatically by Paddle. Use the pause subscription or cancel subscription operations to change..
type SubscriptionStatus string

const (
	SubscriptionStatusActive   = "active"
	SubscriptionStatusCanceled = "canceled"
	SubscriptionStatusPastDue  = "past_due"
	SubscriptionStatusPaused   = "paused"
	SubscriptionStatusTrialing = "trialing"
)

// SubscriptionDiscount: Details of the discount applied to this subscription.
type SubscriptionDiscount struct {
	// ID: Unique Paddle ID for this discount, prefixed with `dsc_`.
	ID string `json:"id,omitempty"`
	// StartsAt: RFC 3339 datetime string of when this discount was first applied.
	StartsAt string `json:"starts_at,omitempty"`
	// EndsAt: RFC 3339 datetime string of when this discount no longer applies. Where a discount has `maximum_recurring_intervals`, this is the date of the last billing period where this discount applies. `null` where a discount recurs forever.
	EndsAt *string `json:"ends_at,omitempty"`
}

// ScheduledChangeAction: Kind of change that's scheduled to be applied to this subscription..
type ScheduledChangeAction string

const (
	ScheduledChangeActionCancel = "cancel"
	ScheduledChangeActionPause  = "pause"
	ScheduledChangeActionResume = "resume"
)

// SubscriptionScheduledChange: Change that's scheduled to be applied to a subscription. Use the pause subscription, cancel subscription, and resume subscription operations to create scheduled changes. `null` if no scheduled changes.
type SubscriptionScheduledChange struct {
	// Action: Kind of change that's scheduled to be applied to this subscription.
	Action string `json:"action,omitempty"`
	// EffectiveAt: RFC 3339 datetime string of when this scheduled change takes effect.
	EffectiveAt string `json:"effective_at,omitempty"`
	// ResumeAt: RFC 3339 datetime string of when a paused subscription should resume. Only used for `pause` scheduled changes.
	ResumeAt *string `json:"resume_at,omitempty"`
}

// SubscriptionManagementUrLs: Public URLs that customers can use to make changes to this subscription. For security, the `token` appended to each link is temporary. You shouldn't store these links.
type SubscriptionManagementUrLs struct {
	// UpdatePaymentMethod: Public URL that lets customers update the payment method for this subscription. Creates or gets a transaction that can be used to update a payment method, then passes it to your default checkout page.
	UpdatePaymentMethod *string `json:"update_payment_method,omitempty"`
	// Cancel: Public URL that lets customers cancel this subscription. Takes customers to a Paddle page that lets them cancel their subscription.
	Cancel string `json:"cancel,omitempty"`
}

// SubscriptionItemStatus: Status of this subscription item. Set automatically by Paddle..
type SubscriptionItemStatus string

const (
	SubscriptionItemStatusActive   = "active"
	SubscriptionItemStatusInactive = "inactive"
	SubscriptionItemStatusTrialing = "trialing"
)

// SubscriptionItem: Represents a subscription item.
type SubscriptionItem struct {
	// Status: Status of this subscription item. Set automatically by Paddle.
	Status string `json:"status,omitempty"`
	// Quantity: Quantity of this item on the subscription.
	Quantity int `json:"quantity,omitempty"`
	// Recurring: Whether this is a recurring item. `false` if one-time.
	Recurring bool `json:"recurring,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this item was added to this subscription.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this item was last updated on this subscription.
	UpdatedAt string `json:"updated_at,omitempty"`
	// PreviouslyBilledAt: RFC 3339 datetime string of when this item was last billed.
	PreviouslyBilledAt *string `json:"previously_billed_at,omitempty"`
	// NextBilledAt: RFC 3339 datetime string of when this item is next scheduled to be billed.
	NextBilledAt *string `json:"next_billed_at,omitempty"`
	// TrialDates: Trial dates for this item.
	TrialDates *TimePeriod `json:"trial_dates,omitempty"`
	// Price: Related price entity for this item. This reflects the price entity at the time it was added to the subscription.
	Price Price `json:"price,omitempty"`
}

// SubscriptionsTaxRatesUsed: List of tax rates applied to this transaction preview.
type SubscriptionsTaxRatesUsed struct {
	// TaxRate: Rate used to calculate tax for this transaction preview.
	TaxRate string `json:"tax_rate,omitempty"`
	// Totals: Calculated totals for the tax applied to this transaction preview.
	Totals Totals `json:"totals,omitempty"`
}

// SubscriptionsTransactionLineItemPreview: Information about line items for this transaction preview. Different from transaction preview `items` as they include totals calculated by Paddle. Considered the source of truth for line item totals.
type SubscriptionsTransactionLineItemPreview struct {
	// PriceID: Paddle ID for the price related to this transaction line item, prefixed with `pri_`.
	PriceID string `json:"price_id,omitempty"`
	// Quantity: Quantity of this transaction line item.
	Quantity int `json:"quantity,omitempty"`
	// TaxRate: Rate used to calculate tax for this transaction line item.
	TaxRate string `json:"tax_rate,omitempty"`
	// UnitTotals: Breakdown of the charge for one unit in the lowest denomination of a currency (e.g. cents for USD).
	UnitTotals UnitTotals `json:"unit_totals,omitempty"`
	// Totals: Breakdown of a charge in the lowest denomination of a currency (e.g. cents for USD).
	Totals Totals `json:"totals,omitempty"`
	// Product: Related product entity for this transaction line item price.
	Product Product `json:"product,omitempty"`
	// Proration: How proration was calculated for this item.
	Proration Proration `json:"proration,omitempty"`
}

// SubscriptionTransactionDetailsPreview: Calculated totals for a transaction preview, including discounts, tax, and currency conversion. Considered the source of truth for totals on a transaction preview.
type SubscriptionTransactionDetailsPreview struct {
	// TaxRatesUsed: List of tax rates applied to this transaction preview.
	TaxRatesUsed []SubscriptionsTaxRatesUsed `json:"tax_rates_used,omitempty"`
	// Totals: Breakdown of the total for a transaction preview. `fee` and `earnings` always return `null` for transaction previews.
	Totals TransactionTotals `json:"totals,omitempty"`
	// LineItems: Information about line items for this transaction preview. Different from transaction preview `items` as they include totals calculated by Paddle. Considered the source of truth for line item totals.
	LineItems []SubscriptionsTransactionLineItemPreview `json:"line_items,omitempty"`
}

// SubscriptionsAdjustmentItem: List of transaction items that this adjustment is for.
type SubscriptionsAdjustmentItem struct {
	// ItemID: Paddle ID for the transaction item that this adjustment item relates to, prefixed with `txnitm_`.
	ItemID string `json:"item_id,omitempty"`
	/*
	   Type: Type of adjustment for this transaction item. `tax` and `proration` are automatically created by Paddle.
	   Include `amount` when creating a `partial` adjustment.
	*/
	Type string `json:"type,omitempty"`
	// Amount: Amount adjusted for this transaction item. Required when adjustment type is `partial`.
	Amount *string `json:"amount,omitempty"`
	/*
	   Proration: How proration was calculated for this adjustment item. Populated when an adjustment type is `proration`.
	   Set automatically by Paddle.
	*/
	Proration *Proration `json:"proration,omitempty"`
	// Totals: Breakdown of the total for an adjustment item.
	Totals AdjustmentItemTotals `json:"totals,omitempty"`
}

// AdjustmentPreview: Represents an adjustment entity when previewing adjustments.
type AdjustmentPreview struct {
	// TransactionID: Paddle ID for this transaction entity that this adjustment relates to, prefixed with `txn_`.
	TransactionID string `json:"transaction_id,omitempty"`
	// Items: List of transaction items that this adjustment is for.
	Items []SubscriptionsAdjustmentItem `json:"items,omitempty"`
	// Totals: Calculated totals for this adjustment.
	Totals AdjustmentTotals `json:"totals,omitempty"`
}

// NextTransaction: Preview of the next transaction for this subscription. May include prorated charges that are not yet billed and one-time charges. Returned when the `include` parameter is used with the `next_transaction` value. `null` if the subscription is scheduled to cancel or pause.
type NextTransaction struct {
	// BillingPeriod: Billing period for the next transaction.
	BillingPeriod TimePeriod `json:"billing_period,omitempty"`
	// Details: Calculated totals for a transaction preview, including discounts, tax, and currency conversion. Considered the source of truth for totals on a transaction preview.
	Details SubscriptionTransactionDetailsPreview `json:"details,omitempty"`
	// Adjustments: Represents an adjustment entity when previewing adjustments.
	Adjustments []AdjustmentPreview `json:"adjustments,omitempty"`
}

// Subscription: Represents a subscription entity with included entities.
type Subscription struct {
	// ID: Unique Paddle ID for this subscription entity, prefixed with `sub_`.
	ID string `json:"id,omitempty"`
	// Status: Status of this subscription. Set automatically by Paddle. Use the pause subscription or cancel subscription operations to change.
	Status string `json:"status,omitempty"`
	// CustomerID: Paddle ID of the customer that this subscription is for, prefixed with `ctm_`.
	CustomerID string `json:"customer_id,omitempty"`
	// AddressID: Paddle ID of the address that this subscription is for, prefixed with `add_`.
	AddressID string `json:"address_id,omitempty"`
	// BusinessID: Paddle ID of the business that this subscription is for, prefixed with `biz_`.
	BusinessID *string `json:"business_id,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code. Transactions for this subscription are created in this currency. Must be `USD`, `EUR`, or `GBP` if `collection_mode` is `manual`.
	CurrencyCode string `json:"currency_code,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
	UpdatedAt string `json:"updated_at,omitempty"`
	// StartedAt: RFC 3339 datetime string of when this subscription started. This may be different from `first_billed_at` if the subscription started in trial.
	StartedAt *string `json:"started_at,omitempty"`
	// FirstBilledAt: RFC 3339 datetime string of when this subscription was first billed. This may be different from `started_at` if the subscription started in trial.
	FirstBilledAt *string `json:"first_billed_at,omitempty"`
	// NextBilledAt: RFC 3339 datetime string of when this subscription is next scheduled to be billed.
	NextBilledAt *string `json:"next_billed_at,omitempty"`
	// PausedAt: RFC 3339 datetime string of when this subscription was paused. Set automatically by Paddle when the pause subscription operation is used. `null` if not paused.
	PausedAt *string `json:"paused_at,omitempty"`
	// CanceledAt: RFC 3339 datetime string of when this subscription was canceled. Set automatically by Paddle when the cancel subscription operation is used. `null` if not canceled.
	CanceledAt *string `json:"canceled_at,omitempty"`
	// Discount: Details of the discount applied to this subscription.
	Discount *SubscriptionDiscount `json:"discount,omitempty"`
	// CollectionMode: How payment is collected for transactions created for this subscription. `automatic` for checkout, `manual` for invoices.
	CollectionMode string `json:"collection_mode,omitempty"`
	// BillingDetails: Details for invoicing. Required if `collection_mode` is `manual`.
	BillingDetails *BillingDetails `json:"billing_details,omitempty"`
	// CurrentBillingPeriod: Current billing period for this subscription. Set automatically by Paddle based on the billing cycle. `null` for `paused` and `canceled` subscriptions.
	CurrentBillingPeriod *TimePeriod `json:"current_billing_period,omitempty"`
	// BillingCycle: How often this subscription renews. Set automatically by Paddle based on the prices on this subscription.
	BillingCycle Duration `json:"billing_cycle,omitempty"`
	// ScheduledChange: Change that's scheduled to be applied to a subscription. Use the pause subscription, cancel subscription, and resume subscription operations to create scheduled changes. `null` if no scheduled changes.
	ScheduledChange *SubscriptionScheduledChange `json:"scheduled_change,omitempty"`
	// ManagementURLs: Public URLs that customers can use to make changes to this subscription. For security, the `token` appended to each link is temporary. You shouldn't store these links.
	ManagementURLs SubscriptionManagementUrLs `json:"management_urls,omitempty"`
	// Items: Represents a subscription item.
	Items []SubscriptionItem `json:"items,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	// ImportMeta: Import information for this entity. `null` if this entity is not imported.
	ImportMeta *ImportMeta `json:"import_meta,omitempty"`
	// NextTransaction: Preview of the next transaction for this subscription. May include prorated charges that are not yet billed and one-time charges. Returned when the `include` parameter is used with the `next_transaction` value. `null` if the subscription is scheduled to cancel or pause.
	NextTransaction *NextTransaction `json:"next_transaction,omitempty"`
	// RecurringTransactionDetails: Preview of the recurring transaction for this subscription. This is what the customer can expect to be billed when there are no prorated or one-time charges. Returned when the `include` parameter is used with the `recurring_transaction_details` value.
	RecurringTransactionDetails SubscriptionTransactionDetailsPreview `json:"recurring_transaction_details,omitempty"`
}

// EffectiveFrom: When this discount should take effect from..
type EffectiveFrom string

const (
	EffectiveFromNextBillingPeriod = "next_billing_period"
	EffectiveFromImmediately       = "immediately"
)

// SubscriptionsDiscount: Details of the discount applied to this subscription. Include to add a discount to a subscription. `null` to remove a discount.
type SubscriptionsDiscount struct {
	// ID: Unique Paddle ID for this discount, prefixed with `dsc_`.
	ID string `json:"id,omitempty"`
	// EffectiveFrom: When this discount should take effect from.
	EffectiveFrom string `json:"effective_from,omitempty"`
}

// SubscriptionsCatalogItem: Add or update a catalog item to a subscription. In this case, the product and price that you're billing for exist in your product catalog in Paddle.
type SubscriptionsCatalogItem struct {
	// PriceID: Paddle ID for the price to add to this subscription, prefixed with `pri_`.
	PriceID string `json:"price_id,omitempty"`
	// Quantity: Quantity of this item to add to the subscription. If updating an existing item and not changing the quantity, you may omit `quantity`.
	Quantity int `json:"quantity,omitempty"`
}

/*
ProrationBillingMode: How Paddle should handle proration calculation for changes made to a subscription or its items. Required when making
changes that impact billing.

For automatically-collected subscriptions, responses may take longer than usual if a proration billing mode that
collects for payment immediately is used..
*/
type ProrationBillingMode string

const (
	ProrationBillingModeProratedImmediately       = "prorated_immediately"
	ProrationBillingModeProratedNextBillingPeriod = "prorated_next_billing_period"
	ProrationBillingModeFullImmediately           = "full_immediately"
	ProrationBillingModeFullNextBillingPeriod     = "full_next_billing_period"
	ProrationBillingModeDoNotBill                 = "do_not_bill"
)

// SubscriptionOnPaymentFailure: How Paddle should handle changes made to a subscription or its items if the payment fails during update. If omitted, defaults to `prevent_change`..
type SubscriptionOnPaymentFailure string

const (
	SubscriptionOnPaymentFailurePreventChange = "prevent_change"
	SubscriptionOnPaymentFailureApplyChange   = "apply_change"
)

type ResumeOnASpecificDate struct {
	/*
	   EffectiveFrom: When this scheduled change should take effect from. RFC 3339 datetime string of when the subscription should resume.

	   Valid where subscriptions are `active` with a scheduled change to pause, or where they have the status of `paused`.
	*/
	EffectiveFrom string `json:"effective_from,omitempty"`
}

type ResumeImmediately struct {
	/*
	   EffectiveFrom: When this subscription change should take effect from. You can pass `immediately` to resume immediately.

	   Valid where subscriptions have the status of `paused`.

	   Defaults to `immediately` if omitted.
	*/
	EffectiveFrom *string `json:"effective_from,omitempty"`
}

// Credit: Details of any credit adjustments. Paddle creates adjustments against existing transactions when prorating.
type Credit struct {
	// Amount: Total of any credit adjustments created for this update.
	Amount string `json:"amount,omitempty"`
	// CurrencyCode: Three-letter ISO 4217 currency code for adjustments.
	CurrencyCode string `json:"currency_code,omitempty"`
}

// Charge: Details of the transaction to be created for this update. Paddle creates a transaction to bill for new charges.
type Charge struct {
	// Amount: Total of the transaction to be created for this update.
	Amount string `json:"amount,omitempty"`
	// CurrencyCode: Three-letter ISO 4217 currency code for the transaction to be created.
	CurrencyCode string `json:"currency_code,omitempty"`
}

// ResultAction: Whether the subscription change results in a prorated credit or a charge..
type ResultAction string

const (
	ResultActionCredit = "credit"
	ResultActionCharge = "charge"
)

// Result: Details of the result of credits and charges. Where the total of any credit adjustments is greater than the total charge, the result is a prorated credit; otherwise, the result is a prorated charge.
type Result struct {
	// Action: Whether the subscription change results in a prorated credit or a charge.
	Action string `json:"action,omitempty"`
	// Amount: Amount representing the result of this update, either a charge or a credit.
	Amount string `json:"amount,omitempty"`
	// CurrencyCode: Three-letter ISO 4217 currency code for the transaction or adjustment.
	CurrencyCode string `json:"currency_code,omitempty"`
}

// PreviewSubscriptionUpdateSummary: Impact of this subscription change. Includes whether the change results in a charge or credit, and totals for prorated amounts.
type PreviewSubscriptionUpdateSummary struct {
	// Credit: Details of any credit adjustments. Paddle creates adjustments against existing transactions when prorating.
	Credit Credit `json:"credit,omitempty"`
	// Charge: Details of the transaction to be created for this update. Paddle creates a transaction to bill for new charges.
	Charge Charge `json:"charge,omitempty"`
	// Result: Details of the result of credits and charges. Where the total of any credit adjustments is greater than the total charge, the result is a prorated credit; otherwise, the result is a prorated charge.
	Result Result `json:"result,omitempty"`
}

// SubscriptionPreview: Represents a subscription preview when previewing a subscription.
type SubscriptionPreview struct {
	// Status: Status of this subscription. Set automatically by Paddle. Use the pause subscription or cancel subscription operations to change.
	Status string `json:"status,omitempty"`
	// CustomerID: Paddle ID of the customer that this subscription is for, prefixed with `ctm_`.
	CustomerID string `json:"customer_id,omitempty"`
	// AddressID: Paddle ID of the address that this subscription is for, prefixed with `add_`.
	AddressID string `json:"address_id,omitempty"`
	// BusinessID: Paddle ID of the business that this subscription is for, prefixed with `biz_`.
	BusinessID *string `json:"business_id,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code. Transactions for this subscription are created in this currency. Must be `USD`, `EUR`, or `GBP` if `collection_mode` is `manual`.
	CurrencyCode string `json:"currency_code,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
	UpdatedAt string `json:"updated_at,omitempty"`
	// StartedAt: RFC 3339 datetime string of when this subscription started. This may be different from `first_billed_at` if the subscription started in trial.
	StartedAt *string `json:"started_at,omitempty"`
	// FirstBilledAt: RFC 3339 datetime string of when this subscription was first billed. This may be different from `started_at` if the subscription started in trial.
	FirstBilledAt *string `json:"first_billed_at,omitempty"`
	// NextBilledAt: RFC 3339 datetime string of when this subscription is next scheduled to be billed.
	NextBilledAt *string `json:"next_billed_at,omitempty"`
	// PausedAt: RFC 3339 datetime string of when this subscription was paused. Set automatically by Paddle when the pause subscription operation is used. `null` if not paused.
	PausedAt *string `json:"paused_at,omitempty"`
	// CanceledAt: RFC 3339 datetime string of when this subscription was canceled. Set automatically by Paddle when the cancel subscription operation is used. `null` if not canceled.
	CanceledAt *string `json:"canceled_at,omitempty"`
	// Discount: Details of the discount applied to this subscription.
	Discount *SubscriptionDiscount `json:"discount,omitempty"`
	// CollectionMode: How payment is collected for transactions created for this subscription. `automatic` for checkout, `manual` for invoices.
	CollectionMode string `json:"collection_mode,omitempty"`
	// BillingDetails: Details for invoicing. Required if `collection_mode` is `manual`.
	BillingDetails *BillingDetails `json:"billing_details,omitempty"`
	// CurrentBillingPeriod: Current billing period for this subscription. Set automatically by Paddle based on the billing cycle. `null` for `paused` and `canceled` subscriptions.
	CurrentBillingPeriod *TimePeriod `json:"current_billing_period,omitempty"`
	// BillingCycle: How often this subscription renews. Set automatically by Paddle based on the prices on this subscription.
	BillingCycle Duration `json:"billing_cycle,omitempty"`
	// ScheduledChange: Change that's scheduled to be applied to a subscription. Use the pause subscription, cancel subscription, and resume subscription operations to create scheduled changes. `null` if no scheduled changes.
	ScheduledChange *SubscriptionScheduledChange `json:"scheduled_change,omitempty"`
	// ManagementURLs: Public URLs that customers can use to make changes to this subscription. For security, the `token` appended to each link is temporary. You shouldn't store these links.
	ManagementURLs SubscriptionManagementUrLs `json:"management_urls,omitempty"`
	// Items: Represents a subscription item.
	Items []SubscriptionItem `json:"items,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	// ImmediateTransaction: Preview of the immediate transaction created as a result of changes to the subscription. Returns a complete object where `proration_billing_mode` is `prorated_immediately` or `full_immediately`; `null` otherwise.
	ImmediateTransaction *NextTransaction `json:"immediate_transaction,omitempty"`
	// NextTransaction: Preview of the next transaction for this subscription. Includes charges created where `proration_billing_mode` is `prorated_next_billing_period` or `full_next_billing_period`, as well as one-time charges. `null` if the subscription is scheduled to cancel or pause.
	NextTransaction *NextTransaction `json:"next_transaction,omitempty"`
	// RecurringTransactionDetails: Preview of the recurring transaction for this subscription. This is what the customer can expect to be billed when there are no prorated or one-time charges.
	RecurringTransactionDetails SubscriptionTransactionDetailsPreview `json:"recurring_transaction_details,omitempty"`
	// UpdateSummary: Impact of this subscription change. Includes whether the change results in a charge or credit, and totals for prorated amounts.
	UpdateSummary *PreviewSubscriptionUpdateSummary `json:"update_summary,omitempty"`
	// ImportMeta: Import information for this entity. `null` if this entity is not imported.
	ImportMeta *ImportMeta `json:"import_meta,omitempty"`
}

// SubscriptionsSubscriptionsCatalogItem: Add a catalog item to a subscription. In this case, the product and price that you're billing for exist in your product catalog in Paddle.
type SubscriptionsSubscriptionsCatalogItem struct {
	// Quantity: Quantity to bill for.
	Quantity int `json:"quantity,omitempty"`
	// PriceID: Paddle ID of an an existing catalog price to bill for.
	PriceID string `json:"price_id,omitempty"`
}

// SubscriptionChargeCreateWithPrice: Price object for a non-catalog item to bill for. Include a `product_id` to relate this non-catalog price to an existing catalog price.
type SubscriptionChargeCreateWithPrice struct {
	// ProductID: Paddle ID for the product that this price is for, prefixed with `pro_`.
	ProductID string `json:"product_id,omitempty"`
	// Description: Internal description for this price, not shown to customers. Typically notes for your team.
	Description string `json:"description,omitempty"`
	// Name: Name of this price, shown to customers at checkout and on invoices. Typically describes how often the related product bills.
	Name *string `json:"name,omitempty"`
	// TaxMode: How tax is calculated for this price.
	TaxMode string `json:"tax_mode,omitempty"`
	// UnitPrice: Base price. This price applies to all customers, except for customers located in countries where you have `unit_price_overrides`.
	UnitPrice Money `json:"unit_price,omitempty"`
	// UnitPriceOverrides: List of unit price overrides. Use to override the base price with a custom price and currency for a country or group of countries.
	UnitPriceOverrides []UnitPriceOverride `json:"unit_price_overrides,omitempty"`
	// Quantity: Limits on how many times the related product can be purchased at this price. Useful for discount campaigns. If omitted, defaults to 1-100.
	Quantity PriceQuantity `json:"quantity,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
}

// SubscriptionsNonCatalogPriceForAnExistingProduct: Add a non-catalog price for an existing product in your catalog to a subscription. In this case, the product you're billing for is a catalog product, but you charge a specific price for it.
type SubscriptionsNonCatalogPriceForAnExistingProduct struct {
	// Quantity: Quantity to bill for.
	Quantity int `json:"quantity,omitempty"`
	// Price: Price object for a non-catalog item to bill for. Include a `product_id` to relate this non-catalog price to an existing catalog price.
	Price SubscriptionChargeCreateWithPrice `json:"price,omitempty"`
}

// SubscriptionChargeCreateWithProduct: Price object for a non-catalog item to charge for. Include a `product` object to create a non-catalog product for this non-catalog price.
type SubscriptionChargeCreateWithProduct struct {
	// Description: Internal description for this price, not shown to customers. Typically notes for your team.
	Description string `json:"description,omitempty"`
	// Name: Name of this price, shown to customers at checkout and on invoices. Typically describes how often the related product bills.
	Name *string `json:"name,omitempty"`
	// TaxMode: How tax is calculated for this price.
	TaxMode string `json:"tax_mode,omitempty"`
	// UnitPrice: Base price. This price applies to all customers, except for customers located in countries where you have `unit_price_overrides`.
	UnitPrice Money `json:"unit_price,omitempty"`
	// UnitPriceOverrides: List of unit price overrides. Use to override the base price with a custom price and currency for a country or group of countries.
	UnitPriceOverrides []UnitPriceOverride `json:"unit_price_overrides,omitempty"`
	// Quantity: Limits on how many times the related product can be purchased at this price. Useful for discount campaigns. If omitted, defaults to 1-100.
	Quantity PriceQuantity `json:"quantity,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	// Product: Product object for a non-catalog item to charge for.
	Product TransactionSubscriptionProductCreate `json:"product,omitempty"`
}

// SubscriptionsNonCatalogPriceAndProduct: Add a non-catalog price for a non-catalog product in your catalog to a subscription. In this case, the product and price that you're billing for are specific to this transaction.
type SubscriptionsNonCatalogPriceAndProduct struct {
	// Quantity: Quantity to bill for.
	Quantity int `json:"quantity,omitempty"`
	// Price: Price object for a non-catalog item to charge for. Include a `product` object to create a non-catalog product for this non-catalog price.
	Price SubscriptionChargeCreateWithProduct `json:"price,omitempty"`
}

// SubscriptionsClient is a client for the Subscriptions resource.
type SubscriptionsClient struct {
	doer Doer
}

// GetSubscriptionRequest is given as an input to GetSubscription.
type GetSubscriptionRequest struct {
	// URL path parameters.
	SubscriptionID string `in:"path=subscription_id" json:"-"`

	// IncludeNextTransaction allows requesting the next_transaction sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeNextTransaction bool `in:"paddle_include=next_transaction" json:"-"`

	// IncludeRecurringTransactionDetails allows requesting the recurring_transaction_details sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeRecurringTransactionDetails bool `in:"paddle_include=recurring_transaction_details" json:"-"`
}

// GetSubscription performs the GET operation on a Subscriptions resource.
func (c *SubscriptionsClient) GetSubscription(ctx context.Context, req *GetSubscriptionRequest) (res *Subscription, err error) {
	if err := c.doer.Do(ctx, "GET", "/subscriptions/{subscription_id}", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// UpdateSubscriptionRequest is given as an input to UpdateSubscription.
type UpdateSubscriptionRequest struct {
	// URL path parameters.
	SubscriptionID string `in:"path=subscription_id" json:"-"`

	// CustomerID: Paddle ID of the customer that this subscription is for, prefixed with `ctm_`. Include to change the customer for a subscription.
	CustomerID *PatchField[string] `json:"customer_id,omitempty"`
	// AddressID: Paddle ID of the address that this subscription is for, prefixed with `add_`. Include to change the address for a subscription.
	AddressID *PatchField[string] `json:"address_id,omitempty"`
	// BusinessID: Paddle ID of the business that this subscription is for, prefixed with `biz_`. Include to change the business for a subscription.
	BusinessID *PatchField[*string] `json:"business_id,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code. Include to change the currency that a subscription bills in. When changing `collection_mode` to `manual`, you may need to change currency code to `USD`, `EUR`, or `GBP`.
	CurrencyCode *PatchField[string] `json:"currency_code,omitempty"`
	// NextBilledAt: RFC 3339 datetime string of when this subscription is next scheduled to be billed. Include to change the next billing date.
	NextBilledAt *PatchField[string] `json:"next_billed_at,omitempty"`
	// Discount: Details of the discount applied to this subscription. Include to add a discount to a subscription. `null` to remove a discount.
	Discount *PatchField[*SubscriptionsDiscount] `json:"discount,omitempty"`
	// CollectionMode: How payment is collected for transactions created for this subscription. `automatic` for checkout, `manual` for invoices.
	CollectionMode *PatchField[string] `json:"collection_mode,omitempty"`
	// BillingDetails: Details for invoicing. Required if `collection_mode` is `manual`. `null` if changing `collection_mode` to `automatic`.
	BillingDetails *PatchField[*BillingDetailsUpdate] `json:"billing_details,omitempty"`
	// ScheduledChange: Change that's scheduled to be applied to a subscription. When updating, you may only set to `null` to remove a scheduled change. Use the pause subscription, cancel subscription, and resume subscription operations to create scheduled changes.
	ScheduledChange *PatchField[*SubscriptionScheduledChange] `json:"scheduled_change,omitempty"`
	// Items: Add or update a catalog item to a subscription. In this case, the product and price that you're billing for exist in your product catalog in Paddle.
	Items *PatchField[[]SubscriptionsCatalogItem] `json:"items,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData *PatchField[CustomData] `json:"custom_data,omitempty"`
	/*
	   ProrationBillingMode: How Paddle should handle proration calculation for changes made to a subscription or its items. Required when making
	   changes that impact billing.

	   For automatically-collected subscriptions, responses may take longer than usual if a proration billing mode that
	   collects for payment immediately is used.
	*/
	ProrationBillingMode *PatchField[string] `json:"proration_billing_mode,omitempty"`
	// OnPaymentFailure: How Paddle should handle changes made to a subscription or its items if the payment fails during update. If omitted, defaults to `prevent_change`.
	OnPaymentFailure *PatchField[string] `json:"on_payment_failure,omitempty"`
}

// UpdateSubscription performs the PATCH operation on a Subscriptions resource.
func (c *SubscriptionsClient) UpdateSubscription(ctx context.Context, req *UpdateSubscriptionRequest) (res *Subscription, err error) {
	if err := c.doer.Do(ctx, "PATCH", "/subscriptions/{subscription_id}", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// ListSubscriptionsRequest is given as an input to ListSubscriptions.
type ListSubscriptionsRequest struct {
	// AddressID is a query parameter.
	// Return entities related to the specified address. Use a comma-separated list to specify multiple address IDs.
	AddressID []string `in:"query=address_id;omitempty" json:"-"`
	// After is a query parameter.
	// Return entities after the specified Paddle ID when working with paginated endpoints. Used in the `meta.pagination.next` URL in responses for list operations.
	After *string `in:"query=after;omitempty" json:"-"`
	// CollectionMode is a query parameter.
	// Return entities that match the specified collection mode.
	CollectionMode *string `in:"query=collection_mode;omitempty" json:"-"`
	// CustomerID is a query parameter.
	// Return entities related to the specified customer. Use a comma-separated list to specify multiple customer IDs.
	CustomerID []string `in:"query=customer_id;omitempty" json:"-"`
	// ID is a query parameter.
	// Return only the IDs specified. Use a comma-separated list to get multiple entities.
	ID []string `in:"query=id;omitempty" json:"-"`
	// OrderBy is a query parameter.
	/*
	   Order returned entities by the specified field and direction (`[ASC]` or `[DESC]`). For example, `?order_by=id[ASC]`.

	   Valid fields for ordering: `id`.
	*/
	OrderBy *string `in:"query=order_by;omitempty" json:"-"`
	// PerPage is a query parameter.
	/*
	   Set how many entities are returned per page. Paddle returns the maximum number of results if a number greater than the maximum is requested. Check `meta.pagination.per_page` in the response to see how many were returned.

	   Default: `50`; Maximum: `200`.
	*/
	PerPage *int `in:"query=per_page;omitempty" json:"-"`
	// PriceID is a query parameter.
	// Return entities related to the specified price. Use a comma-separated list to specify multiple price IDs.
	PriceID []string `in:"query=price_id;omitempty" json:"-"`
	// ScheduledChangeAction is a query parameter.
	// Return subscriptions that have a scheduled change. Use a comma-separated list to specify multiple scheduled change actions.
	ScheduledChangeAction []string `in:"query=scheduled_change_action;omitempty" json:"-"`
	// Status is a query parameter.
	// Return entities that match the specified status. Use a comma-separated list to specify multiple status values.
	Status []string `in:"query=status;omitempty" json:"-"`
}

// ListSubscriptions performs the GET operation on a Subscriptions resource.
func (c *SubscriptionsClient) ListSubscriptions(ctx context.Context, req *ListSubscriptionsRequest) (res *Collection[*Subscription], err error) {
	if err := c.doer.Do(ctx, "GET", "/subscriptions", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// CancelSubscriptionRequest is given as an input to CancelSubscription.
type CancelSubscriptionRequest struct {
	// URL path parameters.
	SubscriptionID string `in:"path=subscription_id" json:"-"`

	/*
	   EffectiveFrom: When this subscription change should take effect from. Defaults to `next_billing_period` for active subscriptions,
	   which creates a `scheduled_change` to apply the subscription change at the end of the billing period.
	*/
	EffectiveFrom *string `json:"effective_from,omitempty"`
}

// CancelSubscription performs the POST operation on a Subscriptions resource.
func (c *SubscriptionsClient) CancelSubscription(ctx context.Context, req *CancelSubscriptionRequest) (res *Subscription, err error) {
	if err := c.doer.Do(ctx, "POST", "/subscriptions/{subscription_id}/cancel", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// PauseSubscriptionRequest is given as an input to PauseSubscription.
type PauseSubscriptionRequest struct {
	// URL path parameters.
	SubscriptionID string `in:"path=subscription_id" json:"-"`

	/*
	   EffectiveFrom: When this subscription change should take effect from. Defaults to `next_billing_period` for active subscriptions,
	   which creates a `scheduled_change` to apply the subscription change at the end of the billing period.
	*/
	EffectiveFrom *string `json:"effective_from,omitempty"`
	// ResumeAt: RFC 3339 datetime string of when the paused subscription should resume. Omit to pause indefinitely until resumed.
	ResumeAt *string `json:"resume_at,omitempty"`
}

// PauseSubscription performs the POST operation on a Subscriptions resource.
func (c *SubscriptionsClient) PauseSubscription(ctx context.Context, req *PauseSubscriptionRequest) (res *Subscription, err error) {
	if err := c.doer.Do(ctx, "POST", "/subscriptions/{subscription_id}/pause", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// NewResumeSubscriptionRequestResumeOnASpecificDate takes a ResumeOnASpecificDate type
// and creates a ResumeSubscriptionRequest for use in a request.
func NewResumeSubscriptionRequestResumeOnASpecificDate(r *ResumeOnASpecificDate) *ResumeSubscriptionRequest {
	return &ResumeSubscriptionRequest{ResumeOnASpecificDate: r}
}

// NewResumeSubscriptionRequestResumeImmediately takes a ResumeImmediately type
// and creates a ResumeSubscriptionRequest for use in a request.
func NewResumeSubscriptionRequestResumeImmediately(r *ResumeImmediately) *ResumeSubscriptionRequest {
	return &ResumeSubscriptionRequest{ResumeImmediately: r}
}

// ResumeSubscriptionRequest represents a union request type of the following types:
//   - `ResumeOnASpecificDate`
//   - `ResumeImmediately`
//
// The following constructor functions can be used to create a new instance of this type.
//   - `NewResumeSubscriptionRequestResumeOnASpecificDate()`
//   - `NewResumeSubscriptionRequestResumeImmediately()`
//
// Only one of the values can be set at a time, the first non-nil value will be used in the request.
type ResumeSubscriptionRequest struct {
	// URL path parameters.
	SubscriptionID string `in:"path=subscription_id" json:"-"`

	*ResumeOnASpecificDate
	*ResumeImmediately
}

// ResumeSubscription performs the POST operation on a Subscriptions resource.
func (c *SubscriptionsClient) ResumeSubscription(ctx context.Context, req *ResumeSubscriptionRequest) (res *Subscription, err error) {
	if err := c.doer.Do(ctx, "POST", "/subscriptions/{subscription_id}/resume", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// MarshalJSON implements the json.Marshaler interface.
func (u ResumeSubscriptionRequest) MarshalJSON() ([]byte, error) {
	if u.ResumeOnASpecificDate != nil {
		return json.Marshal(u.ResumeOnASpecificDate)
	}

	if u.ResumeImmediately != nil {
		return json.Marshal(u.ResumeImmediately)
	}

	return nil, nil
}

// ActivateSubscriptionRequest is given as an input to ActivateSubscription.
type ActivateSubscriptionRequest struct {
	// URL path parameters.
	SubscriptionID string `in:"path=subscription_id" json:"-"`
}

// ActivateSubscription performs the POST operation on a Subscriptions resource.
func (c *SubscriptionsClient) ActivateSubscription(ctx context.Context, req *ActivateSubscriptionRequest) (res *Subscription, err error) {
	if err := c.doer.Do(ctx, "POST", "/subscriptions/{subscription_id}/activate", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// GetSubscriptionUpdatePaymentMethodTransactionRequest is given as an input to GetSubscriptionUpdatePaymentMethodTransaction.
type GetSubscriptionUpdatePaymentMethodTransactionRequest struct {
	// URL path parameters.
	SubscriptionID string `in:"path=subscription_id" json:"-"`
}

// GetSubscriptionUpdatePaymentMethodTransaction performs the GET operation on a Subscriptions resource.
func (c *SubscriptionsClient) GetSubscriptionUpdatePaymentMethodTransaction(ctx context.Context, req *GetSubscriptionUpdatePaymentMethodTransactionRequest) (res *Transaction, err error) {
	if err := c.doer.Do(ctx, "GET", "/subscriptions/{subscription_id}/update-payment-method-transaction", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// PreviewSubscriptionRequest is given as an input to PreviewSubscription.
type PreviewSubscriptionRequest struct {
	// URL path parameters.
	SubscriptionID string `in:"path=subscription_id" json:"-"`

	// CustomerID: Paddle ID of the customer that this subscription is for, prefixed with `ctm_`. Include to change the customer for a subscription.
	CustomerID *PatchField[string] `json:"customer_id,omitempty"`
	// AddressID: Paddle ID of the address that this subscription is for, prefixed with `add_`. Include to change the address for a subscription.
	AddressID *PatchField[string] `json:"address_id,omitempty"`
	// BusinessID: Paddle ID of the business that this subscription is for, prefixed with `biz_`. Include to change the business for a subscription.
	BusinessID *PatchField[*string] `json:"business_id,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code. Include to change the currency that a subscription bills in. When changing `collection_mode` to `manual`, you may need to change currency code to `USD`, `EUR`, or `GBP`.
	CurrencyCode *PatchField[string] `json:"currency_code,omitempty"`
	// NextBilledAt: RFC 3339 datetime string of when this subscription is next scheduled to be billed. Include to change the next billing date.
	NextBilledAt *PatchField[string] `json:"next_billed_at,omitempty"`
	// Discount: Details of the discount applied to this subscription. Include to add a discount to a subscription. `null` to remove a discount.
	Discount *PatchField[*SubscriptionsDiscount] `json:"discount,omitempty"`
	// CollectionMode: How payment is collected for transactions created for this subscription. `automatic` for checkout, `manual` for invoices.
	CollectionMode *PatchField[string] `json:"collection_mode,omitempty"`
	// BillingDetails: Details for invoicing. Required if `collection_mode` is `manual`. `null` if changing `collection_mode` to `automatic`.
	BillingDetails *PatchField[*BillingDetailsUpdate] `json:"billing_details,omitempty"`
	// ScheduledChange: Change that's scheduled to be applied to a subscription. When updating, you may only set to `null` to remove a scheduled change. Use the pause subscription, cancel subscription, and resume subscription operations to create scheduled changes.
	ScheduledChange *PatchField[*SubscriptionScheduledChange] `json:"scheduled_change,omitempty"`
	// Items: Add or update a catalog item to a subscription. In this case, the product and price that you're billing for exist in your product catalog in Paddle.
	Items *PatchField[[]SubscriptionsCatalogItem] `json:"items,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData *PatchField[CustomData] `json:"custom_data,omitempty"`
	/*
	   ProrationBillingMode: How Paddle should handle proration calculation for changes made to a subscription or its items. Required when making
	   changes that impact billing.

	   For automatically-collected subscriptions, responses may take longer than usual if a proration billing mode that
	   collects for payment immediately is used.
	*/
	ProrationBillingMode *PatchField[string] `json:"proration_billing_mode,omitempty"`
	// OnPaymentFailure: How Paddle should handle changes made to a subscription or its items if the payment fails during update. If omitted, defaults to `prevent_change`.
	OnPaymentFailure *PatchField[string] `json:"on_payment_failure,omitempty"`
}

// PreviewSubscription performs the PATCH operation on a Subscriptions resource.
func (c *SubscriptionsClient) PreviewSubscription(ctx context.Context, req *PreviewSubscriptionRequest) (res *SubscriptionPreview, err error) {
	if err := c.doer.Do(ctx, "PATCH", "/subscriptions/{subscription_id}/preview", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// NewCreateSubscriptionChargeItemsSubscriptionsSubscriptionsCatalogItem takes a SubscriptionsSubscriptionsCatalogItem type
// and creates a CreateSubscriptionChargeItems for use in a request.
func NewCreateSubscriptionChargeItemsSubscriptionsSubscriptionsCatalogItem(r *SubscriptionsSubscriptionsCatalogItem) *CreateSubscriptionChargeItems {
	return &CreateSubscriptionChargeItems{SubscriptionsSubscriptionsCatalogItem: r}
}

// NewCreateSubscriptionChargeItemsSubscriptionsNonCatalogPriceForAnExistingProduct takes a SubscriptionsNonCatalogPriceForAnExistingProduct type
// and creates a CreateSubscriptionChargeItems for use in a request.
func NewCreateSubscriptionChargeItemsSubscriptionsNonCatalogPriceForAnExistingProduct(r *SubscriptionsNonCatalogPriceForAnExistingProduct) *CreateSubscriptionChargeItems {
	return &CreateSubscriptionChargeItems{SubscriptionsNonCatalogPriceForAnExistingProduct: r}
}

// NewCreateSubscriptionChargeItemsSubscriptionsNonCatalogPriceAndProduct takes a SubscriptionsNonCatalogPriceAndProduct type
// and creates a CreateSubscriptionChargeItems for use in a request.
func NewCreateSubscriptionChargeItemsSubscriptionsNonCatalogPriceAndProduct(r *SubscriptionsNonCatalogPriceAndProduct) *CreateSubscriptionChargeItems {
	return &CreateSubscriptionChargeItems{SubscriptionsNonCatalogPriceAndProduct: r}
}

// CreateSubscriptionChargeItems represents a union request type of the following types:
//   - `SubscriptionsSubscriptionsCatalogItem`
//   - `SubscriptionsNonCatalogPriceForAnExistingProduct`
//   - `SubscriptionsNonCatalogPriceAndProduct`
//
// The following constructor functions can be used to create a new instance of this type.
//   - `NewCreateSubscriptionChargeItemsSubscriptionsSubscriptionsCatalogItem()`
//   - `NewCreateSubscriptionChargeItemsSubscriptionsNonCatalogPriceForAnExistingProduct()`
//   - `NewCreateSubscriptionChargeItemsSubscriptionsNonCatalogPriceAndProduct()`
//
// Only one of the values can be set at a time, the first non-nil value will be used in the request.
// Items: Add a non-catalog price for a non-catalog product in your catalog to a subscription. In this case, the product and price that you're billing for are specific to this transaction.
type CreateSubscriptionChargeItems struct {
	*SubscriptionsSubscriptionsCatalogItem
	*SubscriptionsNonCatalogPriceForAnExistingProduct
	*SubscriptionsNonCatalogPriceAndProduct
}

// MarshalJSON implements the json.Marshaler interface.
func (u CreateSubscriptionChargeItems) MarshalJSON() ([]byte, error) {
	if u.SubscriptionsSubscriptionsCatalogItem != nil {
		return json.Marshal(u.SubscriptionsSubscriptionsCatalogItem)
	}

	if u.SubscriptionsNonCatalogPriceForAnExistingProduct != nil {
		return json.Marshal(u.SubscriptionsNonCatalogPriceForAnExistingProduct)
	}

	if u.SubscriptionsNonCatalogPriceAndProduct != nil {
		return json.Marshal(u.SubscriptionsNonCatalogPriceAndProduct)
	}

	return nil, nil
}

// CreateSubscriptionChargeRequest is given as an input to CreateSubscriptionCharge.
type CreateSubscriptionChargeRequest struct {
	// URL path parameters.
	SubscriptionID string `in:"path=subscription_id" json:"-"`

	// EffectiveFrom: When one-time charges should be billed.
	EffectiveFrom string `json:"effective_from,omitempty"`
	// Items: Add a non-catalog price for a non-catalog product in your catalog to a subscription. In this case, the product and price that you're billing for are specific to this transaction.
	Items []CreateSubscriptionChargeItems `json:"items,omitempty"`
	// OnPaymentFailure: How Paddle should handle changes made to a subscription or its items if the payment fails during update. If omitted, defaults to `prevent_change`.
	OnPaymentFailure *string `json:"on_payment_failure,omitempty"`
}

// CreateSubscriptionCharge performs the POST operation on a Subscriptions resource.
func (c *SubscriptionsClient) CreateSubscriptionCharge(ctx context.Context, req *CreateSubscriptionChargeRequest) (res *Subscription, err error) {
	if err := c.doer.Do(ctx, "POST", "/subscriptions/{subscription_id}/charge", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// NewPreviewSubscriptionChargeItemsSubscriptionsSubscriptionsCatalogItem takes a SubscriptionsSubscriptionsCatalogItem type
// and creates a PreviewSubscriptionChargeItems for use in a request.
func NewPreviewSubscriptionChargeItemsSubscriptionsSubscriptionsCatalogItem(r *SubscriptionsSubscriptionsCatalogItem) *PreviewSubscriptionChargeItems {
	return &PreviewSubscriptionChargeItems{SubscriptionsSubscriptionsCatalogItem: r}
}

// NewPreviewSubscriptionChargeItemsSubscriptionsNonCatalogPriceForAnExistingProduct takes a SubscriptionsNonCatalogPriceForAnExistingProduct type
// and creates a PreviewSubscriptionChargeItems for use in a request.
func NewPreviewSubscriptionChargeItemsSubscriptionsNonCatalogPriceForAnExistingProduct(r *SubscriptionsNonCatalogPriceForAnExistingProduct) *PreviewSubscriptionChargeItems {
	return &PreviewSubscriptionChargeItems{SubscriptionsNonCatalogPriceForAnExistingProduct: r}
}

// NewPreviewSubscriptionChargeItemsSubscriptionsNonCatalogPriceAndProduct takes a SubscriptionsNonCatalogPriceAndProduct type
// and creates a PreviewSubscriptionChargeItems for use in a request.
func NewPreviewSubscriptionChargeItemsSubscriptionsNonCatalogPriceAndProduct(r *SubscriptionsNonCatalogPriceAndProduct) *PreviewSubscriptionChargeItems {
	return &PreviewSubscriptionChargeItems{SubscriptionsNonCatalogPriceAndProduct: r}
}

// PreviewSubscriptionChargeItems represents a union request type of the following types:
//   - `SubscriptionsSubscriptionsCatalogItem`
//   - `SubscriptionsNonCatalogPriceForAnExistingProduct`
//   - `SubscriptionsNonCatalogPriceAndProduct`
//
// The following constructor functions can be used to create a new instance of this type.
//   - `NewPreviewSubscriptionChargeItemsSubscriptionsSubscriptionsCatalogItem()`
//   - `NewPreviewSubscriptionChargeItemsSubscriptionsNonCatalogPriceForAnExistingProduct()`
//   - `NewPreviewSubscriptionChargeItemsSubscriptionsNonCatalogPriceAndProduct()`
//
// Only one of the values can be set at a time, the first non-nil value will be used in the request.
// Items: Add a non-catalog price for a non-catalog product in your catalog to a subscription. In this case, the product and price that you're billing for are specific to this transaction.
type PreviewSubscriptionChargeItems struct {
	*SubscriptionsSubscriptionsCatalogItem
	*SubscriptionsNonCatalogPriceForAnExistingProduct
	*SubscriptionsNonCatalogPriceAndProduct
}

// MarshalJSON implements the json.Marshaler interface.
func (u PreviewSubscriptionChargeItems) MarshalJSON() ([]byte, error) {
	if u.SubscriptionsSubscriptionsCatalogItem != nil {
		return json.Marshal(u.SubscriptionsSubscriptionsCatalogItem)
	}

	if u.SubscriptionsNonCatalogPriceForAnExistingProduct != nil {
		return json.Marshal(u.SubscriptionsNonCatalogPriceForAnExistingProduct)
	}

	if u.SubscriptionsNonCatalogPriceAndProduct != nil {
		return json.Marshal(u.SubscriptionsNonCatalogPriceAndProduct)
	}

	return nil, nil
}

// PreviewSubscriptionChargeRequest is given as an input to PreviewSubscriptionCharge.
type PreviewSubscriptionChargeRequest struct {
	// URL path parameters.
	SubscriptionID string `in:"path=subscription_id" json:"-"`

	// EffectiveFrom: When one-time charges should be billed.
	EffectiveFrom string `json:"effective_from,omitempty"`
	// Items: Add a non-catalog price for a non-catalog product in your catalog to a subscription. In this case, the product and price that you're billing for are specific to this transaction.
	Items []PreviewSubscriptionChargeItems `json:"items,omitempty"`
	// OnPaymentFailure: How Paddle should handle changes made to a subscription or its items if the payment fails during update. If omitted, defaults to `prevent_change`.
	OnPaymentFailure *string `json:"on_payment_failure,omitempty"`
}

// PreviewSubscriptionCharge performs the POST operation on a Subscriptions resource.
func (c *SubscriptionsClient) PreviewSubscriptionCharge(ctx context.Context, req *PreviewSubscriptionChargeRequest) (res *SubscriptionPreview, err error) {
	if err := c.doer.Do(ctx, "POST", "/subscriptions/{subscription_id}/charge/preview", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}
