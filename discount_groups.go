// Code generated by the Paddle SDK Generator; DO NOT EDIT.

package paddle

import "context"

// DiscountGroupsClient is a client for the Discount groups resource.
type DiscountGroupsClient struct {
	doer Doer
}

// ListDiscountGroupsRequest is given as an input to ListDiscountGroups.
type ListDiscountGroupsRequest struct {
	// After is a query parameter.
	// Return entities after the specified Paddle ID when working with paginated endpoints. Used in the `meta.pagination.next` URL in responses for list operations.
	After *string `in:"query=after;omitempty" json:"-"`
	// ID is a query parameter.
	// Return only the IDs specified. Use a comma-separated list to get multiple entities.
	ID []string `in:"query=id;omitempty" json:"-"`
	// OrderBy is a query parameter.
	/*
	   Order returned entities by the specified field and direction (`[ASC]` or `[DESC]`). For example, `?order_by=id[ASC]`.

	   Valid fields for ordering: `created_at` and `id`.
	*/
	OrderBy *string `in:"query=order_by;omitempty" json:"-"`
	// PerPage is a query parameter.
	/*
	   Set how many entities are returned per page. Paddle returns the maximum number of results if a number greater than the maximum is requested. Check `meta.pagination.per_page` in the response to see how many were returned.

	   Default: `50`; Maximum: `200`.
	*/
	PerPage *int `in:"query=per_page;omitempty" json:"-"`
}

// ListDiscountGroups performs the GET operation on a Discount groups resource.
func (c *DiscountGroupsClient) ListDiscountGroups(ctx context.Context, req *ListDiscountGroupsRequest) (res *Collection[*DiscountGroup], err error) {
	if err := c.doer.Do(ctx, "GET", "/discount-groups", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// CreateDiscountGroupRequest is given as an input to CreateDiscountGroup.
type CreateDiscountGroupRequest struct {
	// Name: Name of this discount group, typically something short and memorable for categorization. Not shown to customers.
	Name string `json:"name,omitempty"`
}

// CreateDiscountGroup performs the POST operation on a Discount groups resource.
func (c *DiscountGroupsClient) CreateDiscountGroup(ctx context.Context, req *CreateDiscountGroupRequest) (res *DiscountGroup, err error) {
	if err := c.doer.Do(ctx, "POST", "/discount-groups", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}
