// Code generated by the Paddle SDK Generator; DO NOT EDIT.

package paddle

import (
	"context"
	"encoding/json"
	paddleerr "github.com/PaddleHQ/paddle-go-sdk/pkg/paddleerr"
)

// ErrTransactionImmutable represents a `transaction_immutable` error.
// See https://developer.paddle.com/errors/transactions/transaction_immutable for more information.
var ErrTransactionImmutable = &paddleerr.Error{
	Code: "transaction_immutable",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionDiscountNotEligible represents a `transaction_discount_not_eligible` error.
// See https://developer.paddle.com/errors/transactions/transaction_discount_not_eligible for more information.
var ErrTransactionDiscountNotEligible = &paddleerr.Error{
	Code: "transaction_discount_not_eligible",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionNotReadyCannotProcessPayment represents a `transaction_not_ready_cannot_process_payment` error.
// See https://developer.paddle.com/errors/transactions/transaction_not_ready_cannot_process_payment for more information.
var ErrTransactionNotReadyCannotProcessPayment = &paddleerr.Error{
	Code: "transaction_not_ready_cannot_process_payment",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionDefaultCheckoutURLNotSet represents a `transaction_default_checkout_url_not_set` error.
// See https://developer.paddle.com/errors/transactions/transaction_default_checkout_url_not_set for more information.
var ErrTransactionDefaultCheckoutURLNotSet = &paddleerr.Error{
	Code: "transaction_default_checkout_url_not_set",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionCheckoutNotEnabled represents a `transaction_checkout_not_enabled` error.
// See https://developer.paddle.com/errors/transactions/transaction_checkout_not_enabled for more information.
var ErrTransactionCheckoutNotEnabled = &paddleerr.Error{
	Code: "transaction_checkout_not_enabled",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionCustomerIsRequiredWithAddress represents a `transaction_customer_is_required_with_address` error.
// See https://developer.paddle.com/errors/transactions/transaction_customer_is_required_with_address for more information.
var ErrTransactionCustomerIsRequiredWithAddress = &paddleerr.Error{
	Code: "transaction_customer_is_required_with_address",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionCustomerIsRequiredForBusinessValidation represents a `transaction_customer_is_required_for_business_validation` error.
// See https://developer.paddle.com/errors/transactions/transaction_customer_is_required_for_business_validation for more information.
var ErrTransactionCustomerIsRequiredForBusinessValidation = &paddleerr.Error{
	Code: "transaction_customer_is_required_for_business_validation",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionPriceDifferentBillingCycle represents a `transaction_price_different_billing_cycle` error.
// See https://developer.paddle.com/errors/transactions/transaction_price_different_billing_cycle for more information.
var ErrTransactionPriceDifferentBillingCycle = &paddleerr.Error{
	Code: "transaction_price_different_billing_cycle",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionPriceDifferentTrialPeriod represents a `transaction_price_different_trial_period` error.
// See https://developer.paddle.com/errors/transactions/transaction_price_different_trial_period for more information.
var ErrTransactionPriceDifferentTrialPeriod = &paddleerr.Error{
	Code: "transaction_price_different_trial_period",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionItemQuantityOutOfRange represents a `transaction_item_quantity_out_of_range` error.
// See https://developer.paddle.com/errors/transactions/transaction_item_quantity_out_of_range for more information.
var ErrTransactionItemQuantityOutOfRange = &paddleerr.Error{
	Code: "transaction_item_quantity_out_of_range",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionBothPriceIDAndObjectFound represents a `transaction_both_price_id_and_object_found` error.
// See https://developer.paddle.com/errors/transactions/transaction_both_price_id_and_object_found for more information.
var ErrTransactionBothPriceIDAndObjectFound = &paddleerr.Error{
	Code: "transaction_both_price_id_and_object_found",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionPriceNotFound represents a `transaction_price_not_found` error.
// See https://developer.paddle.com/errors/transactions/transaction_price_not_found for more information.
var ErrTransactionPriceNotFound = &paddleerr.Error{
	Code: "transaction_price_not_found",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionProductNotFound represents a `transaction_product_not_found` error.
// See https://developer.paddle.com/errors/transactions/transaction_product_not_found for more information.
var ErrTransactionProductNotFound = &paddleerr.Error{
	Code: "transaction_product_not_found",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionCannotBeModifiedAndCanceled represents a `transaction_cannot_be_modified_and_canceled` error.
// See https://developer.paddle.com/errors/transactions/transaction_cannot_be_modified_and_canceled for more information.
var ErrTransactionCannotBeModifiedAndCanceled = &paddleerr.Error{
	Code: "transaction_cannot_be_modified_and_canceled",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionDiscountNotFound represents a `transaction_discount_not_found` error.
// See https://developer.paddle.com/errors/transactions/transaction_discount_not_found for more information.
var ErrTransactionDiscountNotFound = &paddleerr.Error{
	Code: "transaction_discount_not_found",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionCannotProvideBothDiscountCodeAndID represents a `transaction_cannot_provide_both_discount_code_and_id` error.
// See https://developer.paddle.com/errors/transactions/transaction_cannot_provide_both_discount_code_and_id for more information.
var ErrTransactionCannotProvideBothDiscountCodeAndID = &paddleerr.Error{
	Code: "transaction_cannot_provide_both_discount_code_and_id",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionInvalidStatusChange represents a `transaction_invalid_status_change` error.
// See https://developer.paddle.com/errors/transactions/transaction_invalid_status_change for more information.
var ErrTransactionInvalidStatusChange = &paddleerr.Error{
	Code: "transaction_invalid_status_change",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionBillingDetailsMustBeNull represents a `transaction_billing_details_must_be_null` error.
// See https://developer.paddle.com/errors/transactions/transaction_billing_details_must_be_null for more information.
var ErrTransactionBillingDetailsMustBeNull = &paddleerr.Error{
	Code: "transaction_billing_details_must_be_null",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionBillingDetailsObjectRequired represents a `transaction_billing_details_object_required` error.
// See https://developer.paddle.com/errors/transactions/transaction_billing_details_object_required for more information.
var ErrTransactionBillingDetailsObjectRequired = &paddleerr.Error{
	Code: "transaction_billing_details_object_required",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionPaymentTermsObjectRequired represents a `transaction_payment_terms_object_required` error.
// See https://developer.paddle.com/errors/transactions/transaction_payment_terms_object_required for more information.
var ErrTransactionPaymentTermsObjectRequired = &paddleerr.Error{
	Code: "transaction_payment_terms_object_required",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionBalanceLessThanChargeLimit represents a `transaction_balance_less_than_charge_limit` error.
// See https://developer.paddle.com/errors/transactions/transaction_balance_less_than_charge_limit for more information.
var ErrTransactionBalanceLessThanChargeLimit = &paddleerr.Error{
	Code: "transaction_balance_less_than_charge_limit",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionStatusMustBeReady represents a `transaction_status_must_be_ready` error.
// See https://developer.paddle.com/errors/transactions/transaction_status_must_be_ready for more information.
var ErrTransactionStatusMustBeReady = &paddleerr.Error{
	Code: "transaction_status_must_be_ready",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionCustomerNotSuitableForCollectionMode represents a `transaction_customer_not_suitable_for_collection_mode` error.
// See https://developer.paddle.com/errors/transactions/transaction_customer_not_suitable_for_collection_mode for more information.
var ErrTransactionCustomerNotSuitableForCollectionMode = &paddleerr.Error{
	Code: "transaction_customer_not_suitable_for_collection_mode",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionAddressNotSuitableForCollectionMode represents a `transaction_address_not_suitable_for_collection_mode` error.
// See https://developer.paddle.com/errors/transactions/transaction_address_not_suitable_for_collection_mode for more information.
var ErrTransactionAddressNotSuitableForCollectionMode = &paddleerr.Error{
	Code: "transaction_address_not_suitable_for_collection_mode",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionCurrencyCodeNotValidForManual represents a `transaction_currency_code_not_valid_for_manual` error.
// See https://developer.paddle.com/errors/transactions/transaction_currency_code_not_valid_for_manual for more information.
var ErrTransactionCurrencyCodeNotValidForManual = &paddleerr.Error{
	Code: "transaction_currency_code_not_valid_for_manual",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionPreviewAdjustmentSubscriptionConflict represents a `transaction_preview_adjustment_subscription_conflict` error.
// See https://developer.paddle.com/errors/transactions/transaction_preview_adjustment_subscription_conflict for more information.
var ErrTransactionPreviewAdjustmentSubscriptionConflict = &paddleerr.Error{
	Code: "transaction_preview_adjustment_subscription_conflict",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionInvalidDiscountCurrency represents a `transaction_invalid_discount_currency` error.
// See https://developer.paddle.com/errors/transactions/transaction_invalid_discount_currency for more information.
var ErrTransactionInvalidDiscountCurrency = &paddleerr.Error{
	Code: "transaction_invalid_discount_currency",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionBillingPeriodStartsAtGreaterThanNow represents a `transaction_billing_period_starts_at_greater_than_now` error.
// See https://developer.paddle.com/errors/transactions/transaction_billing_period_starts_at_greater_than_now for more information.
var ErrTransactionBillingPeriodStartsAtGreaterThanNow = &paddleerr.Error{
	Code: "transaction_billing_period_starts_at_greater_than_now",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionCheckoutURLDomainIsNotApproved represents a `transaction_checkout_url_domain_is_not_approved` error.
// See https://developer.paddle.com/errors/transactions/transaction_checkout_url_domain_is_not_approved for more information.
var ErrTransactionCheckoutURLDomainIsNotApproved = &paddleerr.Error{
	Code: "transaction_checkout_url_domain_is_not_approved",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionRecurringBalanceLessThanChargeLimit represents a `transaction_recurring_balance_less_than_charge_limit` error.
// See https://developer.paddle.com/errors/transactions/transaction_recurring_balance_less_than_charge_limit for more information.
var ErrTransactionRecurringBalanceLessThanChargeLimit = &paddleerr.Error{
	Code: "transaction_recurring_balance_less_than_charge_limit",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionDuplicatePriceIDs represents a `transaction_duplicate_price_ids` error.
// See https://developer.paddle.com/errors/transactions/transaction_duplicate_price_ids for more information.
var ErrTransactionDuplicatePriceIDs = &paddleerr.Error{
	Code: "transaction_duplicate_price_ids",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrTransactionPaymentMethodChangeFieldImmutable represents a `transaction_payment_method_change_field_immutable` error.
// See https://developer.paddle.com/errors/transactions/transaction_payment_method_change_field_immutable for more information.
var ErrTransactionPaymentMethodChangeFieldImmutable = &paddleerr.Error{
	Code: "transaction_payment_method_change_field_immutable",
	Type: paddleerr.ErrorTypeRequestError,
}

// Breakdown: Breakdown of the total adjustments by adjustment action.
type Breakdown struct {
	// Credit: Total amount of credit adjustments.
	Credit string `json:"credit,omitempty"`
	// Refund: Total amount of refund adjustments.
	Refund string `json:"refund,omitempty"`
	// Chargeback: Total amount of chargeback adjustments.
	Chargeback string `json:"chargeback,omitempty"`
}

// AdjustmentsTotals: Object containing totals for all adjustments on a transaction. Returned when the `include` parameter is used with the `adjustments_totals` value.
type AdjustmentsTotals struct {
	// Subtotal: Total before tax.
	Subtotal string `json:"subtotal,omitempty"`
	// Tax: Total tax on the subtotal.
	Tax string `json:"tax,omitempty"`
	// Total: Total after tax.
	Total string `json:"total,omitempty"`
	// Fee: Total fee taken by Paddle.
	Fee string `json:"fee,omitempty"`
	/*
	   Earnings: Total earnings. This is the subtotal minus the Paddle fee.
	   For tax adjustments, this value is negative, which means a positive effect in the transaction earnings.
	   This is because the fee is originally calculated from the transaction total, so if a tax adjustment is made,
	   then the fee portion of it is returned.
	   As a result, the earnings from all the adjustments performed could be either negative, positive or zero.
	*/
	Earnings string `json:"earnings,omitempty"`
	// Breakdown: Breakdown of the total adjustments by adjustment action.
	Breakdown Breakdown `json:"breakdown,omitempty"`
	// CurrencyCode: Three-letter ISO 4217 currency code used for adjustments for this transaction.
	CurrencyCode string `json:"currency_code,omitempty"`
}

// TransactionIncludes: Represents a transaction entity with included entities.
type TransactionIncludes struct {
	// ID: Unique Paddle ID for this transaction entity, prefixed with `txn_`.
	ID string `json:"id,omitempty"`
	// Status: Status of this transaction. You may set a transaction to `billed` or `canceled`, other statuses are set automatically by Paddle. Automatically-collected transactions may return `completed` if payment is captured successfully, or `past_due` if payment failed.
	Status string `json:"status,omitempty"`
	// CustomerID: Paddle ID of the customer that this transaction is for, prefixed with `ctm_`.
	CustomerID *string `json:"customer_id,omitempty"`
	// AddressID: Paddle ID of the address that this transaction is for, prefixed with `add_`.
	AddressID *string `json:"address_id,omitempty"`
	// BusinessID: Paddle ID of the business that this transaction is for, prefixed with `biz_`.
	BusinessID *string `json:"business_id,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code. Must be `USD`, `EUR`, or `GBP` if `collection_mode` is `manual`.
	CurrencyCode string `json:"currency_code,omitempty"`
	// Origin: Describes how this transaction was created.
	Origin string `json:"origin,omitempty"`
	// SubscriptionID: Paddle ID of the subscription that this transaction is for, prefixed with `sub_`.
	SubscriptionID *string `json:"subscription_id,omitempty"`
	// InvoiceID: Paddle ID of the invoice that this transaction is related to, prefixed with `inv_`. Used for compatibility with the Paddle Invoice API, which is now deprecated. This field is scheduled to be removed in the next version of the Paddle API.
	InvoiceID *string `json:"invoice_id,omitempty"`
	// InvoiceNumber: Invoice number for this transaction. Automatically generated by Paddle when you mark a transaction as `billed` where `collection_mode` is `manual`.
	InvoiceNumber *string `json:"invoice_number,omitempty"`
	// CollectionMode: How payment is collected for this transaction. `automatic` for checkout, `manual` for invoices.
	CollectionMode string `json:"collection_mode,omitempty"`
	// DiscountID: Paddle ID of the discount applied to this transaction, prefixed with `dsc_`.
	DiscountID *string `json:"discount_id,omitempty"`
	// BillingDetails: Details for invoicing. Required if `collection_mode` is `manual`.
	BillingDetails *BillingDetails `json:"billing_details,omitempty"`
	// BillingPeriod: Time period that this transaction is for. Set automatically by Paddle for subscription renewals to describe the period that charges are for.
	BillingPeriod *TimePeriod `json:"billing_period,omitempty"`
	// Items: List of items on this transaction. For calculated totals, use `details.line_items`.
	Items []TransactionItem `json:"items,omitempty"`
	// Details: Calculated totals for a transaction, including proration, discounts, tax, and currency conversion. Considered the source of truth for totals on a transaction.
	Details TransactionDetails `json:"details,omitempty"`
	// Payments: List of payment attempts for this transaction, including successful payments. Sorted by `created_at` in descending order, so most recent attempts are returned first.
	Payments []TransactionPaymentAttempt `json:"payments,omitempty"`
	// Checkout: Paddle Checkout details for this transaction. Returned for automatically-collected transactions and where `billing_details.enable_checkout` is `true` for manually-collected transactions; `null` otherwise.
	Checkout *Checkout `json:"checkout,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
	UpdatedAt string `json:"updated_at,omitempty"`
	// BilledAt: RFC 3339 datetime string of when this transaction was marked as `billed`. `null` for transactions that are not `billed` or `completed`. Set automatically by Paddle.
	BilledAt *string `json:"billed_at,omitempty"`
	// Address: Address for this transaction. Returned when the `include` parameter is used with the `address` value and the transaction has an `address_id`.
	Address Address `json:"address,omitempty"`
	// Adjustments: Represents an adjustment entity.
	Adjustments []Adjustment `json:"adjustments,omitempty"`
	// AdjustmentsTotals: Object containing totals for all adjustments on a transaction. Returned when the `include` parameter is used with the `adjustments_totals` value.
	AdjustmentsTotals AdjustmentsTotals `json:"adjustments_totals,omitempty"`
	// Business: Business for this transaction. Returned when the `include` parameter is used with the `business` value and the transaction has a `business_id`.
	Business Business `json:"business,omitempty"`
	// Customer: Customer for this transaction. Returned when the `include` parameter is used with the `customer` value and the transaction has a `customer_id`.
	Customer Customer `json:"customer,omitempty"`
	// Discount: Discount for this transaction. Returned when the `include` parameter is used with the `discount` value and the transaction has a `discount_id`.
	Discount Discount `json:"discount,omitempty"`
	// AvailablePaymentMethods: List of available payment methods for this transaction. Returned when the `include` parameter is used with the `available_payment_methods` value.
	AvailablePaymentMethods []PaymentMethodType `json:"available_payment_methods,omitempty"`
}

// CatalogItem: Add a catalog item to a transaction. In this case, the product and price that you're billing for exist in your product catalog in Paddle.
type CatalogItem struct {
	// Quantity: Quantity of this item on the transaction.
	Quantity int `json:"quantity,omitempty"`
	// Proration: How proration was calculated for this item. Populated when a transaction is created from a subscription change, where `proration_billing_mode` was `prorated_immediately` or `prorated_next_billing_period`. Set automatically by Paddle.
	Proration *Proration `json:"proration,omitempty"`
	// PriceID: Paddle ID of an existing catalog price to add to this transaction, prefixed with `pri_`.
	PriceID string `json:"price_id,omitempty"`
}

// NonCatalogPriceForAnExistingProduct: Add a non-catalog price for an existing product in your catalog to a transaction. In this case, the product you're billing for is a catalog product, but you charge a specific price for it.
type NonCatalogPriceForAnExistingProduct struct {
	// Quantity: Quantity of this item on the transaction.
	Quantity int `json:"quantity,omitempty"`
	// Proration: How proration was calculated for this item. Populated when a transaction is created from a subscription change, where `proration_billing_mode` was `prorated_immediately` or `prorated_next_billing_period`. Set automatically by Paddle.
	Proration *Proration `json:"proration,omitempty"`
	// Price: Price object for a non-catalog item to charge for. Include a `product_id` to relate this non-catalog price to an existing catalog price.
	Price TransactionSubscriptionPriceCreateWithProductID `json:"price,omitempty"`
}

// NonCatalogPriceAndProduct: Add a non-catalog price for a non-catalog product in your catalog to a transaction. In this case, the product and price that you're billing for are specific to this transaction.
type NonCatalogPriceAndProduct struct {
	// Quantity: Quantity of this item on the transaction.
	Quantity int `json:"quantity,omitempty"`
	// Proration: How proration was calculated for this item. Populated when a transaction is created from a subscription change, where `proration_billing_mode` was `prorated_immediately` or `prorated_next_billing_period`. Set automatically by Paddle.
	Proration *Proration `json:"proration,omitempty"`
	// Price: Price object for a non-catalog item to charge for. Include a `product` object to create a non-catalog product for this non-catalog price.
	Price TransactionSubscriptionPriceCreateWithProduct `json:"price,omitempty"`
}

// TransactionsCheckout: Paddle Checkout details for this transaction. You may pass a URL when creating or updating an automatically-collected transaction, or when creating or updating a manually-collected transaction where `billing_details.enable_checkout` is `true`.
type TransactionsCheckout struct {
	/*
	   URL: Checkout URL to use for the payment link for this transaction. Pass the URL for an approved domain, or omit to use your default payment URL.

	   Paddle returns a unique payment link composed of the URL passed or your default payment URL + `_?txn=` and the Paddle ID for this transaction.
	*/
	URL *string `json:"url,omitempty"`
}

// TransactionsCatalogItem: Add a catalog item to a transaction. In this case, the product and price that you're billing for exist in your product catalog in Paddle.
type TransactionsCatalogItem struct {
	// Quantity: Quantity of this item on the transaction.
	Quantity int `json:"quantity,omitempty"`
	// IncludeInTotals: Whether this item should be included in totals for this transaction preview. Typically used to exclude one-time charges from calculations.
	IncludeInTotals bool `json:"include_in_totals,omitempty"`
	// Proration: How proration was calculated for this item. `null` for transaction previews.
	Proration *Proration `json:"proration,omitempty"`
	// PriceID: Paddle ID of an existing catalog price to preview charging for, prefixed with `pri_`.
	PriceID string `json:"price_id,omitempty"`
}

// TransactionsNonCatalogPriceForAnExistingProduct: Add a non-catalog price for an existing product in your catalog to a transaction. In this case, the product you're billing for is a catalog product, but you charge a specific price for it.
type TransactionsNonCatalogPriceForAnExistingProduct struct {
	// Quantity: Quantity of this item on the transaction.
	Quantity int `json:"quantity,omitempty"`
	// IncludeInTotals: Whether this item should be included in totals for this transaction preview. Typically used to exclude one-time charges from calculations.
	IncludeInTotals bool `json:"include_in_totals,omitempty"`
	// Proration: How proration was calculated for this item. `null` for transaction previews.
	Proration *Proration `json:"proration,omitempty"`
	// Price: Price object for a non-catalog item to preview charging for. Include a `product_id` to relate this non-catalog price to an existing catalog price.
	Price TransactionSubscriptionPriceCreateWithProductID `json:"price,omitempty"`
}

// TransactionsNonCatalogPriceAndProduct: Add a non-catalog price for a non-catalog product in your catalog to a transaction. In this case, the product and price that you're billing for are specific to this transaction.
type TransactionsNonCatalogPriceAndProduct struct {
	// Quantity: Quantity of this item on the transaction.
	Quantity int `json:"quantity,omitempty"`
	// IncludeInTotals: Whether this item should be included in totals for this transaction preview. Typically used to exclude one-time charges from calculations.
	IncludeInTotals bool `json:"include_in_totals,omitempty"`
	// Proration: How proration was calculated for this item. `null` for transaction previews.
	Proration *Proration `json:"proration,omitempty"`
	// Price: Price object for a non-catalog item to preview charging for. Include a `product` object to create a non-catalog product for this non-catalog price.
	Price TransactionSubscriptionPriceCreateWithProduct `json:"price,omitempty"`
}

// NewCountryAndZipPostalCodeItemsTransactionsCatalogItem takes a TransactionsCatalogItem type
// and creates a CountryAndZipPostalCodeItems for use in a request.
func NewCountryAndZipPostalCodeItemsTransactionsCatalogItem(r *TransactionsCatalogItem) *CountryAndZipPostalCodeItems {
	return &CountryAndZipPostalCodeItems{TransactionsCatalogItem: r}
}

// NewCountryAndZipPostalCodeItemsTransactionsNonCatalogPriceForAnExistingProduct takes a TransactionsNonCatalogPriceForAnExistingProduct type
// and creates a CountryAndZipPostalCodeItems for use in a request.
func NewCountryAndZipPostalCodeItemsTransactionsNonCatalogPriceForAnExistingProduct(r *TransactionsNonCatalogPriceForAnExistingProduct) *CountryAndZipPostalCodeItems {
	return &CountryAndZipPostalCodeItems{TransactionsNonCatalogPriceForAnExistingProduct: r}
}

// NewCountryAndZipPostalCodeItemsTransactionsNonCatalogPriceAndProduct takes a TransactionsNonCatalogPriceAndProduct type
// and creates a CountryAndZipPostalCodeItems for use in a request.
func NewCountryAndZipPostalCodeItemsTransactionsNonCatalogPriceAndProduct(r *TransactionsNonCatalogPriceAndProduct) *CountryAndZipPostalCodeItems {
	return &CountryAndZipPostalCodeItems{TransactionsNonCatalogPriceAndProduct: r}
}

// CountryAndZipPostalCodeItems represents a union request type of the following types:
//   - `TransactionsCatalogItem`
//   - `TransactionsNonCatalogPriceForAnExistingProduct`
//   - `TransactionsNonCatalogPriceAndProduct`
//
// The following constructor functions can be used to create a new instance of this type.
//   - `NewCountryAndZipPostalCodeItemsTransactionsCatalogItem()`
//   - `NewCountryAndZipPostalCodeItemsTransactionsNonCatalogPriceForAnExistingProduct()`
//   - `NewCountryAndZipPostalCodeItemsTransactionsNonCatalogPriceAndProduct()`
//
// Only one of the values can be set at a time, the first non-nil value will be used in the request.
// Items: Add a non-catalog price for a non-catalog product in your catalog to a transaction. In this case, the product and price that you're billing for are specific to this transaction.
type CountryAndZipPostalCodeItems struct {
	*TransactionsCatalogItem
	*TransactionsNonCatalogPriceForAnExistingProduct
	*TransactionsNonCatalogPriceAndProduct
}

// MarshalJSON implements the json.Marshaler interface.
func (u CountryAndZipPostalCodeItems) MarshalJSON() ([]byte, error) {
	if u.TransactionsCatalogItem != nil {
		return json.Marshal(u.TransactionsCatalogItem)
	}

	if u.TransactionsNonCatalogPriceForAnExistingProduct != nil {
		return json.Marshal(u.TransactionsNonCatalogPriceForAnExistingProduct)
	}

	if u.TransactionsNonCatalogPriceAndProduct != nil {
		return json.Marshal(u.TransactionsNonCatalogPriceAndProduct)
	}

	return nil, nil
}

// CountryAndZipPostalCode: Paddle uses the country and ZIP code (where supplied) to calculate totals.
type CountryAndZipPostalCode struct {
	// Address: Address for this transaction preview.
	Address AddressPreview `json:"address,omitempty"`
	// CustomerID: Paddle ID of the customer that this transaction preview is for, prefixed with `ctm_`.
	CustomerID *string `json:"customer_id,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code.
	CurrencyCode string `json:"currency_code,omitempty"`
	// DiscountID: Paddle ID of the discount applied to this transaction preview, prefixed with `dsc_`.
	DiscountID *string `json:"discount_id,omitempty"`
	/*
	   IgnoreTrials: Whether trials should be ignored for transaction preview calculations.

	   By default, recurring items with trials are considered to have a zero charge when previewing. Set to `true` to disable this.
	*/
	IgnoreTrials bool `json:"ignore_trials,omitempty"`
	// Items: Add a non-catalog price for a non-catalog product in your catalog to a transaction. In this case, the product and price that you're billing for are specific to this transaction.
	Items []CountryAndZipPostalCodeItems `json:"items,omitempty"`
}

// NewIPAddressItemsTransactionsCatalogItem takes a TransactionsCatalogItem type
// and creates a IPAddressItems for use in a request.
func NewIPAddressItemsTransactionsCatalogItem(r *TransactionsCatalogItem) *IPAddressItems {
	return &IPAddressItems{TransactionsCatalogItem: r}
}

// NewIPAddressItemsTransactionsNonCatalogPriceForAnExistingProduct takes a TransactionsNonCatalogPriceForAnExistingProduct type
// and creates a IPAddressItems for use in a request.
func NewIPAddressItemsTransactionsNonCatalogPriceForAnExistingProduct(r *TransactionsNonCatalogPriceForAnExistingProduct) *IPAddressItems {
	return &IPAddressItems{TransactionsNonCatalogPriceForAnExistingProduct: r}
}

// NewIPAddressItemsTransactionsNonCatalogPriceAndProduct takes a TransactionsNonCatalogPriceAndProduct type
// and creates a IPAddressItems for use in a request.
func NewIPAddressItemsTransactionsNonCatalogPriceAndProduct(r *TransactionsNonCatalogPriceAndProduct) *IPAddressItems {
	return &IPAddressItems{TransactionsNonCatalogPriceAndProduct: r}
}

// IPAddressItems represents a union request type of the following types:
//   - `TransactionsCatalogItem`
//   - `TransactionsNonCatalogPriceForAnExistingProduct`
//   - `TransactionsNonCatalogPriceAndProduct`
//
// The following constructor functions can be used to create a new instance of this type.
//   - `NewIPAddressItemsTransactionsCatalogItem()`
//   - `NewIPAddressItemsTransactionsNonCatalogPriceForAnExistingProduct()`
//   - `NewIPAddressItemsTransactionsNonCatalogPriceAndProduct()`
//
// Only one of the values can be set at a time, the first non-nil value will be used in the request.
// Items: Add a non-catalog price for a non-catalog product in your catalog to a transaction. In this case, the product and price that you're billing for are specific to this transaction.
type IPAddressItems struct {
	*TransactionsCatalogItem
	*TransactionsNonCatalogPriceForAnExistingProduct
	*TransactionsNonCatalogPriceAndProduct
}

// MarshalJSON implements the json.Marshaler interface.
func (u IPAddressItems) MarshalJSON() ([]byte, error) {
	if u.TransactionsCatalogItem != nil {
		return json.Marshal(u.TransactionsCatalogItem)
	}

	if u.TransactionsNonCatalogPriceForAnExistingProduct != nil {
		return json.Marshal(u.TransactionsNonCatalogPriceForAnExistingProduct)
	}

	if u.TransactionsNonCatalogPriceAndProduct != nil {
		return json.Marshal(u.TransactionsNonCatalogPriceAndProduct)
	}

	return nil, nil
}

// IPAddress: Paddle fetches location using the IP address to calculate totals.
type IPAddress struct {
	// CustomerIPAddress: IP address for this transaction preview.
	CustomerIPAddress string `json:"customer_ip_address,omitempty"`
	// CustomerID: Paddle ID of the customer that this transaction preview is for, prefixed with `ctm_`.
	CustomerID *string `json:"customer_id,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code.
	CurrencyCode string `json:"currency_code,omitempty"`
	// DiscountID: Paddle ID of the discount applied to this transaction preview, prefixed with `dsc_`.
	DiscountID *string `json:"discount_id,omitempty"`
	/*
	   IgnoreTrials: Whether trials should be ignored for transaction preview calculations.

	   By default, recurring items with trials are considered to have a zero charge when previewing. Set to `true` to disable this.
	*/
	IgnoreTrials bool `json:"ignore_trials,omitempty"`
	// Items: Add a non-catalog price for a non-catalog product in your catalog to a transaction. In this case, the product and price that you're billing for are specific to this transaction.
	Items []IPAddressItems `json:"items,omitempty"`
}

// NewExistingCustomerPaddleIDsItemsTransactionsCatalogItem takes a TransactionsCatalogItem type
// and creates a ExistingCustomerPaddleIDsItems for use in a request.
func NewExistingCustomerPaddleIDsItemsTransactionsCatalogItem(r *TransactionsCatalogItem) *ExistingCustomerPaddleIDsItems {
	return &ExistingCustomerPaddleIDsItems{TransactionsCatalogItem: r}
}

// NewExistingCustomerPaddleIDsItemsTransactionsNonCatalogPriceForAnExistingProduct takes a TransactionsNonCatalogPriceForAnExistingProduct type
// and creates a ExistingCustomerPaddleIDsItems for use in a request.
func NewExistingCustomerPaddleIDsItemsTransactionsNonCatalogPriceForAnExistingProduct(r *TransactionsNonCatalogPriceForAnExistingProduct) *ExistingCustomerPaddleIDsItems {
	return &ExistingCustomerPaddleIDsItems{TransactionsNonCatalogPriceForAnExistingProduct: r}
}

// NewExistingCustomerPaddleIDsItemsTransactionsNonCatalogPriceAndProduct takes a TransactionsNonCatalogPriceAndProduct type
// and creates a ExistingCustomerPaddleIDsItems for use in a request.
func NewExistingCustomerPaddleIDsItemsTransactionsNonCatalogPriceAndProduct(r *TransactionsNonCatalogPriceAndProduct) *ExistingCustomerPaddleIDsItems {
	return &ExistingCustomerPaddleIDsItems{TransactionsNonCatalogPriceAndProduct: r}
}

// ExistingCustomerPaddleIDsItems represents a union request type of the following types:
//   - `TransactionsCatalogItem`
//   - `TransactionsNonCatalogPriceForAnExistingProduct`
//   - `TransactionsNonCatalogPriceAndProduct`
//
// The following constructor functions can be used to create a new instance of this type.
//   - `NewExistingCustomerPaddleIDsItemsTransactionsCatalogItem()`
//   - `NewExistingCustomerPaddleIDsItemsTransactionsNonCatalogPriceForAnExistingProduct()`
//   - `NewExistingCustomerPaddleIDsItemsTransactionsNonCatalogPriceAndProduct()`
//
// Only one of the values can be set at a time, the first non-nil value will be used in the request.
// Items: Add a non-catalog price for a non-catalog product in your catalog to a transaction. In this case, the product and price that you're billing for are specific to this transaction.
type ExistingCustomerPaddleIDsItems struct {
	*TransactionsCatalogItem
	*TransactionsNonCatalogPriceForAnExistingProduct
	*TransactionsNonCatalogPriceAndProduct
}

// MarshalJSON implements the json.Marshaler interface.
func (u ExistingCustomerPaddleIDsItems) MarshalJSON() ([]byte, error) {
	if u.TransactionsCatalogItem != nil {
		return json.Marshal(u.TransactionsCatalogItem)
	}

	if u.TransactionsNonCatalogPriceForAnExistingProduct != nil {
		return json.Marshal(u.TransactionsNonCatalogPriceForAnExistingProduct)
	}

	if u.TransactionsNonCatalogPriceAndProduct != nil {
		return json.Marshal(u.TransactionsNonCatalogPriceAndProduct)
	}

	return nil, nil
}

// ExistingCustomerPaddleIDs: Paddle uses existing customer data to calculate totals. Typically used for logged-in customers.
type ExistingCustomerPaddleIDs struct {
	// AddressID: Paddle ID of the address that this transaction preview is for, prefixed with `add_`. Requires `customer_id`.
	AddressID string `json:"address_id,omitempty"`
	// BusinessID: Paddle ID of the business that this transaction preview is for, prefixed with `biz_`.
	BusinessID *string `json:"business_id,omitempty"`
	// CustomerID: Paddle ID of the customer that this transaction preview is for, prefixed with `ctm_`.
	CustomerID *string `json:"customer_id,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code.
	CurrencyCode string `json:"currency_code,omitempty"`
	// DiscountID: Paddle ID of the discount applied to this transaction preview, prefixed with `dsc_`.
	DiscountID *string `json:"discount_id,omitempty"`
	/*
	   IgnoreTrials: Whether trials should be ignored for transaction preview calculations.

	   By default, recurring items with trials are considered to have a zero charge when previewing. Set to `true` to disable this.
	*/
	IgnoreTrials bool `json:"ignore_trials,omitempty"`
	// Items: Add a non-catalog price for a non-catalog product in your catalog to a transaction. In this case, the product and price that you're billing for are specific to this transaction.
	Items []ExistingCustomerPaddleIDsItems `json:"items,omitempty"`
}

// TransactionItemPreview: List of items to preview transaction calculations for.
type TransactionItemPreview struct {
	// Quantity: Quantity of this item on the transaction.
	Quantity int `json:"quantity,omitempty"`
	// IncludeInTotals: Whether this item should be included in totals for this transaction preview. Typically used to exclude one-time charges from calculations.
	IncludeInTotals bool `json:"include_in_totals,omitempty"`
	// Proration: How proration was calculated for this item. `null` for transaction previews.
	Proration *Proration `json:"proration,omitempty"`
	// Price: Represents a price entity.
	Price Price `json:"price,omitempty"`
}

// TransactionsTaxRatesUsed: List of tax rates applied to this transaction preview.
type TransactionsTaxRatesUsed struct {
	// TaxRate: Rate used to calculate tax for this transaction preview.
	TaxRate string `json:"tax_rate,omitempty"`
	// Totals: Calculated totals for the tax applied to this transaction preview.
	Totals Totals `json:"totals,omitempty"`
}

// TransactionLineItemPreview: Information about line items for this transaction preview. Different from transaction preview `items` as they include totals calculated by Paddle. Considered the source of truth for line item totals.
type TransactionLineItemPreview struct {
	// PriceID: Paddle ID for the price related to this transaction line item, prefixed with `pri_`.
	PriceID string `json:"price_id,omitempty"`
	// Quantity: Quantity of this transaction line item.
	Quantity int `json:"quantity,omitempty"`
	// TaxRate: Rate used to calculate tax for this transaction line item.
	TaxRate string `json:"tax_rate,omitempty"`
	// UnitTotals: Breakdown of the charge for one unit in the lowest denomination of a currency (e.g. cents for USD).
	UnitTotals UnitTotals `json:"unit_totals,omitempty"`
	// Totals: Breakdown of a charge in the lowest denomination of a currency (e.g. cents for USD).
	Totals Totals `json:"totals,omitempty"`
	// Product: Related product entity for this transaction line item price.
	Product Product `json:"product,omitempty"`
}

// TransactionDetailsPreview: Calculated totals for a transaction preview, including discounts, tax, and currency conversion. Considered the source of truth for totals on a transaction preview.
type TransactionDetailsPreview struct {
	// TaxRatesUsed: List of tax rates applied to this transaction preview.
	TaxRatesUsed []TransactionsTaxRatesUsed `json:"tax_rates_used,omitempty"`
	// Totals: Breakdown of the total for a transaction preview. `fee` and `earnings` always return `null` for transaction previews.
	Totals TransactionTotals `json:"totals,omitempty"`
	// LineItems: Information about line items for this transaction preview. Different from transaction preview `items` as they include totals calculated by Paddle. Considered the source of truth for line item totals.
	LineItems []TransactionLineItemPreview `json:"line_items,omitempty"`
}

// TransactionPreview: Represents a transaction entity when previewing transactions.
type TransactionPreview struct {
	// CustomerID: Paddle ID of the customer that this transaction preview is for, prefixed with `ctm_`.
	CustomerID *string `json:"customer_id,omitempty"`
	// AddressID: Paddle ID of the address that this transaction preview is for, prefixed with `add_`. Send one of `address_id`, `customer_ip_address`, or the `address` object when previewing.
	AddressID *string `json:"address_id,omitempty"`
	// BusinessID: Paddle ID of the business that this transaction preview is for, prefixed with `biz_`.
	BusinessID *string `json:"business_id,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code.
	CurrencyCode string `json:"currency_code,omitempty"`
	// DiscountID: Paddle ID of the discount applied to this transaction preview, prefixed with `dsc_`.
	DiscountID *string `json:"discount_id,omitempty"`
	// CustomerIPAddress: IP address for this transaction preview. Send one of `address_id`, `customer_ip_address`, or the `address` object when previewing.
	CustomerIPAddress *string `json:"customer_ip_address,omitempty"`
	// Address: Address for this transaction preview. Send one of `address_id`, `customer_ip_address`, or the `address` object when previewing.
	Address *AddressPreview `json:"address,omitempty"`
	/*
	   IgnoreTrials: Whether trials should be ignored for transaction preview calculations.

	   By default, recurring items with trials are considered to have a zero charge when previewing. Set to `true` to disable this.
	*/
	IgnoreTrials bool `json:"ignore_trials,omitempty"`
	// Items: List of items to preview transaction calculations for.
	Items []TransactionItemPreview `json:"items,omitempty"`
	// Details: Calculated totals for a transaction preview, including discounts, tax, and currency conversion. Considered the source of truth for totals on a transaction preview.
	Details TransactionDetailsPreview `json:"details,omitempty"`
	// AvailablePaymentMethods: List of available payment methods for Paddle Checkout given the price and location information passed.
	AvailablePaymentMethods []PaymentMethodType `json:"available_payment_methods,omitempty"`
}

// TransactionsTransactionsCheckout: Paddle Checkout details for this transaction. You may pass a URL when creating or updating an automatically-collected transaction, or when creating or updating a manually-collected transaction where `billing_details.enable_checkout` is `true`.
type TransactionsTransactionsCheckout struct {
	/*
	   URL: Checkout URL to use for the payment link for this transaction. Pass the URL for an approved domain, or `null` to set to your default payment URL.

	   Paddle returns a unique payment link composed of the URL passed or your default payment URL + `_?txn=` and the Paddle ID for this transaction.
	*/
	URL *string `json:"url,omitempty"`
}

type TransactionInvoicePDF struct {
	// URL: URL of the requested resource.
	URL string `json:"url,omitempty"`
}

// TransactionsClient is a client for the Transactions resource.
type TransactionsClient struct {
	doer Doer
}

// ListTransactionsRequest is given as an input to ListTransactions.
type ListTransactionsRequest struct {
	// After is a query parameter.
	// Return entities after the specified Paddle ID when working with paginated endpoints. Used in the `meta.pagination.next` URL in responses for list operations.
	After *string `in:"query=after;omitempty" json:"-"`
	// BilledAt is a query parameter.
	// Return entities billed at a specific time. Pass an RFC 3339 datetime string, or use `[LT]` (less than), `[LTE]` (less than or equal to), `[GT]` (greater than), or `[GTE]` (greater than or equal to) operators. For example, `billed_at=2023-04-18T17:03:26` or `billed_at[LT]=2023-04-18T17:03:26`.
	BilledAt *string `in:"query=billed_at;omitempty" json:"-"`
	// CollectionMode is a query parameter.
	// Return entities that match the specified collection mode.
	CollectionMode *string `in:"query=collection_mode;omitempty" json:"-"`
	// CreatedAt is a query parameter.
	// Return entities created at a specific time. Pass an RFC 3339 datetime string, or use `[LT]` (less than), `[LTE]` (less than or equal to), `[GT]` (greater than), or `[GTE]` (greater than or equal to) operators. For example, `created_at=2023-04-18T17:03:26` or `created_at[LT]=2023-04-18T17:03:26`.
	CreatedAt *string `in:"query=created_at;omitempty" json:"-"`
	// CustomerID is a query parameter.
	// Return entities related to the specified customer. Use a comma-separated list to specify multiple customer IDs.
	CustomerID []string `in:"query=customer_id;omitempty" json:"-"`
	// ID is a query parameter.
	// Return only the IDs specified. Use a comma-separated list to get multiple entities.
	ID []string `in:"query=id;omitempty" json:"-"`
	// InvoiceNumber is a query parameter.
	// Return entities that match the invoice number. Use a comma-separated list to specify multiple invoice numbers.
	InvoiceNumber []string `in:"query=invoice_number;omitempty" json:"-"`
	// Origin is a query parameter.
	// Return entities related to the specified origin. Use a comma-separated list to specify multiple origins.
	Origin []string `in:"query=origin;omitempty" json:"-"`
	// OrderBy is a query parameter.
	/*
	   Order returned entities by the specified field and direction (`[ASC]` or `[DESC]`). For example, `?order_by=id[ASC]`.

	   Valid fields for ordering: `billed_at`, `created_at`, `id`, and `updated_at`.
	*/
	OrderBy *string `in:"query=order_by;omitempty" json:"-"`
	// Status is a query parameter.
	// Return entities that match the specified status. Use a comma-separated list to specify multiple status values.
	Status []string `in:"query=status;omitempty" json:"-"`
	// SubscriptionID is a query parameter.
	// Return entities related to the specified subscription. Use a comma-separated list to specify multiple subscription IDs. Pass `null` to return entities that are not related to any subscription.
	SubscriptionID []string `in:"query=subscription_id;omitempty" json:"-"`
	// PerPage is a query parameter.
	// Set how many entities are returned per page.
	PerPage *int `in:"query=per_page;omitempty" json:"-"`
	// UpdatedAt is a query parameter.
	// Return entities updated at a specific time. Pass an RFC 3339 datetime string, or use `[LT]` (less than), `[LTE]` (less than or equal to), `[GT]` (greater than), or `[GTE]` (greater than or equal to) operators. For example, `updated_at=2023-04-18T17:03:26` or `updated_at[LT]=2023-04-18T17:03:26`.
	UpdatedAt *string `in:"query=updated_at;omitempty" json:"-"`

	// IncludeAddress allows requesting the address sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeAddress bool `in:"paddle_include=address" json:"-"`

	// IncludeAdjustments allows requesting the adjustment sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeAdjustments bool `in:"paddle_include=adjustment" json:"-"`

	// IncludeAdjustmentsTotals allows requesting the adjustments_totals sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeAdjustmentsTotals bool `in:"paddle_include=adjustments_totals" json:"-"`

	// IncludeBusiness allows requesting the business sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeBusiness bool `in:"paddle_include=business" json:"-"`

	// IncludeCustomer allows requesting the customer sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeCustomer bool `in:"paddle_include=customer" json:"-"`

	// IncludeDiscount allows requesting the discount sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeDiscount bool `in:"paddle_include=discount" json:"-"`

	// IncludeAvailablePaymentMethods allows requesting the available_payment_methods sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeAvailablePaymentMethods bool `in:"paddle_include=available_payment_methods" json:"-"`
}

// ListTransactions performs the GET operation on a Transactions resource.
func (c *TransactionsClient) ListTransactions(ctx context.Context, req *ListTransactionsRequest) (res *Collection[*TransactionIncludes], err error) {
	if err := c.doer.Do(ctx, "GET", "/transactions", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// NewCreateTransactionItemsCatalogItem takes a CatalogItem type
// and creates a CreateTransactionItems for use in a request.
func NewCreateTransactionItemsCatalogItem(r *CatalogItem) *CreateTransactionItems {
	return &CreateTransactionItems{CatalogItem: r}
}

// NewCreateTransactionItemsNonCatalogPriceForAnExistingProduct takes a NonCatalogPriceForAnExistingProduct type
// and creates a CreateTransactionItems for use in a request.
func NewCreateTransactionItemsNonCatalogPriceForAnExistingProduct(r *NonCatalogPriceForAnExistingProduct) *CreateTransactionItems {
	return &CreateTransactionItems{NonCatalogPriceForAnExistingProduct: r}
}

// NewCreateTransactionItemsNonCatalogPriceAndProduct takes a NonCatalogPriceAndProduct type
// and creates a CreateTransactionItems for use in a request.
func NewCreateTransactionItemsNonCatalogPriceAndProduct(r *NonCatalogPriceAndProduct) *CreateTransactionItems {
	return &CreateTransactionItems{NonCatalogPriceAndProduct: r}
}

// CreateTransactionItems represents a union request type of the following types:
//   - `CatalogItem`
//   - `NonCatalogPriceForAnExistingProduct`
//   - `NonCatalogPriceAndProduct`
//
// The following constructor functions can be used to create a new instance of this type.
//   - `NewCreateTransactionItemsCatalogItem()`
//   - `NewCreateTransactionItemsNonCatalogPriceForAnExistingProduct()`
//   - `NewCreateTransactionItemsNonCatalogPriceAndProduct()`
//
// Only one of the values can be set at a time, the first non-nil value will be used in the request.
// Items: Add a non-catalog price for a non-catalog product in your catalog to a transaction. In this case, the product and price that you're billing for are specific to this transaction.
type CreateTransactionItems struct {
	*CatalogItem
	*NonCatalogPriceForAnExistingProduct
	*NonCatalogPriceAndProduct
}

// MarshalJSON implements the json.Marshaler interface.
func (u CreateTransactionItems) MarshalJSON() ([]byte, error) {
	if u.CatalogItem != nil {
		return json.Marshal(u.CatalogItem)
	}

	if u.NonCatalogPriceForAnExistingProduct != nil {
		return json.Marshal(u.NonCatalogPriceForAnExistingProduct)
	}

	if u.NonCatalogPriceAndProduct != nil {
		return json.Marshal(u.NonCatalogPriceAndProduct)
	}

	return nil, nil
}

// CreateTransactionRequest is given as an input to CreateTransaction.
type CreateTransactionRequest struct {

	// Items: Add a non-catalog price for a non-catalog product in your catalog to a transaction. In this case, the product and price that you're billing for are specific to this transaction.
	Items []CreateTransactionItems `json:"items,omitempty"`
	/*
	   Status: Status of this transaction. You may set a transaction to `billed` when creating,
	   or omit to let Paddle set the status. Transactions are created as `ready` if they have
	   an `address_id`, `customer_id`, and `items`, otherwise they are created as `draft`.

	   Marking as `billed` when creating is typically used when working with manually-collected
	   transactions as part of an invoicing workflow. Billed transactions cannot be updated, only canceled.
	*/
	Status *string `json:"status,omitempty"`
	// CustomerID: Paddle ID of the customer that this transaction is for, prefixed with `ctm_`.
	CustomerID *string `json:"customer_id,omitempty"`
	// AddressID: Paddle ID of the address that this transaction is for, prefixed with `add_`.
	AddressID *string `json:"address_id,omitempty"`
	// BusinessID: Paddle ID of the business that this transaction is for, prefixed with `biz_`.
	BusinessID *string `json:"business_id,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code. Must be `USD`, `EUR`, or `GBP` if `collection_mode` is `manual`.
	CurrencyCode *string `json:"currency_code,omitempty"`
	// CollectionMode: How payment is collected for this transaction. `automatic` for checkout, `manual` for invoices.
	CollectionMode *string `json:"collection_mode,omitempty"`
	// DiscountID: Paddle ID of the discount applied to this transaction, prefixed with `dsc_`.
	DiscountID *string `json:"discount_id,omitempty"`
	// BillingDetails: Details for invoicing. Required if `collection_mode` is `manual`.
	BillingDetails *BillingDetails `json:"billing_details,omitempty"`
	// BillingPeriod: Time period that this transaction is for. Set automatically by Paddle for subscription renewals to describe the period that charges are for.
	BillingPeriod *TimePeriod `json:"billing_period,omitempty"`
	// Checkout: Paddle Checkout details for this transaction. You may pass a URL when creating or updating an automatically-collected transaction, or when creating or updating a manually-collected transaction where `billing_details.enable_checkout` is `true`.
	Checkout *TransactionsCheckout `json:"checkout,omitempty"`

	// IncludeAddress allows requesting the address sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeAddress bool `in:"paddle_include=address" json:"-"`

	// IncludeAdjustments allows requesting the adjustment sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeAdjustments bool `in:"paddle_include=adjustment" json:"-"`

	// IncludeAdjustmentsTotals allows requesting the adjustments_totals sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeAdjustmentsTotals bool `in:"paddle_include=adjustments_totals" json:"-"`

	// IncludeBusiness allows requesting the business sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeBusiness bool `in:"paddle_include=business" json:"-"`

	// IncludeCustomer allows requesting the customer sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeCustomer bool `in:"paddle_include=customer" json:"-"`

	// IncludeDiscount allows requesting the discount sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeDiscount bool `in:"paddle_include=discount" json:"-"`

	// IncludeAvailablePaymentMethods allows requesting the available_payment_methods sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeAvailablePaymentMethods bool `in:"paddle_include=available_payment_methods" json:"-"`
}

// CreateTransaction performs the POST operation on a Transactions resource.
func (c *TransactionsClient) CreateTransaction(ctx context.Context, req *CreateTransactionRequest) (res *TransactionIncludes, err error) {
	if err := c.doer.Do(ctx, "POST", "/transactions", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// NewPreviewTransactionRequestCountryAndZipPostalCode takes a CountryAndZipPostalCode type
// and creates a PreviewTransactionRequest for use in a request.
func NewPreviewTransactionRequestCountryAndZipPostalCode(r *CountryAndZipPostalCode) *PreviewTransactionRequest {
	return &PreviewTransactionRequest{CountryAndZipPostalCode: r}
}

// NewPreviewTransactionRequestIPAddress takes a IPAddress type
// and creates a PreviewTransactionRequest for use in a request.
func NewPreviewTransactionRequestIPAddress(r *IPAddress) *PreviewTransactionRequest {
	return &PreviewTransactionRequest{IPAddress: r}
}

// NewPreviewTransactionRequestExistingCustomerPaddleIDs takes a ExistingCustomerPaddleIDs type
// and creates a PreviewTransactionRequest for use in a request.
func NewPreviewTransactionRequestExistingCustomerPaddleIDs(r *ExistingCustomerPaddleIDs) *PreviewTransactionRequest {
	return &PreviewTransactionRequest{ExistingCustomerPaddleIDs: r}
}

// PreviewTransactionRequest represents a union request type of the following types:
//   - `CountryAndZipPostalCode`
//   - `IPAddress`
//   - `ExistingCustomerPaddleIDs`
//
// The following constructor functions can be used to create a new instance of this type.
//   - `NewPreviewTransactionRequestCountryAndZipPostalCode()`
//   - `NewPreviewTransactionRequestIPAddress()`
//   - `NewPreviewTransactionRequestExistingCustomerPaddleIDs()`
//
// Only one of the values can be set at a time, the first non-nil value will be used in the request.
type PreviewTransactionRequest struct {
	*CountryAndZipPostalCode
	*IPAddress
	*ExistingCustomerPaddleIDs
}

// PreviewTransaction performs the POST operation on a Transactions resource.
func (c *TransactionsClient) PreviewTransaction(ctx context.Context, req *PreviewTransactionRequest) (res *TransactionPreview, err error) {
	if err := c.doer.Do(ctx, "POST", "/transactions/preview", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// MarshalJSON implements the json.Marshaler interface.
func (u PreviewTransactionRequest) MarshalJSON() ([]byte, error) {
	if u.CountryAndZipPostalCode != nil {
		return json.Marshal(u.CountryAndZipPostalCode)
	}

	if u.IPAddress != nil {
		return json.Marshal(u.IPAddress)
	}

	if u.ExistingCustomerPaddleIDs != nil {
		return json.Marshal(u.ExistingCustomerPaddleIDs)
	}

	return nil, nil
}

// GetTransactionRequest is given as an input to GetTransaction.
type GetTransactionRequest struct {
	// URL path parameters.
	TransactionID string `in:"path=transaction_id" json:"-"`

	// IncludeAddress allows requesting the address sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeAddress bool `in:"paddle_include=address" json:"-"`

	// IncludeAdjustments allows requesting the adjustment sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeAdjustments bool `in:"paddle_include=adjustment" json:"-"`

	// IncludeAdjustmentsTotals allows requesting the adjustments_totals sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeAdjustmentsTotals bool `in:"paddle_include=adjustments_totals" json:"-"`

	// IncludeBusiness allows requesting the business sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeBusiness bool `in:"paddle_include=business" json:"-"`

	// IncludeCustomer allows requesting the customer sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeCustomer bool `in:"paddle_include=customer" json:"-"`

	// IncludeDiscount allows requesting the discount sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeDiscount bool `in:"paddle_include=discount" json:"-"`

	// IncludeAvailablePaymentMethods allows requesting the available_payment_methods sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeAvailablePaymentMethods bool `in:"paddle_include=available_payment_methods" json:"-"`
}

// GetTransaction performs the GET operation on a Transactions resource.
func (c *TransactionsClient) GetTransaction(ctx context.Context, req *GetTransactionRequest) (res *TransactionIncludes, err error) {
	if err := c.doer.Do(ctx, "GET", "/transactions/{transaction_id}", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// NewUpdateTransactionItemsCatalogItem takes a CatalogItem type
// and creates a UpdateTransactionItems for use in a request.
func NewUpdateTransactionItemsCatalogItem(r *CatalogItem) *UpdateTransactionItems {
	return &UpdateTransactionItems{CatalogItem: r}
}

// NewUpdateTransactionItemsNonCatalogPriceForAnExistingProduct takes a NonCatalogPriceForAnExistingProduct type
// and creates a UpdateTransactionItems for use in a request.
func NewUpdateTransactionItemsNonCatalogPriceForAnExistingProduct(r *NonCatalogPriceForAnExistingProduct) *UpdateTransactionItems {
	return &UpdateTransactionItems{NonCatalogPriceForAnExistingProduct: r}
}

// NewUpdateTransactionItemsNonCatalogPriceAndProduct takes a NonCatalogPriceAndProduct type
// and creates a UpdateTransactionItems for use in a request.
func NewUpdateTransactionItemsNonCatalogPriceAndProduct(r *NonCatalogPriceAndProduct) *UpdateTransactionItems {
	return &UpdateTransactionItems{NonCatalogPriceAndProduct: r}
}

// UpdateTransactionItems represents a union request type of the following types:
//   - `CatalogItem`
//   - `NonCatalogPriceForAnExistingProduct`
//   - `NonCatalogPriceAndProduct`
//
// The following constructor functions can be used to create a new instance of this type.
//   - `NewUpdateTransactionItemsCatalogItem()`
//   - `NewUpdateTransactionItemsNonCatalogPriceForAnExistingProduct()`
//   - `NewUpdateTransactionItemsNonCatalogPriceAndProduct()`
//
// Only one of the values can be set at a time, the first non-nil value will be used in the request.
// Items: Add a non-catalog price for a non-catalog product in your catalog to a transaction. In this case, the product and price that you're billing for are specific to this transaction.
type UpdateTransactionItems struct {
	*CatalogItem
	*NonCatalogPriceForAnExistingProduct
	*NonCatalogPriceAndProduct
}

// MarshalJSON implements the json.Marshaler interface.
func (u UpdateTransactionItems) MarshalJSON() ([]byte, error) {
	if u.CatalogItem != nil {
		return json.Marshal(u.CatalogItem)
	}

	if u.NonCatalogPriceForAnExistingProduct != nil {
		return json.Marshal(u.NonCatalogPriceForAnExistingProduct)
	}

	if u.NonCatalogPriceAndProduct != nil {
		return json.Marshal(u.NonCatalogPriceAndProduct)
	}

	return nil, nil
}

// UpdateTransactionRequest is given as an input to UpdateTransaction.
type UpdateTransactionRequest struct {
	// URL path parameters.
	TransactionID string `in:"path=transaction_id" json:"-"`

	/*
	   Status: Status of this transaction. You may set a transaction to `billed` or `canceled`. Billed transactions cannot be changed.

	   For manually-collected transactions, marking as `billed` is essentially issuing an invoice.
	*/
	Status *PatchField[string] `json:"status,omitempty"`
	// CustomerID: Paddle ID of the customer that this transaction is for, prefixed with `ctm_`.
	CustomerID *PatchField[*string] `json:"customer_id,omitempty"`
	// AddressID: Paddle ID of the address that this transaction is for, prefixed with `add_`.
	AddressID *PatchField[*string] `json:"address_id,omitempty"`
	// BusinessID: Paddle ID of the business that this transaction is for, prefixed with `biz_`.
	BusinessID *PatchField[*string] `json:"business_id,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData *PatchField[CustomData] `json:"custom_data,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code. Must be `USD`, `EUR`, or `GBP` if `collection_mode` is `manual`.
	CurrencyCode *PatchField[string] `json:"currency_code,omitempty"`
	// CollectionMode: How payment is collected for this transaction. `automatic` for checkout, `manual` for invoices.
	CollectionMode *PatchField[string] `json:"collection_mode,omitempty"`
	// DiscountID: Paddle ID of the discount applied to this transaction, prefixed with `dsc_`.
	DiscountID *PatchField[*string] `json:"discount_id,omitempty"`
	// BillingDetails: Details for invoicing. Required if `collection_mode` is `manual`.
	BillingDetails *PatchField[*BillingDetailsUpdate] `json:"billing_details,omitempty"`
	// BillingPeriod: Time period that this transaction is for. Set automatically by Paddle for subscription renewals to describe the period that charges are for.
	BillingPeriod *PatchField[*TimePeriod] `json:"billing_period,omitempty"`
	// Items: Add a non-catalog price for a non-catalog product in your catalog to a transaction. In this case, the product and price that you're billing for are specific to this transaction.
	Items *PatchField[[]UpdateTransactionItems] `json:"items,omitempty"`
	// Checkout: Paddle Checkout details for this transaction. You may pass a URL when creating or updating an automatically-collected transaction, or when creating or updating a manually-collected transaction where `billing_details.enable_checkout` is `true`.
	Checkout *PatchField[*TransactionsTransactionsCheckout] `json:"checkout,omitempty"`

	// IncludeAddress allows requesting the address sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeAddress bool `in:"paddle_include=address" json:"-"`

	// IncludeAdjustments allows requesting the adjustment sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeAdjustments bool `in:"paddle_include=adjustment" json:"-"`

	// IncludeAdjustmentsTotals allows requesting the adjustments_totals sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeAdjustmentsTotals bool `in:"paddle_include=adjustments_totals" json:"-"`

	// IncludeBusiness allows requesting the business sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeBusiness bool `in:"paddle_include=business" json:"-"`

	// IncludeCustomer allows requesting the customer sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeCustomer bool `in:"paddle_include=customer" json:"-"`

	// IncludeDiscount allows requesting the discount sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeDiscount bool `in:"paddle_include=discount" json:"-"`

	// IncludeAvailablePaymentMethods allows requesting the available_payment_methods sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeAvailablePaymentMethods bool `in:"paddle_include=available_payment_methods" json:"-"`
}

// UpdateTransaction performs the PATCH operation on a Transactions resource.
func (c *TransactionsClient) UpdateTransaction(ctx context.Context, req *UpdateTransactionRequest) (res *TransactionIncludes, err error) {
	if err := c.doer.Do(ctx, "PATCH", "/transactions/{transaction_id}", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// GetTransactionInvoiceRequest is given as an input to GetTransactionInvoice.
type GetTransactionInvoiceRequest struct {
	// URL path parameters.
	TransactionID string `in:"path=transaction_id" json:"-"`
}

// GetTransactionInvoice performs the GET operation on a Transactions resource.
func (c *TransactionsClient) GetTransactionInvoice(ctx context.Context, req *GetTransactionInvoiceRequest) (res *TransactionInvoicePDF, err error) {
	if err := c.doer.Do(ctx, "GET", "/transactions/{transaction_id}/invoice", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}
