// Package paddle provides the official SDK for using the Paddle Billing API.
package paddle

import (
	"context"
	"net/url"

	"github.com/PaddleHQ/paddle-go-sdk/v3/internal/client"

	"github.com/hashicorp/go-cleanhttp"
)

// Doer is an interface that is used to make requests to the Paddle API.
// This is of the custom client used by the SDK, instead of the standard
// http.Client Do method.
type Doer interface {
	Do(ctx context.Context, method, path string, src, dst any) error
}

const (
	// ProductionBaseURL is the base URL for the production Paddle API.
	ProductionBaseURL = "https://api.paddle.com"

	// SandboxBaseURL is the base URL for the sandbox Paddle API.
	SandboxBaseURL = "https://sandbox-api.paddle.com"
)

// New creates a new Paddle SDK with the given API key.
func New(apiKey string, opts ...Option) (*SDK, error) {
	return bootstrapSDK(
		append([]Option{
			WithAPIKey(apiKey),
			WithBaseURL(ProductionBaseURL),
		}, opts...)...,
	)
}

// NewSandbox creates a new Paddle SDK with the given API key, using the sandbox
// environment.
func NewSandbox(apiKey string, opts ...Option) (*SDK, error) {
	return bootstrapSDK(
		append([]Option{
			WithAPIKey(apiKey),
			WithBaseURL(SandboxBaseURL),
		}, opts...)...,
	)
}

func bootstrapSDK(opts ...Option) (*SDK, error) {
	o := &options{
		Client: cleanhttp.DefaultPooledClient(),
	}

	for _, fn := range opts {
		fn(o)
	}

	parsedBaseURL, err := url.Parse(o.BaseURL)
	if err != nil {
		return nil, err
	}

	c, err := client.New(cleanhttp.DefaultPooledClient(), o.APIKey, parsedBaseURL)
	if err != nil {
		return nil, err
	}

	// newSDK is generated by the SDK generator, do not modify.
	return newSDK(c), nil
}
