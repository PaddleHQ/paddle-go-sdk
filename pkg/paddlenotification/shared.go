// Code generated by the Paddle SDK Generator; DO NOT EDIT.

package paddlenotification

// CountryCode: Supported two-letter ISO 3166-1 alpha-2 country code for this address..
type CountryCode string

const (
	CountryCodeAD = "AD"
	CountryCodeAE = "AE"
	CountryCodeAG = "AG"
	CountryCodeAI = "AI"
	CountryCodeAL = "AL"
	CountryCodeAM = "AM"
	CountryCodeAO = "AO"
	CountryCodeAR = "AR"
	CountryCodeAS = "AS"
	CountryCodeAT = "AT"
	CountryCodeAU = "AU"
	CountryCodeAW = "AW"
	CountryCodeAX = "AX"
	CountryCodeAZ = "AZ"
	CountryCodeBA = "BA"
	CountryCodeBB = "BB"
	CountryCodeBD = "BD"
	CountryCodeBE = "BE"
	CountryCodeBF = "BF"
	CountryCodeBG = "BG"
	CountryCodeBH = "BH"
	CountryCodeBI = "BI"
	CountryCodeBJ = "BJ"
	CountryCodeBL = "BL"
	CountryCodeBM = "BM"
	CountryCodeBN = "BN"
	CountryCodeBO = "BO"
	CountryCodeBQ = "BQ"
	CountryCodeBR = "BR"
	CountryCodeBS = "BS"
	CountryCodeBT = "BT"
	CountryCodeBV = "BV"
	CountryCodeBW = "BW"
	CountryCodeBZ = "BZ"
	CountryCodeCA = "CA"
	CountryCodeCC = "CC"
	CountryCodeCG = "CG"
	CountryCodeCH = "CH"
	CountryCodeCI = "CI"
	CountryCodeCK = "CK"
	CountryCodeCL = "CL"
	CountryCodeCM = "CM"
	CountryCodeCN = "CN"
	CountryCodeCO = "CO"
	CountryCodeCR = "CR"
	CountryCodeCV = "CV"
	CountryCodeCW = "CW"
	CountryCodeCX = "CX"
	CountryCodeCY = "CY"
	CountryCodeCZ = "CZ"
	CountryCodeDE = "DE"
	CountryCodeDJ = "DJ"
	CountryCodeDK = "DK"
	CountryCodeDM = "DM"
	CountryCodeDO = "DO"
	CountryCodeDZ = "DZ"
	CountryCodeEC = "EC"
	CountryCodeEE = "EE"
	CountryCodeEG = "EG"
	CountryCodeEH = "EH"
	CountryCodeER = "ER"
	CountryCodeES = "ES"
	CountryCodeET = "ET"
	CountryCodeFI = "FI"
	CountryCodeFJ = "FJ"
	CountryCodeFK = "FK"
	CountryCodeFM = "FM"
	CountryCodeFO = "FO"
	CountryCodeFR = "FR"
	CountryCodeGA = "GA"
	CountryCodeGB = "GB"
	CountryCodeGD = "GD"
	CountryCodeGE = "GE"
	CountryCodeGF = "GF"
	CountryCodeGG = "GG"
	CountryCodeGH = "GH"
	CountryCodeGI = "GI"
	CountryCodeGL = "GL"
	CountryCodeGM = "GM"
	CountryCodeGN = "GN"
	CountryCodeGP = "GP"
	CountryCodeGQ = "GQ"
	CountryCodeGR = "GR"
	CountryCodeGS = "GS"
	CountryCodeGT = "GT"
	CountryCodeGU = "GU"
	CountryCodeGW = "GW"
	CountryCodeGY = "GY"
	CountryCodeHK = "HK"
	CountryCodeHM = "HM"
	CountryCodeHN = "HN"
	CountryCodeHR = "HR"
	CountryCodeHU = "HU"
	CountryCodeID = "ID"
	CountryCodeIE = "IE"
	CountryCodeIL = "IL"
	CountryCodeIM = "IM"
	CountryCodeIN = "IN"
	CountryCodeIO = "IO"
	CountryCodeIQ = "IQ"
	CountryCodeIS = "IS"
	CountryCodeIT = "IT"
	CountryCodeJE = "JE"
	CountryCodeJM = "JM"
	CountryCodeJO = "JO"
	CountryCodeJP = "JP"
	CountryCodeKE = "KE"
	CountryCodeKG = "KG"
	CountryCodeKH = "KH"
	CountryCodeKI = "KI"
	CountryCodeKM = "KM"
	CountryCodeKN = "KN"
	CountryCodeKR = "KR"
	CountryCodeKW = "KW"
	CountryCodeKY = "KY"
	CountryCodeKZ = "KZ"
	CountryCodeLA = "LA"
	CountryCodeLB = "LB"
	CountryCodeLC = "LC"
	CountryCodeLI = "LI"
	CountryCodeLK = "LK"
	CountryCodeLR = "LR"
	CountryCodeLS = "LS"
	CountryCodeLT = "LT"
	CountryCodeLU = "LU"
	CountryCodeLV = "LV"
	CountryCodeMA = "MA"
	CountryCodeMC = "MC"
	CountryCodeMD = "MD"
	CountryCodeME = "ME"
	CountryCodeMF = "MF"
	CountryCodeMG = "MG"
	CountryCodeMH = "MH"
	CountryCodeMK = "MK"
	CountryCodeMN = "MN"
	CountryCodeMO = "MO"
	CountryCodeMP = "MP"
	CountryCodeMQ = "MQ"
	CountryCodeMR = "MR"
	CountryCodeMS = "MS"
	CountryCodeMT = "MT"
	CountryCodeMU = "MU"
	CountryCodeMV = "MV"
	CountryCodeMW = "MW"
	CountryCodeMX = "MX"
	CountryCodeMY = "MY"
	CountryCodeMZ = "MZ"
	CountryCodeNA = "NA"
	CountryCodeNC = "NC"
	CountryCodeNE = "NE"
	CountryCodeNF = "NF"
	CountryCodeNG = "NG"
	CountryCodeNL = "NL"
	CountryCodeNO = "NO"
	CountryCodeNP = "NP"
	CountryCodeNR = "NR"
	CountryCodeNU = "NU"
	CountryCodeNZ = "NZ"
	CountryCodeOM = "OM"
	CountryCodePA = "PA"
	CountryCodePE = "PE"
	CountryCodePF = "PF"
	CountryCodePG = "PG"
	CountryCodePH = "PH"
	CountryCodePK = "PK"
	CountryCodePL = "PL"
	CountryCodePM = "PM"
	CountryCodePN = "PN"
	CountryCodePR = "PR"
	CountryCodePS = "PS"
	CountryCodePT = "PT"
	CountryCodePW = "PW"
	CountryCodePY = "PY"
	CountryCodeQA = "QA"
	CountryCodeRE = "RE"
	CountryCodeRO = "RO"
	CountryCodeRS = "RS"
	CountryCodeRW = "RW"
	CountryCodeSA = "SA"
	CountryCodeSB = "SB"
	CountryCodeSC = "SC"
	CountryCodeSE = "SE"
	CountryCodeSG = "SG"
	CountryCodeSH = "SH"
	CountryCodeSI = "SI"
	CountryCodeSJ = "SJ"
	CountryCodeSK = "SK"
	CountryCodeSL = "SL"
	CountryCodeSM = "SM"
	CountryCodeSN = "SN"
	CountryCodeSR = "SR"
	CountryCodeST = "ST"
	CountryCodeSV = "SV"
	CountryCodeSX = "SX"
	CountryCodeSZ = "SZ"
	CountryCodeTC = "TC"
	CountryCodeTD = "TD"
	CountryCodeTF = "TF"
	CountryCodeTG = "TG"
	CountryCodeTH = "TH"
	CountryCodeTJ = "TJ"
	CountryCodeTK = "TK"
	CountryCodeTL = "TL"
	CountryCodeTM = "TM"
	CountryCodeTN = "TN"
	CountryCodeTO = "TO"
	CountryCodeTR = "TR"
	CountryCodeTT = "TT"
	CountryCodeTV = "TV"
	CountryCodeTW = "TW"
	CountryCodeTZ = "TZ"
	CountryCodeUA = "UA"
	CountryCodeUG = "UG"
	CountryCodeUM = "UM"
	CountryCodeUS = "US"
	CountryCodeUY = "UY"
	CountryCodeUZ = "UZ"
	CountryCodeVA = "VA"
	CountryCodeVC = "VC"
	CountryCodeVG = "VG"
	CountryCodeVI = "VI"
	CountryCodeVN = "VN"
	CountryCodeVU = "VU"
	CountryCodeWF = "WF"
	CountryCodeWS = "WS"
	CountryCodeXK = "XK"
	CountryCodeYT = "YT"
	CountryCodeZA = "ZA"
	CountryCodeZM = "ZM"
)

// Status: Whether this entity can be used in Paddle..
type Status string

const (
	StatusActive   = "active"
	StatusArchived = "archived"
)

// ImportMeta: Import information for this entity. `null` if this entity is not imported.
type ImportMeta struct {
	// ExternalID: Reference or identifier for this entity from the solution where it was imported from.
	ExternalID *string `json:"external_id,omitempty"`
	// ImportedFrom: Name of the platform where this entity was imported from.
	ImportedFrom string `json:"imported_from,omitempty"`
}

// CurrencyCode: Three-letter ISO 4217 currency code for this adjustment. Set automatically by Paddle based on the `currency_code` of the related transaction..
type CurrencyCode string

const (
	CurrencyCodeUSD = "USD"
	CurrencyCodeEUR = "EUR"
	CurrencyCodeGBP = "GBP"
	CurrencyCodeJPY = "JPY"
	CurrencyCodeAUD = "AUD"
	CurrencyCodeCAD = "CAD"
	CurrencyCodeCHF = "CHF"
	CurrencyCodeHKD = "HKD"
	CurrencyCodeSGD = "SGD"
	CurrencyCodeSEK = "SEK"
	CurrencyCodeARS = "ARS"
	CurrencyCodeBRL = "BRL"
	CurrencyCodeCNY = "CNY"
	CurrencyCodeCOP = "COP"
	CurrencyCodeCZK = "CZK"
	CurrencyCodeDKK = "DKK"
	CurrencyCodeHUF = "HUF"
	CurrencyCodeILS = "ILS"
	CurrencyCodeINR = "INR"
	CurrencyCodeKRW = "KRW"
	CurrencyCodeMXN = "MXN"
	CurrencyCodeNOK = "NOK"
	CurrencyCodeNZD = "NZD"
	CurrencyCodePLN = "PLN"
	CurrencyCodeRUB = "RUB"
	CurrencyCodeTHB = "THB"
	CurrencyCodeTRY = "TRY"
	CurrencyCodeTWD = "TWD"
	CurrencyCodeUAH = "UAH"
	CurrencyCodeZAR = "ZAR"
)

// TimePeriod: Billing period that proration is based on.
type TimePeriod struct {
	// StartsAt: RFC 3339 datetime string of when this period starts.
	StartsAt string `json:"starts_at,omitempty"`
	// EndsAt: RFC 3339 datetime string of when this period ends.
	EndsAt string `json:"ends_at,omitempty"`
}

/*
Proration: How proration was calculated for this adjustment item. Populated when an adjustment type is `proration`.
Set automatically by Paddle.
*/
type Proration struct {
	// Rate: Rate used to calculate proration.
	Rate string `json:"rate,omitempty"`
	// BillingPeriod: Billing period that proration is based on.
	BillingPeriod TimePeriod `json:"billing_period,omitempty"`
}

// CurrencyCodeChargebacks: Three-letter ISO 4217 currency code for the original chargeback fee..
type CurrencyCodeChargebacks string

const (
	CurrencyCodeChargebacksAUD = "AUD"
	CurrencyCodeChargebacksCAD = "CAD"
	CurrencyCodeChargebacksEUR = "EUR"
	CurrencyCodeChargebacksGBP = "GBP"
	CurrencyCodeChargebacksUSD = "USD"
)

// Original: Chargeback fee before conversion to the payout currency. `null` when the chargeback fee is the same as the payout currency.
type Original struct {
	// Amount: Fee amount for this chargeback in the original currency.
	Amount string `json:"amount,omitempty"`
	// CurrencyCode: Three-letter ISO 4217 currency code for the original chargeback fee.
	CurrencyCode string `json:"currency_code,omitempty"`
}

// ChargebackFee: Chargeback fees incurred for this adjustment. Only returned when the adjustment `action` is `chargeback` or `chargeback_warning`.
type ChargebackFee struct {
	// Amount: Chargeback fee converted into the payout currency.
	Amount string `json:"amount,omitempty"`
	// Original: Chargeback fee before conversion to the payout currency. `null` when the chargeback fee is the same as the payout currency.
	Original *Original `json:"original,omitempty"`
}

// CurrencyCodePayouts: Three-letter ISO 4217 currency code used for the payout for this transaction. If your primary currency has changed, this reflects the primary currency at the time the transaction was billed..
type CurrencyCodePayouts string

const (
	CurrencyCodePayoutsAUD = "AUD"
	CurrencyCodePayoutsCAD = "CAD"
	CurrencyCodePayoutsCHF = "CHF"
	CurrencyCodePayoutsCNY = "CNY"
	CurrencyCodePayoutsCZK = "CZK"
	CurrencyCodePayoutsDKK = "DKK"
	CurrencyCodePayoutsEUR = "EUR"
	CurrencyCodePayoutsGBP = "GBP"
	CurrencyCodePayoutsHUF = "HUF"
	CurrencyCodePayoutsPLN = "PLN"
	CurrencyCodePayoutsSEK = "SEK"
	CurrencyCodePayoutsUSD = "USD"
	CurrencyCodePayoutsZAR = "ZAR"
)

// CatalogType: Type of item. Standard items are considered part of your catalog and are shown on the Paddle web app..
type CatalogType string

const (
	CatalogTypeCustom   = "custom"
	CatalogTypeStandard = "standard"
)

// Interval: Unit of time..
type Interval string

const (
	IntervalDay   = "day"
	IntervalWeek  = "week"
	IntervalMonth = "month"
	IntervalYear  = "year"
)

// Duration: How often this price should be charged. `null` if price is non-recurring (one-time).
type Duration struct {
	// Interval: Unit of time.
	Interval string `json:"interval,omitempty"`
	// Frequency: Amount of time.
	Frequency int `json:"frequency,omitempty"`
}

// TaxMode: How tax is calculated for this price..
type TaxMode string

const (
	TaxModeAccountSetting = "account_setting"
	TaxModeExternal       = "external"
	TaxModeInternal       = "internal"
)

// Money: Base price. This price applies to all customers, except for customers located in countries where you have `unit_price_overrides`.
type Money struct {
	// Amount: Amount in the lowest denomination for the currency, e.g. 10 USD = 1000 (cents).
	Amount string `json:"amount,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code.
	CurrencyCode string `json:"currency_code,omitempty"`
}

// UnitPriceOverride: List of unit price overrides. Use to override the base price with a custom price and currency for a country or group of countries.
type UnitPriceOverride struct {
	// CountryCodes: Supported two-letter ISO 3166-1 alpha-2 country code.
	CountryCodes []CountryCode `json:"country_codes,omitempty"`
	// UnitPrice: Override price. This price applies to customers located in the countries for this unit price override.
	UnitPrice Money `json:"unit_price,omitempty"`
}

// PriceQuantity: Limits on how many times the related product can be purchased at this price. Useful for discount campaigns.
type PriceQuantity struct {
	// Minimum: Minimum quantity of the product related to this price that can be bought. Required if `maximum` set.
	Minimum int `json:"minimum,omitempty"`
	// Maximum: Maximum quantity of the product related to this price that can be bought. Required if `minimum` set. Must be greater than or equal to the `minimum` value.
	Maximum int `json:"maximum,omitempty"`
}

// TaxCategory: Tax category for this product. Used for charging the correct rate of tax. Selected tax category must be enabled on your Paddle account..
type TaxCategory string

const (
	TaxCategoryDigitalGoods                = "digital-goods"
	TaxCategoryEbooks                      = "ebooks"
	TaxCategoryImplementationServices      = "implementation-services"
	TaxCategoryProfessionalServices        = "professional-services"
	TaxCategorySaas                        = "saas"
	TaxCategorySoftwareProgrammingServices = "software-programming-services"
	TaxCategoryStandard                    = "standard"
	TaxCategoryTrainingServices            = "training-services"
	TaxCategoryWebsiteHosting              = "website-hosting"
)

// CollectionMode: How payment is collected for transactions created for this subscription. `automatic` for checkout, `manual` for invoices..
type CollectionMode string

const (
	CollectionModeAutomatic = "automatic"
	CollectionModeManual    = "manual"
)

// BillingDetails: Details for invoicing. Required if `collection_mode` is `manual`.
type BillingDetails struct {
	// EnableCheckout: Whether the related transaction may be paid using a Paddle Checkout.
	EnableCheckout bool `json:"enable_checkout,omitempty"`
	// PurchaseOrderNumber: Customer purchase order number. Appears on invoice documents.
	PurchaseOrderNumber string `json:"purchase_order_number,omitempty"`
	// AdditionalInformation: Notes or other information to include on this invoice. Appears on invoice documents.
	AdditionalInformation *string `json:"additional_information,omitempty"`
	// PaymentTerms: How long a customer has to pay this invoice once issued.
	PaymentTerms Duration `json:"payment_terms,omitempty"`
}

// Price: Related price entity for this item. This reflects the price entity at the time it was added to the subscription.
type Price struct {
	// ID: Unique Paddle ID for this price, prefixed with `pri_`.
	ID string `json:"id,omitempty"`
	// ProductID: Paddle ID for the product that this price is for, prefixed with `pro_`.
	ProductID string `json:"product_id,omitempty"`
	// Description: Internal description for this price, not shown to customers. Typically notes for your team.
	Description string `json:"description,omitempty"`
	// Type: Type of item. Standard items are considered part of your catalog and are shown on the Paddle web app.
	Type string `json:"type,omitempty"`
	// Name: Name of this price, shown to customers at checkout and on invoices. Typically describes how often the related product bills.
	Name *string `json:"name,omitempty"`
	// BillingCycle: How often this price should be charged. `null` if price is non-recurring (one-time).
	BillingCycle *Duration `json:"billing_cycle,omitempty"`
	// TrialPeriod: Trial period for the product related to this price. The billing cycle begins once the trial period is over. `null` for no trial period. Requires `billing_cycle`.
	TrialPeriod *Duration `json:"trial_period,omitempty"`
	// TaxMode: How tax is calculated for this price.
	TaxMode string `json:"tax_mode,omitempty"`
	// UnitPrice: Base price. This price applies to all customers, except for customers located in countries where you have `unit_price_overrides`.
	UnitPrice Money `json:"unit_price,omitempty"`
	// UnitPriceOverrides: List of unit price overrides. Use to override the base price with a custom price and currency for a country or group of countries.
	UnitPriceOverrides []UnitPriceOverride `json:"unit_price_overrides,omitempty"`
	// Quantity: Limits on how many times the related product can be purchased at this price. Useful for discount campaigns.
	Quantity PriceQuantity `json:"quantity,omitempty"`
	// Status: Whether this entity can be used in Paddle.
	Status string `json:"status,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	// ImportMeta: Import information for this entity. `null` if this entity is not imported.
	ImportMeta *ImportMeta `json:"import_meta,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
	UpdatedAt string `json:"updated_at,omitempty"`
}
type CustomData map[string]any
