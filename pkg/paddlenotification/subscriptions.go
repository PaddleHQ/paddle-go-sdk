// Code generated by the Paddle SDK Generator; DO NOT EDIT.

package paddlenotification

// SubscriptionActivated represents the subscription.activated event.
// See https://developer.paddle.com/webhooks/overview for more information.
type SubscriptionActivated struct {
	GenericNotificationEvent
	Data SubscriptionNotification `json:"data"`
}

// SubscriptionCanceled represents the subscription.canceled event.
// See https://developer.paddle.com/webhooks/overview for more information.
type SubscriptionCanceled struct {
	GenericNotificationEvent
	Data SubscriptionNotification `json:"data"`
}

// SubscriptionCreated represents the subscription.created event.
// See https://developer.paddle.com/webhooks/overview for more information.
type SubscriptionCreated struct {
	GenericNotificationEvent
	Data SubscriptionCreatedNotification `json:"data"`
}

// SubscriptionPastDue represents the subscription.past_due event.
// See https://developer.paddle.com/webhooks/overview for more information.
type SubscriptionPastDue struct {
	GenericNotificationEvent
	Data SubscriptionNotification `json:"data"`
}

// SubscriptionImported represents the subscription.imported event.
// See https://developer.paddle.com/webhooks/overview for more information.
type SubscriptionImported struct {
	GenericNotificationEvent
	Data SubscriptionNotification `json:"data"`
}

// SubscriptionPaused represents the subscription.paused event.
// See https://developer.paddle.com/webhooks/overview for more information.
type SubscriptionPaused struct {
	GenericNotificationEvent
	Data SubscriptionNotification `json:"data"`
}

// SubscriptionResumed represents the subscription.resumed event.
// See https://developer.paddle.com/webhooks/overview for more information.
type SubscriptionResumed struct {
	GenericNotificationEvent
	Data SubscriptionNotification `json:"data"`
}

// SubscriptionTrialing represents the subscription.trialing event.
// See https://developer.paddle.com/webhooks/overview for more information.
type SubscriptionTrialing struct {
	GenericNotificationEvent
	Data SubscriptionNotification `json:"data"`
}

// SubscriptionUpdated represents the subscription.updated event.
// See https://developer.paddle.com/webhooks/overview for more information.
type SubscriptionUpdated struct {
	GenericNotificationEvent
	Data SubscriptionNotification `json:"data"`
}

// SubscriptionStatus: Status of this subscription. Set automatically by Paddle. Use the pause subscription or cancel subscription operations to change..
type SubscriptionStatus string

const (
	SubscriptionStatusActive   SubscriptionStatus = "active"
	SubscriptionStatusCanceled SubscriptionStatus = "canceled"
	SubscriptionStatusPastDue  SubscriptionStatus = "past_due"
	SubscriptionStatusPaused   SubscriptionStatus = "paused"
	SubscriptionStatusTrialing SubscriptionStatus = "trialing"
)

// SubscriptionDiscountTimePeriod: Details of the discount applied to this subscription.
type SubscriptionDiscountTimePeriod struct {
	// ID: Unique Paddle ID for this discount, prefixed with `dsc_`.
	ID string `json:"id,omitempty"`
	// StartsAt: RFC 3339 datetime string of when this discount was first applied. `null` for canceled subscriptions where a discount was redeemed but never applied to a transaction.
	StartsAt *string `json:"starts_at,omitempty"`
	// EndsAt: RFC 3339 datetime string of when this discount no longer applies. Where a discount has `maximum_recurring_intervals`, this is the date of the last billing period where this discount applies. `null` where a discount recurs forever.
	EndsAt *string `json:"ends_at,omitempty"`
}

// ScheduledChangeAction: Kind of change that's scheduled to be applied to this subscription..
type ScheduledChangeAction string

const (
	ScheduledChangeActionCancel ScheduledChangeAction = "cancel"
	ScheduledChangeActionPause  ScheduledChangeAction = "pause"
	ScheduledChangeActionResume ScheduledChangeAction = "resume"
)

// SubscriptionScheduledChange: Change that's scheduled to be applied to a subscription. Use the pause subscription, cancel subscription, and resume subscription operations to create scheduled changes. `null` if no scheduled changes.
type SubscriptionScheduledChange struct {
	// Action: Kind of change that's scheduled to be applied to this subscription.
	Action ScheduledChangeAction `json:"action,omitempty"`
	// EffectiveAt: RFC 3339 datetime string of when this scheduled change takes effect.
	EffectiveAt string `json:"effective_at,omitempty"`
	// ResumeAt: RFC 3339 datetime string of when a paused subscription should resume. Only used for `pause` scheduled changes.
	ResumeAt *string `json:"resume_at,omitempty"`
}

// SubscriptionItemStatus: Status of this subscription item. Set automatically by Paddle..
type SubscriptionItemStatus string

const (
	SubscriptionItemStatusActive   SubscriptionItemStatus = "active"
	SubscriptionItemStatusInactive SubscriptionItemStatus = "inactive"
	SubscriptionItemStatusTrialing SubscriptionItemStatus = "trialing"
)

// SubscriptionItem: Represents a subscription item.
type SubscriptionItem struct {
	// Status: Status of this subscription item. Set automatically by Paddle.
	Status SubscriptionItemStatus `json:"status,omitempty"`
	// Quantity: Quantity of this item on the subscription.
	Quantity int `json:"quantity,omitempty"`
	// Recurring: Whether this is a recurring item. `false` if one-time.
	Recurring bool `json:"recurring,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this item was added to this subscription.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this item was last updated on this subscription.
	UpdatedAt string `json:"updated_at,omitempty"`
	// PreviouslyBilledAt: RFC 3339 datetime string of when this item was last billed.
	PreviouslyBilledAt *string `json:"previously_billed_at,omitempty"`
	// NextBilledAt: RFC 3339 datetime string of when this item is next scheduled to be billed.
	NextBilledAt *string `json:"next_billed_at,omitempty"`
	// TrialDates: Trial dates for this item.
	TrialDates *TimePeriod `json:"trial_dates,omitempty"`
	// Price: Related price entity for this item. This reflects the price entity at the time it was added to the subscription.
	Price Price `json:"price,omitempty"`
	// Product: Related product entity for this item. This reflects the product entity at the time it was added to the subscription.
	Product Product `json:"product,omitempty"`
}

// SubscriptionNotification: New or changed entity.
type SubscriptionNotification struct {
	NotificationPayload `json:"-"`

	// ID: Unique Paddle ID for this subscription entity, prefixed with `sub_`.
	ID string `json:"id"`
	// Status: Status of this subscription. Set automatically by Paddle. Use the pause subscription or cancel subscription operations to change.
	Status SubscriptionStatus `json:"status"`
	// CustomerID: Paddle ID of the customer that this subscription is for, prefixed with `ctm_`.
	CustomerID string `json:"customer_id"`
	// AddressID: Paddle ID of the address that this subscription is for, prefixed with `add_`.
	AddressID string `json:"address_id"`
	// BusinessID: Paddle ID of the business that this subscription is for, prefixed with `biz_`.
	BusinessID *string `json:"business_id"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code. Transactions for this subscription are created in this currency. Must be `USD`, `EUR`, or `GBP` if `collection_mode` is `manual`.
	CurrencyCode CurrencyCode `json:"currency_code"`
	// CreatedAt: RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
	CreatedAt string `json:"created_at"`
	// UpdatedAt: RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
	UpdatedAt string `json:"updated_at"`
	// StartedAt: RFC 3339 datetime string of when this subscription started. This may be different from `first_billed_at` if the subscription started in trial.
	StartedAt *string `json:"started_at"`
	// FirstBilledAt: RFC 3339 datetime string of when this subscription was first billed. This may be different from `started_at` if the subscription started in trial.
	FirstBilledAt *string `json:"first_billed_at"`
	// NextBilledAt: RFC 3339 datetime string of when this subscription is next scheduled to be billed.
	NextBilledAt *string `json:"next_billed_at"`
	// PausedAt: RFC 3339 datetime string of when this subscription was paused. Set automatically by Paddle when the pause subscription operation is used. `null` if not paused.
	PausedAt *string `json:"paused_at"`
	// CanceledAt: RFC 3339 datetime string of when this subscription was canceled. Set automatically by Paddle when the cancel subscription operation is used. `null` if not canceled.
	CanceledAt *string `json:"canceled_at"`
	// Discount: Details of the discount applied to this subscription.
	Discount *SubscriptionDiscountTimePeriod `json:"discount"`
	// CollectionMode: How payment is collected for transactions created for this subscription. `automatic` for checkout, `manual` for invoices.
	CollectionMode CollectionMode `json:"collection_mode"`
	// BillingDetails: Details for invoicing. Required if `collection_mode` is `manual`.
	BillingDetails *BillingDetails `json:"billing_details"`
	// CurrentBillingPeriod: Current billing period for this subscription. Set automatically by Paddle based on the billing cycle. `null` for `paused` and `canceled` subscriptions.
	CurrentBillingPeriod *TimePeriod `json:"current_billing_period"`
	// BillingCycle: How often this subscription renews. Set automatically by Paddle based on the prices on this subscription.
	BillingCycle Duration `json:"billing_cycle"`
	// ScheduledChange: Change that's scheduled to be applied to a subscription. Use the pause subscription, cancel subscription, and resume subscription operations to create scheduled changes. `null` if no scheduled changes.
	ScheduledChange *SubscriptionScheduledChange `json:"scheduled_change"`
	// Items: Represents a subscription item.
	Items []SubscriptionItem `json:"items"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data"`
	// ImportMeta: Import information for this entity. `null` if this entity is not imported.
	ImportMeta *ImportMeta `json:"import_meta"`
}

// SubscriptionCreatedNotification: New or changed entity.
type SubscriptionCreatedNotification struct {
	NotificationPayload `json:"-"`

	// ID: Unique Paddle ID for this subscription entity, prefixed with `sub_`.
	ID string `json:"id,omitempty"`
	// TransactionID: Paddle ID for the transaction entity that resulted in this subscription being created, prefixed with `txn_`.
	TransactionID string `json:"transaction_id,omitempty"`
	// Status: Status of this subscription. Set automatically by Paddle. Use the pause subscription or cancel subscription operations to change.
	Status SubscriptionStatus `json:"status,omitempty"`
	// CustomerID: Paddle ID of the customer that this subscription is for, prefixed with `ctm_`.
	CustomerID string `json:"customer_id,omitempty"`
	// AddressID: Paddle ID of the address that this subscription is for, prefixed with `add_`.
	AddressID string `json:"address_id,omitempty"`
	// BusinessID: Paddle ID of the business that this subscription is for, prefixed with `biz_`.
	BusinessID *string `json:"business_id,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code. Transactions for this subscription are created in this currency. Must be `USD`, `EUR`, or `GBP` if `collection_mode` is `manual`.
	CurrencyCode CurrencyCode `json:"currency_code,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
	UpdatedAt string `json:"updated_at,omitempty"`
	// StartedAt: RFC 3339 datetime string of when this subscription started. This may be different from `first_billed_at` if the subscription started in trial.
	StartedAt *string `json:"started_at,omitempty"`
	// FirstBilledAt: RFC 3339 datetime string of when this subscription was first billed. This may be different from `started_at` if the subscription started in trial.
	FirstBilledAt *string `json:"first_billed_at,omitempty"`
	// NextBilledAt: RFC 3339 datetime string of when this subscription is next scheduled to be billed.
	NextBilledAt *string `json:"next_billed_at,omitempty"`
	// PausedAt: RFC 3339 datetime string of when this subscription was paused. Set automatically by Paddle when the pause subscription operation is used. `null` if not paused.
	PausedAt *string `json:"paused_at,omitempty"`
	// CanceledAt: RFC 3339 datetime string of when this subscription was canceled. Set automatically by Paddle when the cancel subscription operation is used. `null` if not canceled.
	CanceledAt *string `json:"canceled_at,omitempty"`
	// Discount: Details of the discount applied to this subscription.
	Discount *SubscriptionDiscountTimePeriod `json:"discount,omitempty"`
	// CollectionMode: How payment is collected for transactions created for this subscription. `automatic` for checkout, `manual` for invoices.
	CollectionMode CollectionMode `json:"collection_mode,omitempty"`
	// BillingDetails: Details for invoicing. Required if `collection_mode` is `manual`.
	BillingDetails *BillingDetails `json:"billing_details,omitempty"`
	// CurrentBillingPeriod: Current billing period for this subscription. Set automatically by Paddle based on the billing cycle. `null` for `paused` and `canceled` subscriptions.
	CurrentBillingPeriod *TimePeriod `json:"current_billing_period,omitempty"`
	// BillingCycle: How often this subscription renews. Set automatically by Paddle based on the prices on this subscription.
	BillingCycle Duration `json:"billing_cycle,omitempty"`
	// ScheduledChange: Change that's scheduled to be applied to a subscription. Use the pause subscription, cancel subscription, and resume subscription operations to create scheduled changes. `null` if no scheduled changes.
	ScheduledChange *SubscriptionScheduledChange `json:"scheduled_change,omitempty"`
	// Items: Represents a subscription item.
	Items []SubscriptionItem `json:"items,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	// ImportMeta: Import information for this entity. `null` if this entity is not imported.
	ImportMeta *ImportMeta `json:"import_meta,omitempty"`
}
