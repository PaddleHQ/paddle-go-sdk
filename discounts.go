// Code generated by the Paddle SDK Generator; DO NOT EDIT.

package paddle

import (
	"context"
	paddleerr "github.com/PaddleHQ/paddle-go-sdk/v4/pkg/paddleerr"
)

// ErrDiscountExpired represents a `discount_expired` error.
// See https://developer.paddle.com/errors/discounts/discount_expired for more information.
var ErrDiscountExpired = &paddleerr.Error{
	Code: "discount_expired",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrDiscountUsageLimitExceeded represents a `discount_usage_limit_exceeded` error.
// See https://developer.paddle.com/errors/discounts/discount_usage_limit_exceeded for more information.
var ErrDiscountUsageLimitExceeded = &paddleerr.Error{
	Code: "discount_usage_limit_exceeded",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrDiscountCodeConflict represents a `discount_code_conflict` error.
// See https://developer.paddle.com/errors/discounts/discount_code_conflict for more information.
var ErrDiscountCodeConflict = &paddleerr.Error{
	Code: "discount_code_conflict",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrDiscountRestrictedProductNotActive represents a `discount_restricted_product_not_active` error.
// See https://developer.paddle.com/errors/discounts/discount_restricted_product_not_active for more information.
var ErrDiscountRestrictedProductNotActive = &paddleerr.Error{
	Code: "discount_restricted_product_not_active",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrDiscountRestrictedProductPriceNotActive represents a `discount_restricted_product_price_not_active` error.
// See https://developer.paddle.com/errors/discounts/discount_restricted_product_price_not_active for more information.
var ErrDiscountRestrictedProductPriceNotActive = &paddleerr.Error{
	Code: "discount_restricted_product_price_not_active",
	Type: paddleerr.ErrorTypeRequestError,
}

// ErrDiscountUsageLimitLessThanTimesUsed represents a `discount_usage_limit_less_than_times_used` error.
// See https://developer.paddle.com/errors/discounts/discount_usage_limit_less_than_times_used for more information.
var ErrDiscountUsageLimitLessThanTimesUsed = &paddleerr.Error{
	Code: "discount_usage_limit_less_than_times_used",
	Type: paddleerr.ErrorTypeRequestError,
}

// Discount: Represents a discount entity with included entities.
type Discount struct {
	// ID: Unique Paddle ID for this discount, prefixed with `dsc_`.
	ID string `json:"id,omitempty"`
	// Status: Whether this entity can be used in Paddle.
	Status DiscountStatus `json:"status,omitempty"`
	// Description: Short description for this discount for your reference. Not shown to customers.
	Description string `json:"description,omitempty"`
	// EnabledForCheckout: Whether this discount can be redeemed by customers at checkout (`true`) or not (`false`).
	EnabledForCheckout bool `json:"enabled_for_checkout,omitempty"`
	// Code: Unique code that customers can use to redeem this discount at checkout. Not case-sensitive.
	Code *string `json:"code,omitempty"`
	// Type: Type of discount. Determines how this discount impacts the checkout or transaction total.
	Type DiscountType `json:"type,omitempty"`
	// Mode: Discount mode. Standard discounts are considered part of your catalog and are shown in the Paddle dashboard.
	Mode DiscountMode `json:"mode,omitempty"`
	// Amount: Amount to discount by. For `percentage` discounts, must be an amount between `0.01` and `100`. For `flat` and `flat_per_seat` discounts, amount in the lowest denomination for a currency.
	Amount string `json:"amount,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code. Required where discount type is `flat` or `flat_per_seat`.
	CurrencyCode *CurrencyCode `json:"currency_code,omitempty"`
	// Recur: Whether this discount applies for multiple subscription billing periods (`true`) or not (`false`).
	Recur bool `json:"recur,omitempty"`
	/*
	   MaximumRecurringIntervals: Number of subscription billing periods that this discount recurs for. Requires `recur`. `null` if this discount recurs forever.

	   Subscription renewals, midcycle changes, and one-time charges billed to a subscription aren't considered a redemption. `times_used` is not incremented in these cases.
	*/
	MaximumRecurringIntervals *int `json:"maximum_recurring_intervals,omitempty"`
	/*
	   UsageLimit: Maximum number of times this discount can be redeemed. This is an overall limit for this discount, rather than a per-customer limit. `null` if this discount can be redeemed an unlimited amount of times.

	   Paddle counts a usage as a redemption on a checkout, transaction, or the initial application against a subscription. Transactions created for subscription renewals, midcycle changes, and one-time charges aren't considered a redemption.
	*/
	UsageLimit *int `json:"usage_limit,omitempty"`
	// RestrictTo: Product or price IDs that this discount is for. When including a product ID, all prices for that product can be discounted. `null` if this discount applies to all products and prices.
	RestrictTo []string `json:"restrict_to,omitempty"`
	/*
	   ExpiresAt: RFC 3339 datetime string of when this discount expires. Discount can no longer be redeemed after this date has elapsed. `null` if this discount can be redeemed forever.

	   Expired discounts can't be redeemed against transactions or checkouts, but can be applied when updating subscriptions.
	*/
	ExpiresAt *string `json:"expires_at,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	/*
	   TimesUsed: How many times this discount has been redeemed. Automatically incremented by Paddle.

	   Paddle counts a usage as a redemption on a checkout, transaction, or subscription. Transactions created for subscription renewals, midcycle changes, and one-time charges aren't considered a redemption.
	*/
	TimesUsed int `json:"times_used,omitempty"`
	// DiscountGroupID: Paddle ID for the discount group related to this discount, prefixed with `dsg_`. `null` if not in a discount group.
	DiscountGroupID *string `json:"discount_group_id,omitempty"`
	// CreatedAt: RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt: RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
	UpdatedAt string `json:"updated_at,omitempty"`
	// ImportMeta: Import information for this entity. `null` if this entity is not imported.
	ImportMeta *ImportMeta `json:"import_meta,omitempty"`
	// DiscountGroup: Discount group for this discount. Returned when the `include` parameter is used with the `discount_group` value and the discount has a `discount_group_id`.
	DiscountGroup DiscountGroup `json:"discount_group,omitempty"`
}

// DiscountsClient is a client for the Discounts resource.
type DiscountsClient struct {
	doer Doer
}

// ListDiscountsRequest is given as an input to ListDiscounts.
type ListDiscountsRequest struct {
	// After is a query parameter.
	// Return entities after the specified Paddle ID when working with paginated endpoints. Used in the `meta.pagination.next` URL in responses for list operations.
	After *string `in:"query=after;omitempty" json:"-"`
	// Code is a query parameter.
	// Return entities that match the discount code. Use a comma-separated list to specify multiple discount codes.
	Code []string `in:"query=code;omitempty" json:"-"`
	// ID is a query parameter.
	// Return only the IDs specified. Use a comma-separated list to get multiple entities.
	ID []string `in:"query=id;omitempty" json:"-"`
	// OrderBy is a query parameter.
	/*
	   Order returned entities by the specified field and direction (`[ASC]` or `[DESC]`). For example, `?order_by=id[ASC]`.

	   Valid fields for ordering: `created_at` and `id`.
	*/
	OrderBy *string `in:"query=order_by;omitempty" json:"-"`
	// PerPage is a query parameter.
	/*
	   Set how many entities are returned per page. Paddle returns the maximum number of results if a number greater than the maximum is requested. Check `meta.pagination.per_page` in the response to see how many were returned.

	   Default: `50`; Maximum: `200`.
	*/
	PerPage *int `in:"query=per_page;omitempty" json:"-"`
	// Status is a query parameter.
	// Return entities that match the specified status. Use a comma-separated list to specify multiple status values.
	Status []string `in:"query=status;omitempty" json:"-"`
	// Mode is a query parameter.
	// Return entities that match the specified mode.
	Mode *string `in:"query=mode;omitempty" json:"-"`
	// DiscountGroupID is a query parameter.
	// Return entities related to the specified discount group. Use a comma-separated list to specify multiple discount group IDs.
	DiscountGroupID []string `in:"query=discount_group_id;omitempty" json:"-"`

	// IncludeDiscountGroup allows requesting the discount_group sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeDiscountGroup bool `in:"paddle_include=discount_group" json:"-"`
}

// ListDiscounts performs the GET operation on a Discounts resource.
func (c *DiscountsClient) ListDiscounts(ctx context.Context, req *ListDiscountsRequest) (res *Collection[*Discount], err error) {
	if err := c.doer.Do(ctx, "GET", "/discounts", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// CreateDiscountRequest is given as an input to CreateDiscount.
type CreateDiscountRequest struct {
	// Amount: Amount to discount by. For `percentage` discounts, must be an amount between `0.01` and `100`. For `flat` and `flat_per_seat` discounts, amount in the lowest denomination for a currency.
	Amount string `json:"amount,omitempty"`
	// Description: Short description for this discount for your reference. Not shown to customers.
	Description string `json:"description,omitempty"`
	// Type: Type of discount. Determines how this discount impacts the checkout or transaction total.
	Type DiscountType `json:"type,omitempty"`
	// EnabledForCheckout: Whether this discount can be redeemed by customers at checkout (`true`) or not (`false`).
	EnabledForCheckout *bool `json:"enabled_for_checkout,omitempty"`
	/*
	   Code: Unique code that customers can use to redeem this discount at checkout. Use letters and numbers only, up to 32 characters. Not case-sensitive.

	   If omitted and `enabled_for_checkout` is `true`, Paddle generates a random 10-character code.
	*/
	Code *string `json:"code,omitempty"`
	// Mode: Discount mode. Standard discounts are considered part of your catalog and are shown in the Paddle dashboard. If omitted, defaults to `standard`.
	Mode *DiscountMode `json:"mode,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code. Required where discount type is `flat` or `flat_per_seat`.
	CurrencyCode *CurrencyCode `json:"currency_code,omitempty"`
	// Recur: Whether this discount applies for multiple subscription billing periods (`true`) or not (`false`). If omitted, defaults to `false`.
	Recur *bool `json:"recur,omitempty"`
	/*
	   MaximumRecurringIntervals: Number of subscription billing periods that this discount recurs for. Requires `recur`. `null` if this discount recurs forever.

	   Subscription renewals, midcycle changes, and one-time charges billed to a subscription aren't considered a redemption. `times_used` is not incremented in these cases.
	*/
	MaximumRecurringIntervals *int `json:"maximum_recurring_intervals,omitempty"`
	/*
	   UsageLimit: Maximum number of times this discount can be redeemed. This is an overall limit for this discount, rather than a per-customer limit. `null` if this discount can be redeemed an unlimited amount of times.

	   Paddle counts a usage as a redemption on a checkout, transaction, or the initial application against a subscription. Transactions created for subscription renewals, midcycle changes, and one-time charges aren't considered a redemption.
	*/
	UsageLimit *int `json:"usage_limit,omitempty"`
	// RestrictTo: Product or price IDs that this discount is for. When including a product ID, all prices for that product can be discounted. `null` if this discount applies to all products and prices.
	RestrictTo []string `json:"restrict_to,omitempty"`
	/*
	   ExpiresAt: RFC 3339 datetime string of when this discount expires. Discount can no longer be redeemed after this date has elapsed. `null` if this discount can be redeemed forever.

	   Expired discounts can't be redeemed against transactions or checkouts, but can be applied when updating subscriptions.
	*/
	ExpiresAt *string `json:"expires_at,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
	// DiscountGroupID: Paddle ID for the discount group related to this discount, prefixed with `dsg_`. `null` if not in a discount group.
	DiscountGroupID *string `json:"discount_group_id,omitempty"`
}

// CreateDiscount performs the POST operation on a Discounts resource.
func (c *DiscountsClient) CreateDiscount(ctx context.Context, req *CreateDiscountRequest) (res *Discount, err error) {
	if err := c.doer.Do(ctx, "POST", "/discounts", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// GetDiscountRequest is given as an input to GetDiscount.
type GetDiscountRequest struct {
	// URL path parameters.
	DiscountID string `in:"path=discount_id" json:"-"`

	// IncludeDiscountGroup allows requesting the discount_group sub-resource as part of this request.
	// If set to true, will be included on the response.
	IncludeDiscountGroup bool `in:"paddle_include=discount_group" json:"-"`
}

// GetDiscount performs the GET operation on a Discounts resource.
func (c *DiscountsClient) GetDiscount(ctx context.Context, req *GetDiscountRequest) (res *Discount, err error) {
	if err := c.doer.Do(ctx, "GET", "/discounts/{discount_id}", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// UpdateDiscountRequest is given as an input to UpdateDiscount.
type UpdateDiscountRequest struct {
	// URL path parameters.
	DiscountID string `in:"path=discount_id" json:"-"`

	// Status: Whether this entity can be used in Paddle.
	Status *PatchField[DiscountStatus] `json:"status,omitempty"`
	// Description: Short description for this discount for your reference. Not shown to customers.
	Description *PatchField[string] `json:"description,omitempty"`
	// EnabledForCheckout: Whether this discount can be redeemed by customers at checkout (`true`) or not (`false`).
	EnabledForCheckout *PatchField[bool] `json:"enabled_for_checkout,omitempty"`
	// Code: Unique code that customers can use to redeem this discount at checkout. Not case-sensitive.
	Code *PatchField[*string] `json:"code,omitempty"`
	// Type: Type of discount. Determines how this discount impacts the checkout or transaction total.
	Type *PatchField[DiscountType] `json:"type,omitempty"`
	// Mode: Discount mode. Standard discounts are considered part of your catalog and are shown in the Paddle dashboard.
	Mode *PatchField[DiscountMode] `json:"mode,omitempty"`
	// Amount: Amount to discount by. For `percentage` discounts, must be an amount between `0.01` and `100`. For `flat` and `flat_per_seat` discounts, amount in the lowest denomination for a currency.
	Amount *PatchField[string] `json:"amount,omitempty"`
	// CurrencyCode: Supported three-letter ISO 4217 currency code. Required where discount type is `flat` or `flat_per_seat`.
	CurrencyCode *PatchField[*CurrencyCode] `json:"currency_code,omitempty"`
	// Recur: Whether this discount applies for multiple subscription billing periods (`true`) or not (`false`).
	Recur *PatchField[bool] `json:"recur,omitempty"`
	/*
	   MaximumRecurringIntervals: Number of subscription billing periods that this discount recurs for. Requires `recur`. `null` if this discount recurs forever.

	   Subscription renewals, midcycle changes, and one-time charges billed to a subscription aren't considered a redemption. `times_used` is not incremented in these cases.
	*/
	MaximumRecurringIntervals *PatchField[*int] `json:"maximum_recurring_intervals,omitempty"`
	/*
	   UsageLimit: Maximum number of times this discount can be redeemed. This is an overall limit for this discount, rather than a per-customer limit. `null` if this discount can be redeemed an unlimited amount of times.

	   Paddle counts a usage as a redemption on a checkout, transaction, or the initial application against a subscription. Transactions created for subscription renewals, midcycle changes, and one-time charges aren't considered a redemption.
	*/
	UsageLimit *PatchField[*int] `json:"usage_limit,omitempty"`
	// RestrictTo: Product or price IDs that this discount is for. When including a product ID, all prices for that product can be discounted. `null` if this discount applies to all products and prices.
	RestrictTo *PatchField[[]string] `json:"restrict_to,omitempty"`
	/*
	   ExpiresAt: RFC 3339 datetime string of when this discount expires. Discount can no longer be redeemed after this date has elapsed. `null` if this discount can be redeemed forever.

	   Expired discounts can't be redeemed against transactions or checkouts, but can be applied when updating subscriptions.
	*/
	ExpiresAt *PatchField[*string] `json:"expires_at,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData *PatchField[CustomData] `json:"custom_data,omitempty"`
	// DiscountGroupID: Paddle ID for the discount group related to this discount, prefixed with `dsg_`. `null` if not in a discount group.
	DiscountGroupID *PatchField[*string] `json:"discount_group_id,omitempty"`
}

// UpdateDiscount performs the PATCH operation on a Discounts resource.
func (c *DiscountsClient) UpdateDiscount(ctx context.Context, req *UpdateDiscountRequest) (res *Discount, err error) {
	if err := c.doer.Do(ctx, "PATCH", "/discounts/{discount_id}", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}
