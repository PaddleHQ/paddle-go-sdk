// Code generated by the Paddle SDK Generator; DO NOT EDIT.

package paddle

import "context"

// SimulationKind: Type of simulation..
type SimulationKind string

const (
	SimulationKindSingleEvent SimulationKind = "single_event"
	SimulationKindScenario    SimulationKind = "scenario"
)

// SimulationType: Represents a simulation type.
type SimulationType struct {
	// Name: Type of simulation sent by Paddle. Single event simulations are in the format `entity.event_type`; scenario simulations are in `snake_case`.
	Name string `json:"name,omitempty"`
	// Label: Descriptive label for this simulation type. Typically gives more context about a scenario. Single event simulations are in the format `entity.event_type`.
	Label string `json:"label,omitempty"`
	// Description: Short description of this simulation type.
	Description string `json:"description,omitempty"`
	// Group: Group for this simulation type. Typically the entity that this event relates to.
	Group string `json:"group,omitempty"`
	// Type: Type of simulation.
	Type SimulationKind `json:"type,omitempty"`
	// Events: Type of event sent by Paddle, in the format `entity.event_type`.
	Events []EventTypeName `json:"events,omitempty"`
}

// SimulationTypesClient is a client for the Simulation types resource.
type SimulationTypesClient struct {
	doer Doer
}

// ListSimulationTypesRequest is given as an input to ListSimulationTypes.
type ListSimulationTypesRequest struct{}

// ListSimulationTypes performs the GET operation on a Simulation types resource.
func (c *SimulationTypesClient) ListSimulationTypes(ctx context.Context, req *ListSimulationTypesRequest) (res *Collection[*SimulationType], err error) {
	if err := c.doer.Do(ctx, "GET", "/simulation-types", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}
