// Code generated by the Paddle SDK Generator; DO NOT EDIT.

package paddle

import (
	"context"
	paddleerr "github.com/PaddleHQ/paddle-go-sdk/pkg/paddleerr"
)

// ErrBusinessContactEmailDomainNotAllowed represents a `business_contact_email_domain_not_allowed` error.
// See https://developer.paddle.com/errors/businesses/business_contact_email_domain_not_allowed for more information.
var ErrBusinessContactEmailDomainNotAllowed = &paddleerr.Error{
	Code: "business_contact_email_domain_not_allowed",
	Type: paddleerr.ErrorTypeRequestError,
}

// BusinessesContacts: List of contacts related to this business, typically used for sending invoices.
type BusinessesContacts struct {
	// Name: Full name of this contact.
	Name string `json:"name,omitempty"`
	// Email: Email address for this contact.
	Email string `json:"email,omitempty"`
}

// BusinessesClient is a client for the Businesses resource.
type BusinessesClient struct {
	doer Doer
}

// ListBusinessesRequest is given as an input to ListBusinesses.
type ListBusinessesRequest struct {
	// URL path parameters.
	CustomerID string `in:"path=customer_id" json:"-"`

	// After is a query parameter.
	// Return entities after the specified Paddle ID when working with paginated endpoints. Used in the `meta.pagination.next` URL in responses for list operations.
	After *string `in:"query=after;omitempty" json:"-"`
	// ID is a query parameter.
	// Return only the IDs specified. Use a comma-separated list to get multiple entities.
	ID []string `in:"query=id;omitempty" json:"-"`
	// OrderBy is a query parameter.
	/*
	   Order returned entities by the specified field and direction (`[ASC]` or `[DESC]`). For example, `?order_by=id[ASC]`.

	   Valid fields for ordering: `id`.
	*/
	OrderBy *string `in:"query=order_by;omitempty" json:"-"`
	// PerPage is a query parameter.
	/*
	   Set how many entities are returned per page. Paddle returns the maximum number of results if a number greater than the maximum is requested. Check `meta.pagination.per_page` in the response to see how many were returned.

	   Default: `50`; Maximum: `200`.
	*/
	PerPage *int `in:"query=per_page;omitempty" json:"-"`
	// Search is a query parameter.
	// Return entities that match a search query. Searches all fields, including contacts, except `status`, `created_at`, and `updated_at`.
	Search *string `in:"query=search;omitempty" json:"-"`
	// Status is a query parameter.
	// Return entities that match the specified status. Use a comma-separated list to specify multiple status values.
	Status []string `in:"query=status;omitempty" json:"-"`
}

// ListBusinesses performs the GET operation on a Businesses resource.
func (c *BusinessesClient) ListBusinesses(ctx context.Context, req *ListBusinessesRequest) (res *Collection[*Business], err error) {
	if err := c.doer.Do(ctx, "GET", "/customers/{customer_id}/businesses", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// CreateBusinessRequest is given as an input to CreateBusiness.
type CreateBusinessRequest struct {
	// URL path parameters.
	CustomerID string `in:"path=customer_id" json:"-"`

	// Name: Name of this business.
	Name string `json:"name,omitempty"`
	// CompanyNumber: Company number for this business.
	CompanyNumber *string `json:"company_number,omitempty"`
	// TaxIdentifier: Tax or VAT Number for this business.
	TaxIdentifier *string `json:"tax_identifier,omitempty"`
	// Contacts: List of contacts related to this business, typically used for sending invoices.
	Contacts []BusinessesContacts `json:"contacts,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData CustomData `json:"custom_data,omitempty"`
}

// CreateBusiness performs the POST operation on a Businesses resource.
func (c *BusinessesClient) CreateBusiness(ctx context.Context, req *CreateBusinessRequest) (res *Business, err error) {
	if err := c.doer.Do(ctx, "POST", "/customers/{customer_id}/businesses", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// GetBusinessRequest is given as an input to GetBusiness.
type GetBusinessRequest struct {
	// URL path parameters.
	CustomerID string `in:"path=customer_id" json:"-"`
	BusinessID string `in:"path=business_id" json:"-"`
}

// GetBusiness performs the GET operation on a Businesses resource.
func (c *BusinessesClient) GetBusiness(ctx context.Context, req *GetBusinessRequest) (res *Business, err error) {
	if err := c.doer.Do(ctx, "GET", "/customers/{customer_id}/businesses/{business_id}", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}

// UpdateBusinessRequest is given as an input to UpdateBusiness.
type UpdateBusinessRequest struct {
	// URL path parameters.
	CustomerID string `in:"path=customer_id" json:"-"`
	BusinessID string `in:"path=business_id" json:"-"`

	// Name: Name of this business.
	Name *PatchField[string] `json:"name,omitempty"`
	// CompanyNumber: Company number for this business.
	CompanyNumber *PatchField[*string] `json:"company_number,omitempty"`
	// TaxIdentifier: Tax or VAT Number for this business.
	TaxIdentifier *PatchField[*string] `json:"tax_identifier,omitempty"`
	// Status: Whether this entity can be used in Paddle.
	Status *PatchField[string] `json:"status,omitempty"`
	// Contacts: List of contacts related to this business, typically used for sending invoices.
	Contacts *PatchField[[]BusinessesContacts] `json:"contacts,omitempty"`
	// CustomData: Your own structured key-value data.
	CustomData *PatchField[CustomData] `json:"custom_data,omitempty"`
}

// UpdateBusiness performs the PATCH operation on a Businesses resource.
func (c *BusinessesClient) UpdateBusiness(ctx context.Context, req *UpdateBusinessRequest) (res *Business, err error) {
	if err := c.doer.Do(ctx, "PATCH", "/customers/{customer_id}/businesses/{business_id}", req, &res); err != nil {
		return nil, err
	}

	return res, nil
}
